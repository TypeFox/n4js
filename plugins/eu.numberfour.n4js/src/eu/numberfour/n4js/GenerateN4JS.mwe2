/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
module eu.numberfour.n4js.GenerateN4JS

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import eu.numberfour.n4js.languageGeneration.*

var rootPath = ".."
var runtimeProject = "eu.numberfour.n4js"
var runtimeProjectPath = "${rootPath}/${runtimeProject}"

var skipUnusedRules = false
var stripAllComments = true

Workflow {
	component = XtextGenerator {
		configuration = N4JSGeneratorModule {
			project = StandardProjectConfig {
				baseName = "eu.numberfour.n4js"
				rootPath = rootPath
				genericIde = {
					enabled = true
					name = "${runtimeProject}.ui"
					root = "${runtimeProjectPath}.ui"
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = false
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				preferXtendStubs = false
			}
		}
		
		language = XtextGeneratorLanguage {
			name = "eu.numberfour.n4js.N4JS"
			fileExtensions = "n4js,js,n4jsd"
			// grammarUri = "platform:/resource/${projectName}/src/eu/numberfour/n4js/N4JS.xtext"

			referencedResource = "platform:/resource/org.eclipse.emf.ecore.xcore.lib/model/XcoreLang.xcore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
			referencedResource = "platform:/resource/eu.numberfour.n4js.ts.model/model/Types.xcore"
			referencedResource = "platform:/resource/eu.numberfour.n4js.ts.model/model/TypeRefs.xcore"
			referencedResource = "platform:/resource/eu.numberfour.n4js.model/model/N4JS.xcore"
			
			fragment = grammarAccess.GrammarAccessFragment2 {}

			fragment = ecore.EMFGeneratorFragment2 {}
			
			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}
			
			fragment = resourceFactory.ResourceFactoryFragment2 {}
			
			fragment = antlr.N4JSAntlrGeneratorFragment2 {
				combinedGrammar = false
				debugGrammar = true
				options = auto-inject {
					keptBitSetName = "FOLLOW_ruleExpression_in_ruleExpressionStatement"
					keptBitSetsPattern = "FOLLOW_norm1_Expression_in_ruleExpressionStatement.*"
				}
				antlrParam = "-Xconversiontimeout"
				antlrParam = "30000"
			}
			
			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 auto-inject {
				inheritImplementation = false
				generateXtendStub = true
				//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
				//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
			}
			
			// scoping and exporting API
			// actually not needed since the scoping is deeply customized via custom bindings
			// fragment = scoping.ImportURIScopingFragment2 {
			//	generateStub = false
			// }
			
			fragment = exporting.SimpleNamesFragment2 {}
			
			fragment = builder.BuilderIntegrationFragment2 {}
			
			// formatter API
			fragment = formatting.Formatter2Fragment2 {
				generateXtendStub = true
			}
			
			// labeling API
			fragment = ui.labeling.LabelProviderFragment2 {
				generateXtendStub = true
			}
			
			// outline API
			fragment = ui.outline.OutlineTreeProviderFragment2 {
				generateXtendStub = true
			}
			
			fragment = ui.outline.QuickOutlineFragment2 {}
			
			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 {
				inheritImplementation = false
				generateXtendStub = true
			}
			
			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 {
				generateXtendStub = true
			}
			
			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 {}
			
			// provides a preference page for template proposals
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}
			
			// provides a compare view
			fragment = ui.compare.CompareFragment2 {}
			
			// create a parser that will perform token id rewrites to treat keywords as ids in some situations
			fragment = eu.numberfour.n4js.antlr.syntaxcoloring.N4JSHighlightingParserGeneratorFragment2 auto-inject {
				antlrParam = "-Xconversiontimeout"
				antlrParam = "30000"
				options = auto-inject {
					keptBitSetName = "FOLLOW_ruleExpression_in_ruleExpressionStatement"
					keptBitSetsPattern = "FOLLOW_norm1_Expression_in_ruleExpressionStatement.*"
				}
			}
			
			fragment = org.eclipse.xtext.generator.adapter.FragmentAdapter {
				// this fragment is still kept for validation purposes in order to reveal potential bugs in the 
				//  new highlighting parser grammar generator
				// can be removed without any functional impact
				fragment = eu.numberfour.n4js.antlr.syntaxcoloring.HighlightingParserGeneratorFragment auto-inject {
					antlrParam = "-Xconversiontimeout"
					antlrParam = "30000"
					options = auto-inject {
						keptBitSetName = "FOLLOW_ruleExpression_in_ruleExpressionStatement"
						keptBitSetsPattern = "FOLLOW_norm1_Expression_in_ruleExpressionStatement.*"
					}
				}
			}
			
			fragment = eu.numberfour.n4js.antlr.compressor.ParserCompressorFragment2 auto-inject {
				grammarFile = "${runtimeProjectPath}.ui/src-gen/eu/numberfour/n4js/ui/editor/syntaxcoloring/InternalN4JSParser.java"
				grammarFile = "${runtimeProjectPath}/src-gen/eu/numberfour/n4js/parser/antlr/internal/InternalN4JSParser.java"
			}
		}
	}
}
