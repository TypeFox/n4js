package eu.numberfour.n4js.ui.editor.syntaxcoloring;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import eu.numberfour.n4js.services.N4JSGrammarAccess;
import eu.numberfour.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;


import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Async", "Await", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Out", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=45;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=32;
    public static final int False=36;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=38;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=53;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int Out=61;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=58;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=33;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=39;
    public static final int Case=43;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=50;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=44;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=41;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=60;
    public static final int Null=47;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=49;
    public static final int FullStopFullStopFullStop=54;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=37;
    public static final int Async=30;
    public static final int This=42;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=51;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=35;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=57;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=56;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=48;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=34;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=55;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=52;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=46;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=40;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=59;
    public static final int Await=31;


        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }



     	private N4JSGrammarAccess grammarAccess;

        public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
            this(input);
            this.grammarAccess = grammarAccess;
        }
        
    	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScript();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleScript() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_0 = null;




        try {
            {
            {
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getScriptAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    ScriptElementsScriptElementParserRuleCall_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.stop):null), grammarAccess.getScriptAccess().getScriptElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleScriptElement_return retval = new InternalN4JSParser.ruleScriptElement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;

        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;




        try {
            {
            int alt3=7;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_4=null;
        Token CommaKeyword_1_4_6_0=null;
        Token RightCurlyBracketKeyword_1_4_7=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_5 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_3_0_0_6 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_5 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_3_0_1_6 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_5_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_5);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt16=5;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_6);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop4;
                        }
                    } while (true);

                    pushFollow(FOLLOW_6);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt13=2;
                    alt13 = dfa13.predict(input);
                    switch (alt13) {
                        case 1 :
                            {
                            {
                            loop5:
                            do {
                                int alt5=2;
                                int LA5_0 = input.LA(1);

                                if ( ((LA5_0>=Protected && LA5_0<=Abstract)||LA5_0==External||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Public||LA5_0==Static||LA5_0==Const) ) {
                                    alt5=1;
                                }


                                switch (alt5) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_7);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop5;
                                }
                            } while (true);

                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2());
                              					
                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==Tilde) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4());
                              							
                            }

                            }


                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==LessThanSign) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_3_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.start):null), (TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);

                            if ( (LA8_0==Implements||LA8_0==Extends) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    ClassExtendsClauseParserRuleCall_1_3_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop9:
                            do {
                                int alt9=2;
                                int LA9_0 = input.LA(1);

                                if ( ((LA9_0>=Protected && LA9_0<=Abstract)||LA9_0==External||(LA9_0>=Private && LA9_0<=Project)||LA9_0==Public||LA9_0==Static||LA9_0==Const) ) {
                                    alt9=1;
                                }


                                switch (alt9) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_11);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop9;
                                }
                            } while (true);

                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2());
                              					
                            }
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==Tilde) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4());
                              							
                            }

                            }


                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);

                            if ( (LA11_0==LessThanSign) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_3_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.start):null), (TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);

                            if ( (LA12_0==Implements||LA12_0==Extends) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    InterfaceImplementsListParserRuleCall_1_3_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( ((LA14_0>=Protected && LA14_0<=Abstract)||LA14_0==External||(LA14_0>=Private && LA14_0<=Project)||LA14_0==Public||LA14_0==Static||LA14_0==Const) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_12);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3());
                      					
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_4_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftCurlyBracketKeyword_1_4_4, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_5());
                      					
                    }

                    }


                    }
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==Comma) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce(CommaKeyword_1_4_6_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_4_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_4_7, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariables_return retval = new InternalN4JSParser.ruleTypeVariables_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;




        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_16); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_17);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1());
              			
            }

            }


            }
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==Comma) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_17);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclaration_return retval = new InternalN4JSParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclarationImpl_return retval = new InternalN4JSParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;

        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;




        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_18); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0());
              	
            }
            int alt20=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt20=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt20=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt20=3;
                }
                break;
            case Default:
                {
                alt20=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_19); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_20);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_21);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==From) && (synpred8_InternalN4JSParser())) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_20);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_22); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0());
                      					
                    }

                    }


                    }
                    int alt19=2;
                    alt19 = dfa19.predict(input);
                    switch (alt19) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0());
                              						
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_20);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0());
                              							
                            }

                            }


                            }

                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSParser.ruleExportFromClause_return retval = new InternalN4JSParser.ruleExportFromClause_return();
        retval.start = input.LT(1);

        Token FromKeyword_0=null;
        InternalN4JSParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;




        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_23); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSParser.ruleExportClause_return retval = new InternalN4JSParser.ruleExportClause_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_24); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( ((LA23_0>=Intersection && LA23_0<=Implements)||(LA23_0>=Promisify && LA23_0<=Abstract)||LA23_0==External||(LA23_0>=Private && LA23_0<=Project)||LA23_0==Public||LA23_0==Static||LA23_0==Target||(LA23_0>=Async && LA23_0<=Await)||LA23_0==Union||(LA23_0>=Yield && LA23_0<=This)||LA23_0==From||LA23_0==Type||(LA23_0>=Get && LA23_0<=Let)||(LA23_0>=Out && LA23_0<=Set)||LA23_0==As||LA23_0==Of||LA23_0==RULE_IDENTIFIER) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0());
                      				
                    }

                    }


                    }
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==Comma) ) {
                            int LA21_1 = input.LA(2);

                            if ( ((LA21_1>=Intersection && LA21_1<=Implements)||(LA21_1>=Promisify && LA21_1<=Abstract)||LA21_1==External||(LA21_1>=Private && LA21_1<=Project)||LA21_1==Public||LA21_1==Static||LA21_1==Target||(LA21_1>=Async && LA21_1<=Await)||LA21_1==Union||(LA21_1>=Yield && LA21_1<=This)||LA21_1==From||LA21_1==Type||(LA21_1>=Get && LA21_1<=Let)||(LA21_1>=Out && LA21_1<=Set)||LA21_1==As||LA21_1==Of||LA21_1==RULE_IDENTIFIER) ) {
                                alt21=1;
                            }


                        }


                        switch (alt21) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==Comma) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2());
                              			
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleExportSpecifier_return retval = new InternalN4JSParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_26);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0());
              			
            }

            }


            }
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==As) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_27); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleExportableElement_return retval = new InternalN4JSParser.ruleExportableElement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleExportedFunctionDeclaration_return ExportedFunctionDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;




        try {
            {
            int alt25=6;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedFunctionDeclarationParserRuleCall_4=ruleExportedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.start):null), (ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getExportedFunctionDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_2_0_0_6 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_2_0_1_6 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_28);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt40=4;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    {
                    {
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( ((LA26_0>=Protected && LA26_0<=Abstract)||LA26_0==External||(LA26_0>=Private && LA26_0<=Project)||LA26_0==Public||LA26_0==Static||LA26_0==Const) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_6);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop26;
                        }
                    } while (true);

                    pushFollow(FOLLOW_6);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop27:
                    do {
                        int alt27=2;
                        alt27 = dfa27.predict(input);
                        switch (alt27) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_29);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_30);
                    ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_31);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3());
                      					
                    }

                    }


                    }
                    loop28:
                    do {
                        int alt28=2;
                        int LA28_0 = input.LA(1);

                        if ( (LA28_0==Comma) ) {
                            alt28=1;
                        }


                        switch (alt28) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_31);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop28;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt37=2;
                    alt37 = dfa37.predict(input);
                    switch (alt37) {
                        case 1 :
                            {
                            {
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);

                                if ( ((LA29_0>=Protected && LA29_0<=Abstract)||LA29_0==External||(LA29_0>=Private && LA29_0<=Project)||LA29_0==Public||LA29_0==Static||LA29_0==Const) ) {
                                    alt29=1;
                                }


                                switch (alt29) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_7);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop29;
                                }
                            } while (true);

                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2());
                              					
                            }
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==Tilde) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4());
                              							
                            }

                            }


                            }
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==LessThanSign) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt32=2;
                            int LA32_0 = input.LA(1);

                            if ( (LA32_0==Implements||LA32_0==Extends) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    ClassExtendsClauseParserRuleCall_1_2_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop33:
                            do {
                                int alt33=2;
                                int LA33_0 = input.LA(1);

                                if ( ((LA33_0>=Protected && LA33_0<=Abstract)||LA33_0==External||(LA33_0>=Private && LA33_0<=Project)||LA33_0==Public||LA33_0==Static||LA33_0==Const) ) {
                                    alt33=1;
                                }


                                switch (alt33) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_11);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop33;
                                }
                            } while (true);

                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2());
                              					
                            }
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0==Tilde) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4());
                              							
                            }

                            }


                            }
                            int alt35=2;
                            int LA35_0 = input.LA(1);

                            if ( (LA35_0==LessThanSign) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt36=2;
                            int LA36_0 = input.LA(1);

                            if ( (LA36_0==Implements||LA36_0==Extends) ) {
                                alt36=1;
                            }
                            switch (alt36) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    InterfaceImplementsListParserRuleCall_1_2_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( ((LA38_0>=Protected && LA38_0<=Abstract)||LA38_0==External||(LA38_0>=Private && LA38_0<=Project)||LA38_0==Public||LA38_0==Static||LA38_0==Const) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_12);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3());
                      					
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5());
                      					
                    }

                    }


                    }
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==Comma) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0());
                    	      				
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclaration_return retval = new InternalN4JSParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclarationImpl_return retval = new InternalN4JSParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_32); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0());
              	
            }
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=Intersection && LA41_0<=Implements)||(LA41_0>=Promisify && LA41_0<=Abstract)||LA41_0==External||(LA41_0>=Private && LA41_0<=Project)||LA41_0==Public||LA41_0==Static||LA41_0==Target||(LA41_0>=Async && LA41_0<=Await)||LA41_0==Union||(LA41_0>=Yield && LA41_0<=This)||LA41_0==From||LA41_0==Type||(LA41_0>=Get && LA41_0<=Let)||(LA41_0>=Out && LA41_0<=Set)||LA41_0==As||LA41_0==Of||LA41_0==Asterisk||LA41_0==LeftCurlyBracket||LA41_0==RULE_IDENTIFIER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    pushFollow(FOLLOW_19);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_23); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_20);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSParser.ruleImportClause_return retval = new InternalN4JSParser.ruleImportClause_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        InternalN4JSParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;

        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;




        try {
            {
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( ((LA43_0>=Intersection && LA43_0<=Implements)||(LA43_0>=Promisify && LA43_0<=Abstract)||LA43_0==External||(LA43_0>=Private && LA43_0<=Project)||LA43_0==Public||LA43_0==Static||LA43_0==Target||(LA43_0>=Async && LA43_0<=Await)||LA43_0==Union||(LA43_0>=Yield && LA43_0<=This)||LA43_0==From||LA43_0==Type||(LA43_0>=Get && LA43_0<=Let)||(LA43_0>=Out && LA43_0<=Set)||LA43_0==As||LA43_0==Of||LA43_0==RULE_IDENTIFIER) ) {
                alt43=1;
            }
            else if ( (LA43_0==Asterisk||LA43_0==LeftCurlyBracket) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0());
                      				
                    }

                    }


                    }
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==Comma) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_34); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0());
                              			
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==Asterisk) ) {
                alt47=1;
            }
            else if ( (LA47_0==LeftCurlyBracket) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_35); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0());
                      		
                    }
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( ((LA46_0>=Intersection && LA46_0<=With)||(LA46_0>=For && LA46_0<=Var)||(LA46_0>=As && LA46_0<=Of)||LA46_0==RULE_IDENTIFIER) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_15);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0());
                              					
                            }

                            }


                            }
                            loop44:
                            do {
                                int alt44=2;
                                int LA44_0 = input.LA(1);

                                if ( (LA44_0==Comma) ) {
                                    int LA44_1 = input.LA(2);

                                    if ( ((LA44_1>=Intersection && LA44_1<=With)||(LA44_1>=For && LA44_1<=Var)||(LA44_1>=As && LA44_1<=Of)||LA44_1==RULE_IDENTIFIER) ) {
                                        alt44=1;
                                    }


                                }


                                switch (alt44) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_27); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0());
                            	      				
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_15);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      							announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1());
                            	      						
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop44;
                                }
                            } while (true);
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==Comma) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      					announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2());
                                      				
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamedImportSpecifier_return retval = new InternalN4JSParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;




        try {
            {
            int alt48=2;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_36);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0());
                      				
                    }

                    }


                    }

                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;




        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_36); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1());
              	
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_9); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_37);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3());
              			
            }

            }


            }
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==PlusSign) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleModuleSpecifier_return retval = new InternalN4JSParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);



        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleFunctionDeclaration_return retval = new InternalN4JSParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( ((LA50_0>=Protected && LA50_0<=Abstract)||LA50_0==External||(LA50_0>=Private && LA50_0<=Project)||LA50_0==Public||LA50_0==Static||LA50_0==Const) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            pushFollow(FOLLOW_6);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_38);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionDeclaration_return retval = new InternalN4JSParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( ((LA52_0>=Protected && LA52_0<=Abstract)||LA52_0==External||(LA52_0>=Private && LA52_0<=Project)||LA52_0==Public||LA52_0==Static||LA52_0==Const) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            pushFollow(FOLLOW_39);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_38);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Semicolon) ) {
                int LA53_1 = input.LA(2);

                if ( (synpred20_InternalN4JSParser()) ) {
                    alt53=1;
                }
            }
            else if ( (LA53_0==EOF) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RULE_EOL) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RULE_ML_COMMENT) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RightCurlyBracket) ) {
                int LA53_5 = input.LA(2);

                if ( (synpred20_InternalN4JSParser()) ) {
                    alt53=1;
                }
            }
            switch (alt53) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;




        try {
            {
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==Async) ) {
                int LA54_1 = input.LA(2);

                if ( ((LA54_1>=Intersection && LA54_1<=With)||(LA54_1>=For && LA54_1<=Var)||(LA54_1>=As && LA54_1<=Of)||LA54_1==LeftSquareBracket||LA54_1==RULE_DOUBLE||LA54_1==RULE_HEX_INT||LA54_1==RULE_OCTAL_INT||LA54_1==RULE_SCIENTIFIC_INT||LA54_1==RULE_IDENTIFIER||LA54_1==RULE_STRING||LA54_1==RULE_NO_LINE_TERMINATOR||LA54_1==RULE_INT) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_40); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0());
                      			
                    }

                    }


                    }

                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSParser.ruleFunctionImpl_return retval = new InternalN4JSParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;




        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              	
            }
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Asterisk) ) {
                alt55=1;
            }
            else if ( ((LA55_0>=Intersection && LA55_0<=Implements)||(LA55_0>=Promisify && LA55_0<=Abstract)||LA55_0==External||(LA55_0>=Private && LA55_0<=Project)||LA55_0==Public||LA55_0==Static||LA55_0==Target||(LA55_0>=Async && LA55_0<=Await)||LA55_0==Union||(LA55_0>=Yield && LA55_0<=This)||LA55_0==From||LA55_0==Type||(LA55_0>=Get && LA55_0<=Let)||(LA55_0>=Out && LA55_0<=Set)||LA55_0==As||LA55_0==Of||LA55_0==LeftParenthesis||LA55_0==LessThanSign||LA55_0==RULE_IDENTIFIER) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionImpl_return retval = new InternalN4JSParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;




        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              	
            }
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Asterisk) ) {
                alt56=1;
            }
            else if ( ((LA56_0>=Intersection && LA56_0<=Implements)||(LA56_0>=Promisify && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Target||(LA56_0>=Async && LA56_0<=Await)||LA56_0==Union||LA56_0==This||LA56_0==From||LA56_0==Type||(LA56_0>=Get && LA56_0<=Let)||(LA56_0>=Out && LA56_0<=Set)||LA56_0==As||LA56_0==Of||LA56_0==LeftParenthesis||LA56_0==LessThanSign||LA56_0==RULE_IDENTIFIER) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm6_FunctionImpl_return retval = new InternalN4JSParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;




        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0());
              	
            }
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( ((LA57_0>=Intersection && LA57_0<=Implements)||(LA57_0>=Promisify && LA57_0<=Abstract)||LA57_0==External||(LA57_0>=Private && LA57_0<=Project)||LA57_0==Public||LA57_0==Static||LA57_0==Target||(LA57_0>=Async && LA57_0<=Await)||LA57_0==Union||(LA57_0>=Yield && LA57_0<=This)||LA57_0==From||LA57_0==Type||(LA57_0>=Get && LA57_0<=Let)||(LA57_0>=Out && LA57_0<=Set)||LA57_0==As||LA57_0==Of||LA57_0==LeftParenthesis||LA57_0==LessThanSign||LA57_0==RULE_IDENTIFIER) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_42); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0());
                      					
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSParser.ruleFunctionHeader_return retval = new InternalN4JSParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LessThanSign) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    pushFollow(FOLLOW_41);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( ((LA59_0>=Intersection && LA59_0<=Implements)||(LA59_0>=Promisify && LA59_0<=Abstract)||LA59_0==External||(LA59_0>=Private && LA59_0<=Project)||LA59_0==Public||LA59_0==Static||LA59_0==Target||(LA59_0>=Async && LA59_0<=Await)||LA59_0==Union||(LA59_0>=Yield && LA59_0<=This)||LA59_0==From||LA59_0==Type||(LA59_0>=Get && LA59_0<=Let)||(LA59_0>=Out && LA59_0<=Set)||LA59_0==As||LA59_0==Of||LA59_0==RULE_IDENTIFIER) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==Colon) && (synpred21_InternalN4JSParser())) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionHeader_return retval = new InternalN4JSParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LessThanSign) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    pushFollow(FOLLOW_41);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=Intersection && LA62_0<=Implements)||(LA62_0>=Promisify && LA62_0<=Abstract)||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Target||(LA62_0>=Async && LA62_0<=Await)||LA62_0==Union||LA62_0==This||LA62_0==From||LA62_0==Type||(LA62_0>=Get && LA62_0<=Let)||(LA62_0>=Out && LA62_0<=Set)||LA62_0==As||LA62_0==Of||LA62_0==RULE_IDENTIFIER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Colon) && (synpred22_InternalN4JSParser())) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionHeader_return retval = new InternalN4JSParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LessThanSign) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    pushFollow(FOLLOW_42);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Async && LA65_0<=Await)||LA65_0==Union||(LA65_0>=Yield && LA65_0<=This)||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||(LA65_0>=Out && LA65_0<=Set)||LA65_0==As||LA65_0==Of||LA65_0==RULE_IDENTIFIER) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_42);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Colon) && (synpred23_InternalN4JSParser())) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionHeader_return retval = new InternalN4JSParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LessThanSign) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    pushFollow(FOLLOW_42);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Async && LA68_0<=Await)||LA68_0==Union||LA68_0==This||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||(LA68_0>=Out && LA68_0<=Set)||LA68_0==As||LA68_0==Of||LA68_0==RULE_IDENTIFIER) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_42);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_43);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Colon) && (synpred24_InternalN4JSParser())) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSParser.ruleFunctionBody_return retval = new InternalN4JSParser.ruleFunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;




        try {
            {
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionBody_return retval = new InternalN4JSParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;




        try {
            {
            int alt71=2;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionBody_return retval = new InternalN4JSParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionBody_return retval = new InternalN4JSParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedFunctionDeclaration_return ruleExportedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedFunctionDeclaration_return retval = new InternalN4JSParser.ruleExportedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionDeclarationParserRuleCall=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.start):null), (FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.stop):null), grammarAccess.getExportedFunctionDeclarationAccess().getFunctionDeclarationParserRuleCall()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_6);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
              			
            }

            }


            }
            loop72:
            do {
                int alt72=2;
                int LA72_0 = input.LA(1);

                if ( ((LA72_0>=Protected && LA72_0<=Abstract)||LA72_0==External||(LA72_0>=Private && LA72_0<=Project)||LA72_0==Public||LA72_0==Static||LA72_0==Const) ) {
                    alt72=1;
                }


                switch (alt72) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop72;
                }
            } while (true);

            pushFollow(FOLLOW_6);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_6);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0());
              			
            }

            }


            }
            loop73:
            do {
                int alt73=2;
                int LA73_0 = input.LA(1);

                if ( ((LA73_0>=Protected && LA73_0<=Abstract)||LA73_0==External||(LA73_0>=Private && LA73_0<=Project)||LA73_0==Public||LA73_0==Static||LA73_0==Const) ) {
                    alt73=1;
                }


                switch (alt73) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop73;
                }
            } while (true);

            pushFollow(FOLLOW_39);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleFunctionExpression_return retval = new InternalN4JSParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;

        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;




        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_45); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0());
              					
            }

            }


            }

            pushFollow(FOLLOW_46);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_41); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2());
              			
            }

            }


            }

            pushFollow(FOLLOW_13);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowExpression_return retval = new InternalN4JSParser.ruleArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt80=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt80=1;
                }
                break;
            case Async:
                {
                int LA80_2 = input.LA(2);

                if ( (LA80_2==EqualsSignGreaterThanSign) ) {
                    alt80=3;
                }
                else if ( (LA80_2==RULE_NO_LINE_TERMINATOR) && (synpred35_InternalN4JSParser())) {
                    alt80=2;
                }
                else if ( (LA80_2==LeftParenthesis) && (synpred35_InternalN4JSParser())) {
                    alt80=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 80, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt80=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 80, 0, input);

                throw nvae;
            }

            switch (alt80) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt75=2;
                    int LA75_0 = input.LA(1);

                    if ( ((LA75_0>=Intersection && LA75_0<=Implements)||(LA75_0>=Promisify && LA75_0<=Abstract)||LA75_0==External||(LA75_0>=Private && LA75_0<=Project)||LA75_0==Public||LA75_0==Static||LA75_0==Target||(LA75_0>=Async && LA75_0<=Await)||LA75_0==Union||(LA75_0>=Yield && LA75_0<=This)||LA75_0==From||LA75_0==This_1||(LA75_0>=Type && LA75_0<=Void)||LA75_0==FullStopFullStopFullStop||(LA75_0>=Get && LA75_0<=Let)||(LA75_0>=Out && LA75_0<=Set)||LA75_0==As||LA75_0==Of||(LA75_0>=QuestionMark && LA75_0<=LeftSquareBracket)||LA75_0==LeftCurlyBracket||LA75_0==Tilde||LA75_0==RULE_IDENTIFIER) ) {
                        alt75=1;
                    }
                    switch (alt75) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop74:
                            do {
                                int alt74=2;
                                int LA74_0 = input.LA(1);

                                if ( (LA74_0==Comma) ) {
                                    alt74=1;
                                }


                                switch (alt74) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop74;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt76=2;
                    int LA76_0 = input.LA(1);

                    if ( (LA76_0==Colon) ) {
                        alt76=1;
                    }
                    switch (alt76) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt78=2;
                    int LA78_0 = input.LA(1);

                    if ( ((LA78_0>=Intersection && LA78_0<=Implements)||(LA78_0>=Promisify && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Target||(LA78_0>=Async && LA78_0<=Await)||LA78_0==Union||(LA78_0>=Yield && LA78_0<=This)||LA78_0==From||LA78_0==This_1||(LA78_0>=Type && LA78_0<=Void)||LA78_0==FullStopFullStopFullStop||(LA78_0>=Get && LA78_0<=Let)||(LA78_0>=Out && LA78_0<=Set)||LA78_0==As||LA78_0==Of||(LA78_0>=QuestionMark && LA78_0<=LeftSquareBracket)||LA78_0==LeftCurlyBracket||LA78_0==Tilde||LA78_0==RULE_IDENTIFIER) ) {
                        alt78=1;
                    }
                    switch (alt78) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop77:
                            do {
                                int alt77=2;
                                int LA77_0 = input.LA(1);

                                if ( (LA77_0==Comma) ) {
                                    alt77=1;
                                }


                                switch (alt77) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop77;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt79=2;
                    int LA79_0 = input.LA(1);

                    if ( (LA79_0==Colon) ) {
                        alt79=1;
                    }
                    switch (alt79) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt81=2;
            alt81 = dfa81.predict(input);
            switch (alt81) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ArrowExpression_return retval = new InternalN4JSParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt88=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt88=1;
                }
                break;
            case Async:
                {
                int LA88_2 = input.LA(2);

                if ( (LA88_2==EqualsSignGreaterThanSign) ) {
                    alt88=3;
                }
                else if ( (LA88_2==RULE_NO_LINE_TERMINATOR) && (synpred39_InternalN4JSParser())) {
                    alt88=2;
                }
                else if ( (LA88_2==LeftParenthesis) && (synpred39_InternalN4JSParser())) {
                    alt88=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 88, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt88=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 88, 0, input);

                throw nvae;
            }

            switch (alt88) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt83=2;
                    int LA83_0 = input.LA(1);

                    if ( ((LA83_0>=Intersection && LA83_0<=Implements)||(LA83_0>=Promisify && LA83_0<=Abstract)||LA83_0==External||(LA83_0>=Private && LA83_0<=Project)||LA83_0==Public||LA83_0==Static||LA83_0==Target||(LA83_0>=Async && LA83_0<=Await)||LA83_0==Union||(LA83_0>=Yield && LA83_0<=This)||LA83_0==From||LA83_0==This_1||(LA83_0>=Type && LA83_0<=Void)||LA83_0==FullStopFullStopFullStop||(LA83_0>=Get && LA83_0<=Let)||(LA83_0>=Out && LA83_0<=Set)||LA83_0==As||LA83_0==Of||(LA83_0>=QuestionMark && LA83_0<=LeftSquareBracket)||LA83_0==LeftCurlyBracket||LA83_0==Tilde||LA83_0==RULE_IDENTIFIER) ) {
                        alt83=1;
                    }
                    switch (alt83) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop82:
                            do {
                                int alt82=2;
                                int LA82_0 = input.LA(1);

                                if ( (LA82_0==Comma) ) {
                                    alt82=1;
                                }


                                switch (alt82) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop82;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( (LA84_0==Colon) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt86=2;
                    int LA86_0 = input.LA(1);

                    if ( ((LA86_0>=Intersection && LA86_0<=Implements)||(LA86_0>=Promisify && LA86_0<=Abstract)||LA86_0==External||(LA86_0>=Private && LA86_0<=Project)||LA86_0==Public||LA86_0==Static||LA86_0==Target||(LA86_0>=Async && LA86_0<=Await)||LA86_0==Union||(LA86_0>=Yield && LA86_0<=This)||LA86_0==From||LA86_0==This_1||(LA86_0>=Type && LA86_0<=Void)||LA86_0==FullStopFullStopFullStop||(LA86_0>=Get && LA86_0<=Let)||(LA86_0>=Out && LA86_0<=Set)||LA86_0==As||LA86_0==Of||(LA86_0>=QuestionMark && LA86_0<=LeftSquareBracket)||LA86_0==LeftCurlyBracket||LA86_0==Tilde||LA86_0==RULE_IDENTIFIER) ) {
                        alt86=1;
                    }
                    switch (alt86) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop85:
                            do {
                                int alt85=2;
                                int LA85_0 = input.LA(1);

                                if ( (LA85_0==Comma) ) {
                                    alt85=1;
                                }


                                switch (alt85) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop85;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt87=2;
                    int LA87_0 = input.LA(1);

                    if ( (LA87_0==Colon) ) {
                        alt87=1;
                    }
                    switch (alt87) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt89=2;
            alt89 = dfa89.predict(input);
            switch (alt89) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ArrowExpression_return retval = new InternalN4JSParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt96=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt96=1;
                }
                break;
            case Async:
                {
                int LA96_2 = input.LA(2);

                if ( (LA96_2==EqualsSignGreaterThanSign) ) {
                    alt96=3;
                }
                else if ( (LA96_2==RULE_NO_LINE_TERMINATOR) && (synpred43_InternalN4JSParser())) {
                    alt96=2;
                }
                else if ( (LA96_2==LeftParenthesis) && (synpred43_InternalN4JSParser())) {
                    alt96=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 96, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt96=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 96, 0, input);

                throw nvae;
            }

            switch (alt96) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt91=2;
                    int LA91_0 = input.LA(1);

                    if ( ((LA91_0>=Intersection && LA91_0<=Implements)||(LA91_0>=Promisify && LA91_0<=Abstract)||LA91_0==External||(LA91_0>=Private && LA91_0<=Project)||LA91_0==Public||LA91_0==Static||LA91_0==Target||(LA91_0>=Async && LA91_0<=Await)||LA91_0==Union||LA91_0==This||LA91_0==From||LA91_0==This_1||(LA91_0>=Type && LA91_0<=Void)||LA91_0==FullStopFullStopFullStop||(LA91_0>=Get && LA91_0<=Let)||(LA91_0>=Out && LA91_0<=Set)||LA91_0==As||LA91_0==Of||(LA91_0>=QuestionMark && LA91_0<=LeftSquareBracket)||LA91_0==LeftCurlyBracket||LA91_0==Tilde||LA91_0==RULE_IDENTIFIER) ) {
                        alt91=1;
                    }
                    switch (alt91) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop90:
                            do {
                                int alt90=2;
                                int LA90_0 = input.LA(1);

                                if ( (LA90_0==Comma) ) {
                                    alt90=1;
                                }


                                switch (alt90) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop90;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( (LA92_0==Colon) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt94=2;
                    int LA94_0 = input.LA(1);

                    if ( ((LA94_0>=Intersection && LA94_0<=Implements)||(LA94_0>=Promisify && LA94_0<=Abstract)||LA94_0==External||(LA94_0>=Private && LA94_0<=Project)||LA94_0==Public||LA94_0==Static||LA94_0==Target||(LA94_0>=Async && LA94_0<=Await)||LA94_0==Union||LA94_0==This||LA94_0==From||LA94_0==This_1||(LA94_0>=Type && LA94_0<=Void)||LA94_0==FullStopFullStopFullStop||(LA94_0>=Get && LA94_0<=Let)||(LA94_0>=Out && LA94_0<=Set)||LA94_0==As||LA94_0==Of||(LA94_0>=QuestionMark && LA94_0<=LeftSquareBracket)||LA94_0==LeftCurlyBracket||LA94_0==Tilde||LA94_0==RULE_IDENTIFIER) ) {
                        alt94=1;
                    }
                    switch (alt94) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop93:
                            do {
                                int alt93=2;
                                int LA93_0 = input.LA(1);

                                if ( (LA93_0==Comma) ) {
                                    alt93=1;
                                }


                                switch (alt93) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop93;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt95=2;
                    int LA95_0 = input.LA(1);

                    if ( (LA95_0==Colon) ) {
                        alt95=1;
                    }
                    switch (alt95) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt97=2;
            alt97 = dfa97.predict(input);
            switch (alt97) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ArrowExpression_return retval = new InternalN4JSParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            int alt104=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt104=1;
                }
                break;
            case Async:
                {
                int LA104_2 = input.LA(2);

                if ( (LA104_2==EqualsSignGreaterThanSign) ) {
                    alt104=3;
                }
                else if ( (LA104_2==RULE_NO_LINE_TERMINATOR) && (synpred47_InternalN4JSParser())) {
                    alt104=2;
                }
                else if ( (LA104_2==LeftParenthesis) && (synpred47_InternalN4JSParser())) {
                    alt104=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 104, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt104=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 104, 0, input);

                throw nvae;
            }

            switch (alt104) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0());
                      					
                    }
                    int alt99=2;
                    int LA99_0 = input.LA(1);

                    if ( ((LA99_0>=Intersection && LA99_0<=Implements)||(LA99_0>=Promisify && LA99_0<=Abstract)||LA99_0==External||(LA99_0>=Private && LA99_0<=Project)||LA99_0==Public||LA99_0==Static||LA99_0==Target||(LA99_0>=Async && LA99_0<=Await)||LA99_0==Union||LA99_0==This||LA99_0==From||LA99_0==This_1||(LA99_0>=Type && LA99_0<=Void)||LA99_0==FullStopFullStopFullStop||(LA99_0>=Get && LA99_0<=Let)||(LA99_0>=Out && LA99_0<=Set)||LA99_0==As||LA99_0==Of||(LA99_0>=QuestionMark && LA99_0<=LeftSquareBracket)||LA99_0==LeftCurlyBracket||LA99_0==Tilde||LA99_0==RULE_IDENTIFIER) ) {
                        alt99=1;
                    }
                    switch (alt99) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0());
                              								
                            }

                            }


                            }
                            loop98:
                            do {
                                int alt98=2;
                                int LA98_0 = input.LA(1);

                                if ( (LA98_0==Comma) ) {
                                    alt98=1;
                                }


                                switch (alt98) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop98;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2());
                      					
                    }
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( (LA100_0==Colon) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_52); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      										announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0());
                      									
                    }

                    }


                    }

                    pushFollow(FOLLOW_53);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2());
                      							
                    }

                    }


                    }
                    int alt102=2;
                    int LA102_0 = input.LA(1);

                    if ( ((LA102_0>=Intersection && LA102_0<=Implements)||(LA102_0>=Promisify && LA102_0<=Abstract)||LA102_0==External||(LA102_0>=Private && LA102_0<=Project)||LA102_0==Public||LA102_0==Static||LA102_0==Target||(LA102_0>=Async && LA102_0<=Await)||LA102_0==Union||LA102_0==This||LA102_0==From||LA102_0==This_1||(LA102_0>=Type && LA102_0<=Void)||LA102_0==FullStopFullStopFullStop||(LA102_0>=Get && LA102_0<=Let)||(LA102_0>=Out && LA102_0<=Set)||LA102_0==As||LA102_0==Of||(LA102_0>=QuestionMark && LA102_0<=LeftSquareBracket)||LA102_0==LeftCurlyBracket||LA102_0==Tilde||LA102_0==RULE_IDENTIFIER) ) {
                        alt102=1;
                    }
                    switch (alt102) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0());
                              								
                            }

                            }


                            }
                            loop101:
                            do {
                                int alt101=2;
                                int LA101_0 = input.LA(1);

                                if ( (LA101_0==Comma) ) {
                                    alt101=1;
                                }


                                switch (alt101) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0());
                            	      							
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      										announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1());
                            	      									
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop101;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_50); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2());
                      					
                    }
                    int alt103=2;
                    int LA103_0 = input.LA(1);

                    if ( (LA103_0==Colon) ) {
                        alt103=1;
                    }
                    switch (alt103) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0());
                              						
                            }
                            {
                            {
                            pushFollow(FOLLOW_51);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              									announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1());
                              								
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_51);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2());
                      						
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1());
              			
            }

            }


            }
            int alt105=2;
            alt105 = dfa105.predict(input);
            switch (alt105) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1());
                      					
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2());
                      			
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.ruleStrictFormalParameters_return retval = new InternalN4JSParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt107=2;
            int LA107_0 = input.LA(1);

            if ( ((LA107_0>=Intersection && LA107_0<=Implements)||(LA107_0>=Promisify && LA107_0<=Abstract)||LA107_0==External||(LA107_0>=Private && LA107_0<=Project)||LA107_0==Public||LA107_0==Static||LA107_0==Target||(LA107_0>=Async && LA107_0<=Await)||LA107_0==Union||(LA107_0>=Yield && LA107_0<=This)||LA107_0==From||LA107_0==This_1||(LA107_0>=Type && LA107_0<=Void)||LA107_0==FullStopFullStopFullStop||(LA107_0>=Get && LA107_0<=Let)||(LA107_0>=Out && LA107_0<=Set)||LA107_0==As||LA107_0==Of||(LA107_0>=QuestionMark && LA107_0<=LeftSquareBracket)||LA107_0==LeftCurlyBracket||LA107_0==Tilde||LA107_0==RULE_IDENTIFIER) ) {
                alt107=1;
            }
            switch (alt107) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                      				
                    }

                    }


                    }
                    loop106:
                    do {
                        int alt106=2;
                        int LA106_0 = input.LA(1);

                        if ( (LA106_0==Comma) ) {
                            alt106=1;
                        }


                        switch (alt106) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_48);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop106;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.norm1_StrictFormalParameters_return retval = new InternalN4JSParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt109=2;
            int LA109_0 = input.LA(1);

            if ( ((LA109_0>=Intersection && LA109_0<=Implements)||(LA109_0>=Promisify && LA109_0<=Abstract)||LA109_0==External||(LA109_0>=Private && LA109_0<=Project)||LA109_0==Public||LA109_0==Static||LA109_0==Target||(LA109_0>=Async && LA109_0<=Await)||LA109_0==Union||LA109_0==This||LA109_0==From||LA109_0==This_1||(LA109_0>=Type && LA109_0<=Void)||LA109_0==FullStopFullStopFullStop||(LA109_0>=Get && LA109_0<=Let)||(LA109_0>=Out && LA109_0<=Set)||LA109_0==As||LA109_0==Of||(LA109_0>=QuestionMark && LA109_0<=LeftSquareBracket)||LA109_0==LeftCurlyBracket||LA109_0==Tilde||LA109_0==RULE_IDENTIFIER) ) {
                alt109=1;
            }
            switch (alt109) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0());
                      				
                    }

                    }


                    }
                    loop108:
                    do {
                        int alt108=2;
                        int LA108_0 = input.LA(1);

                        if ( (LA108_0==Comma) ) {
                            alt108=1;
                        }


                        switch (alt108) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_49); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_48);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop108;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlockMinusBraces() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlockMinusBraces();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlockMinusBraces_return ruleBlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.ruleBlockMinusBraces_return retval = new InternalN4JSParser.ruleBlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            loop110:
            do {
                int alt110=2;
                int LA110_0 = input.LA(1);

                if ( ((LA110_0>=Intersection && LA110_0<=Implements)||(LA110_0>=Promisify && LA110_0<=Function)||(LA110_0>=Private && LA110_0<=Delete)||(LA110_0>=Public && LA110_0<=Break)||(LA110_0>=Class && LA110_0<=This)||(LA110_0>=From && LA110_0<=With)||(LA110_0>=For && LA110_0<=Var)||LA110_0==PlusSignPlusSign||LA110_0==HyphenMinusHyphenMinus||LA110_0==SolidusEqualsSign||(LA110_0>=As && LA110_0<=If)||LA110_0==Of||LA110_0==ExclamationMark||LA110_0==LeftParenthesis||LA110_0==PlusSign||LA110_0==HyphenMinus||LA110_0==Solidus||(LA110_0>=Semicolon && LA110_0<=LessThanSign)||(LA110_0>=CommercialAt && LA110_0<=LeftSquareBracket)||LA110_0==LeftCurlyBracket||LA110_0==Tilde||LA110_0==RULE_DOUBLE||(LA110_0>=RULE_HEX_INT && LA110_0<=RULE_LEGACY_OCTAL_INT)||LA110_0==RULE_SCIENTIFIC_INT||LA110_0==RULE_IDENTIFIER||LA110_0==RULE_STRING||(LA110_0>=RULE_TEMPLATE_HEAD && LA110_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA110_0==RULE_INT) ) {
                    alt110=1;
                }


                switch (alt110) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop110;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.norm1_BlockMinusBraces_return retval = new InternalN4JSParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            loop111:
            do {
                int alt111=2;
                int LA111_0 = input.LA(1);

                if ( ((LA111_0>=Intersection && LA111_0<=Implements)||(LA111_0>=Promisify && LA111_0<=Function)||(LA111_0>=Private && LA111_0<=Delete)||(LA111_0>=Public && LA111_0<=Break)||(LA111_0>=Class && LA111_0<=This)||(LA111_0>=From && LA111_0<=With)||(LA111_0>=For && LA111_0<=Var)||LA111_0==PlusSignPlusSign||LA111_0==HyphenMinusHyphenMinus||LA111_0==SolidusEqualsSign||(LA111_0>=As && LA111_0<=If)||LA111_0==Of||LA111_0==ExclamationMark||LA111_0==LeftParenthesis||LA111_0==PlusSign||LA111_0==HyphenMinus||LA111_0==Solidus||(LA111_0>=Semicolon && LA111_0<=LessThanSign)||(LA111_0>=CommercialAt && LA111_0<=LeftSquareBracket)||LA111_0==LeftCurlyBracket||LA111_0==Tilde||LA111_0==RULE_DOUBLE||(LA111_0>=RULE_HEX_INT && LA111_0<=RULE_LEGACY_OCTAL_INT)||LA111_0==RULE_SCIENTIFIC_INT||LA111_0==RULE_IDENTIFIER||LA111_0==RULE_STRING||(LA111_0>=RULE_TEMPLATE_HEAD && LA111_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA111_0==RULE_INT) ) {
                    alt111=1;
                }


                switch (alt111) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop111;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionDisguisedAsBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionDisguisedAsBlock_return ruleExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.ruleExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm1_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpressionStatement_return ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpressionStatement_return retval = new InternalN4JSParser.ruleAssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpressionStatement_return norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpressionStatement_return retval = new InternalN4JSParser.norm1_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExpression_return retval = new InternalN4JSParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_56);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt114=2;
            int LA114_0 = input.LA(1);

            if ( (LA114_0==Class) ) {
                alt114=1;
            }
            else if ( (LA114_0==Function||LA114_0==Async) ) {
                alt114=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 114, 0, input);

                throw nvae;
            }
            switch (alt114) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      			
                    }
                    int alt112=2;
                    int LA112_0 = input.LA(1);

                    if ( ((LA112_0>=Intersection && LA112_0<=Constructor)||(LA112_0>=Promisify && LA112_0<=Abstract)||LA112_0==External||(LA112_0>=Private && LA112_0<=Project)||LA112_0==Public||LA112_0==Static||LA112_0==Target||(LA112_0>=Async && LA112_0<=Await)||LA112_0==Union||(LA112_0>=Yield && LA112_0<=This)||LA112_0==From||LA112_0==Type||(LA112_0>=Get && LA112_0<=Let)||(LA112_0>=Out && LA112_0<=Set)||LA112_0==As||LA112_0==Of||LA112_0==RULE_IDENTIFIER) ) {
                        alt112=1;
                    }
                    else if ( (LA112_0==Implements) ) {
                        int LA112_2 = input.LA(2);

                        if ( (LA112_2==Implements||LA112_2==Extends||LA112_2==LeftCurlyBracket) ) {
                            alt112=1;
                        }
                    }
                    switch (alt112) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt113=2;
                    int LA113_0 = input.LA(1);

                    if ( (LA113_0==Implements||LA113_0==Extends) ) {
                        alt113=1;
                    }
                    switch (alt113) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_10);
                            ClassExtendsClauseParserRuleCall_1_0_3=ruleClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedExpression_return retval = new InternalN4JSParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_56);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt117=2;
            int LA117_0 = input.LA(1);

            if ( (LA117_0==Class) ) {
                alt117=1;
            }
            else if ( (LA117_0==Function||LA117_0==Async) ) {
                alt117=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 117, 0, input);

                throw nvae;
            }
            switch (alt117) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1());
                      			
                    }
                    int alt115=2;
                    int LA115_0 = input.LA(1);

                    if ( ((LA115_0>=Intersection && LA115_0<=Constructor)||(LA115_0>=Promisify && LA115_0<=Abstract)||LA115_0==External||(LA115_0>=Private && LA115_0<=Project)||LA115_0==Public||LA115_0==Static||LA115_0==Target||(LA115_0>=Async && LA115_0<=Await)||LA115_0==Union||LA115_0==This||LA115_0==From||LA115_0==Type||(LA115_0>=Get && LA115_0<=Let)||(LA115_0>=Out && LA115_0<=Set)||LA115_0==As||LA115_0==Of||LA115_0==RULE_IDENTIFIER) ) {
                        alt115=1;
                    }
                    else if ( (LA115_0==Implements) ) {
                        int LA115_2 = input.LA(2);

                        if ( (LA115_2==Implements||LA115_2==Extends||LA115_2==LeftCurlyBracket) ) {
                            alt115=1;
                        }
                    }
                    switch (alt115) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_58);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt116=2;
                    int LA116_0 = input.LA(1);

                    if ( (LA116_0==Implements||LA116_0==Extends) ) {
                        alt116=1;
                    }
                    switch (alt116) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_58);
                            ClassExtendsClauseParserRuleCall_1_0_3=norm1_ClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_46);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariable_return retval = new InternalN4JSParser.ruleTypeVariable_return();
        retval.start = input.LT(1);

        Token DeclaredCovariantOutKeyword_0_0_0=null;
        Token DeclaredContravariantInKeyword_0_1_0=null;
        Token ExtendsKeyword_2_0=null;
        Token AmpersandKeyword_2_2_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_2_1_0 = null;




        try {
            {
            {
            int alt118=3;
            int LA118_0 = input.LA(1);

            if ( (LA118_0==Out) ) {
                alt118=1;
            }
            else if ( (LA118_0==In) ) {
                alt118=2;
            }
            switch (alt118) {
                case 1 :
                    {
                    {
                    {
                    DeclaredCovariantOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(DeclaredCovariantOutKeyword_0_0_0, grammarAccess.getTypeVariableAccess().getDeclaredCovariantOutKeyword_0_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredContravariantInKeyword_0_1_0=(Token)match(input,In,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(DeclaredContravariantInKeyword_0_1_0, grammarAccess.getTypeVariableAccess().getDeclaredContravariantInKeyword_0_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_59);
            NameIdentifierOrThisParserRuleCall_1_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.start):null), (NameIdentifierOrThisParserRuleCall_1_0!=null?((Token)NameIdentifierOrThisParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_1());
              			
            }

            }


            }
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==Extends) ) {
                alt120=1;
            }
            switch (alt120) {
                case 1 :
                    {
                    ExtendsKeyword_2_0=(Token)match(input,Extends,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_2_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_2_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_61);
                    DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundsAssignment_2_1());
                      				
                    }

                    }


                    }
                    loop119:
                    do {
                        int alt119=2;
                        int LA119_0 = input.LA(1);

                        if ( (LA119_0==Ampersand) ) {
                            alt119=1;
                        }


                        switch (alt119) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_2_2_0=(Token)match(input,Ampersand,FOLLOW_60); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(AmpersandKeyword_2_2_0, grammarAccess.getTypeVariableAccess().getAmpersandKeyword_2_2_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_61);
                    	    DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_2_1_0=ruleParameterizedTypeRefNominal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_2_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_2_1_0.start):null), (DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_2_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_2_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundsAssignment_2_2_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop119;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleFormalParameter_return retval = new InternalN4JSParser.ruleFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_FormalParameter_return retval = new InternalN4JSParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSParser.ruleBindingElementFragment_return retval = new InternalN4JSParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt125=2;
            alt125 = dfa125.predict(input);
            switch (alt125) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop121:
                    do {
                        int alt121=2;
                        int LA121_0 = input.LA(1);

                        if ( (LA121_0==CommercialAt) ) {
                            alt121=1;
                        }


                        switch (alt121) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_63);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop121;
                        }
                    } while (true);
                    int alt122=2;
                    alt122 = dfa122.predict(input);
                    switch (alt122) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_64);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt123=2;
                    int LA123_0 = input.LA(1);

                    if ( (LA123_0==FullStopFullStopFullStop) ) {
                        alt123=1;
                    }
                    switch (alt123) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_65);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3());
                      					
                    }

                    }


                    }
                    int alt124=2;
                    int LA124_0 = input.LA(1);

                    if ( (LA124_0==Colon) ) {
                        alt124=1;
                    }
                    switch (alt124) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_62);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt126=2;
            int LA126_0 = input.LA(1);

            if ( (LA126_0==EqualsSign) ) {
                alt126=1;
            }
            switch (alt126) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElementFragment_return retval = new InternalN4JSParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_2_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_1_1 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_3_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_4 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt131=2;
            alt131 = dfa131.predict(input);
            switch (alt131) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop127:
                    do {
                        int alt127=2;
                        int LA127_0 = input.LA(1);

                        if ( (LA127_0==CommercialAt) ) {
                            alt127=1;
                        }


                        switch (alt127) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_63);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0());
                    	      					
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop127;
                        }
                    } while (true);
                    int alt128=2;
                    alt128 = dfa128.predict(input);
                    switch (alt128) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_64);
                            BogusTypeRefFragmentParserRuleCall_0_1_1=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.start):null), (BogusTypeRefFragmentParserRuleCall_0_1_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_1_1.stop):null), grammarAccess.getBindingElementFragmentAccess().getBogusTypeRefFragmentParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }
                    int alt129=2;
                    int LA129_0 = input.LA(1);

                    if ( (LA129_0==FullStopFullStopFullStop) ) {
                        alt129=1;
                    }
                    switch (alt129) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_2_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(VariadicFullStopFullStopFullStopKeyword_0_1_2_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_2_0());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_65);
                    NameBindingIdentifierParserRuleCall_0_1_3_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_3_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_3());
                      					
                    }

                    }


                    }
                    int alt130=2;
                    int LA130_0 = input.LA(1);

                    if ( (LA130_0==Colon) ) {
                        alt130=1;
                    }
                    switch (alt130) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_62);
                            ColonSepTypeRefParserRuleCall_0_1_4=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.start):null), (ColonSepTypeRefParserRuleCall_0_1_4!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_4.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_4()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;

            }
            int alt132=2;
            int LA132_0 = input.LA(1);

            if ( (LA132_0==EqualsSign) ) {
                alt132=1;
            }
            switch (alt132) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepTypeRef_return retval = new InternalN4JSParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;




        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getDeclaredTypeRefAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleBogusTypeRefFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBogusTypeRefFragment_return ruleBogusTypeRefFragment() throws RecognitionException {
        InternalN4JSParser.ruleBogusTypeRefFragment_return retval = new InternalN4JSParser.ruleBogusTypeRefFragment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBogusTypeRef_return BogusTypeRefBogusTypeRefParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BogusTypeRefBogusTypeRefParserRuleCall_0=ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.start):null), (BogusTypeRefBogusTypeRefParserRuleCall_0!=null?((Token)BogusTypeRefBogusTypeRefParserRuleCall_0.stop):null), grammarAccess.getBogusTypeRefFragmentAccess().getBogusTypeRefAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSParser.ruleBlock_return retval = new InternalN4JSParser.ruleBlock_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              			
            }

            }


            }
            loop133:
            do {
                int alt133=2;
                int LA133_0 = input.LA(1);

                if ( ((LA133_0>=Intersection && LA133_0<=Implements)||(LA133_0>=Promisify && LA133_0<=Function)||(LA133_0>=Private && LA133_0<=Delete)||(LA133_0>=Public && LA133_0<=Break)||(LA133_0>=Class && LA133_0<=This)||(LA133_0>=From && LA133_0<=With)||(LA133_0>=For && LA133_0<=Var)||LA133_0==PlusSignPlusSign||LA133_0==HyphenMinusHyphenMinus||LA133_0==SolidusEqualsSign||(LA133_0>=As && LA133_0<=If)||LA133_0==Of||LA133_0==ExclamationMark||LA133_0==LeftParenthesis||LA133_0==PlusSign||LA133_0==HyphenMinus||LA133_0==Solidus||(LA133_0>=Semicolon && LA133_0<=LessThanSign)||(LA133_0>=CommercialAt && LA133_0<=LeftSquareBracket)||LA133_0==LeftCurlyBracket||LA133_0==Tilde||LA133_0==RULE_DOUBLE||(LA133_0>=RULE_HEX_INT && LA133_0<=RULE_LEGACY_OCTAL_INT)||LA133_0==RULE_SCIENTIFIC_INT||LA133_0==RULE_IDENTIFIER||LA133_0==RULE_STRING||(LA133_0>=RULE_TEMPLATE_HEAD && LA133_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA133_0==RULE_INT) ) {
                    alt133=1;
                }


                switch (alt133) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_55);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop133;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSParser.norm1_Block_return retval = new InternalN4JSParser.norm1_Block_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1());
              			
            }

            }


            }
            loop134:
            do {
                int alt134=2;
                int LA134_0 = input.LA(1);

                if ( ((LA134_0>=Intersection && LA134_0<=Implements)||(LA134_0>=Promisify && LA134_0<=Function)||(LA134_0>=Private && LA134_0<=Delete)||(LA134_0>=Public && LA134_0<=Break)||(LA134_0>=Class && LA134_0<=This)||(LA134_0>=From && LA134_0<=With)||(LA134_0>=For && LA134_0<=Var)||LA134_0==PlusSignPlusSign||LA134_0==HyphenMinusHyphenMinus||LA134_0==SolidusEqualsSign||(LA134_0>=As && LA134_0<=If)||LA134_0==Of||LA134_0==ExclamationMark||LA134_0==LeftParenthesis||LA134_0==PlusSign||LA134_0==HyphenMinus||LA134_0==Solidus||(LA134_0>=Semicolon && LA134_0<=LessThanSign)||(LA134_0>=CommercialAt && LA134_0<=LeftSquareBracket)||LA134_0==LeftCurlyBracket||LA134_0==Tilde||LA134_0==RULE_DOUBLE||(LA134_0>=RULE_HEX_INT && LA134_0<=RULE_LEGACY_OCTAL_INT)||LA134_0==RULE_SCIENTIFIC_INT||LA134_0==RULE_IDENTIFIER||LA134_0==RULE_STRING||(LA134_0>=RULE_TEMPLATE_HEAD && LA134_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA134_0==RULE_INT) ) {
                    alt134=1;
                }


                switch (alt134) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_55);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop134;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSParser.ruleRootStatement_return retval = new InternalN4JSParser.ruleRootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BlockParserRuleCall_0 = null;

        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;




        try {
            {
            int alt135=16;
            alt135 = dfa135.predict(input);
            switch (alt135) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSParser.norm1_RootStatement_return retval = new InternalN4JSParser.norm1_RootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BlockParserRuleCall_0 = null;

        InternalN4JSParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;




        try {
            {
            int alt136=16;
            alt136 = dfa136.predict(input);
            switch (alt136) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSParser.ruleStatement_return retval = new InternalN4JSParser.ruleStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;




        try {
            {
            int alt137=2;
            alt137 = dfa137.predict(input);
            switch (alt137) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSParser.norm1_Statement_return retval = new InternalN4JSParser.norm1_Statement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;




        try {
            {
            int alt138=2;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm1_VariableStatement_return retval = new InternalN4JSParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_30);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_31);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
              			
            }

            }


            }
            loop139:
            do {
                int alt139=2;
                int LA139_0 = input.LA(1);

                if ( (LA139_0==Comma) ) {
                    alt139=1;
                }


                switch (alt139) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_31);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop139;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm3_VariableStatement_return retval = new InternalN4JSParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_30);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_31);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1());
              			
            }

            }


            }
            loop140:
            do {
                int alt140=2;
                int LA140_0 = input.LA(1);

                if ( (LA140_0==Comma) ) {
                    alt140=1;
                }


                switch (alt140) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_31);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop140;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableStatement_return retval = new InternalN4JSParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_4_0=null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;




        try {
            {
            {
            loop141:
            do {
                int alt141=2;
                alt141 = dfa141.predict(input);
                switch (alt141) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_29);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop141;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_30);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }
            {
            {
            pushFollow(FOLLOW_31);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3());
              			
            }

            }


            }
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==Comma) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_31);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt143=2;
            int LA143_0 = input.LA(1);

            if ( (LA143_0==LeftCurlyBracket) && (synpred65_InternalN4JSParser())) {
                alt143=1;
            }
            else if ( (LA143_0==LeftSquareBracket) && (synpred65_InternalN4JSParser())) {
                alt143=1;
            }
            else if ( ((LA143_0>=Intersection && LA143_0<=Implements)||(LA143_0>=Promisify && LA143_0<=Abstract)||LA143_0==External||(LA143_0>=Private && LA143_0<=Project)||LA143_0==Public||LA143_0==Static||LA143_0==Target||(LA143_0>=Async && LA143_0<=Await)||LA143_0==Union||(LA143_0>=Yield && LA143_0<=This)||LA143_0==From||LA143_0==Type||(LA143_0>=Get && LA143_0<=Let)||(LA143_0>=Out && LA143_0<=Set)||LA143_0==As||LA143_0==Of||LA143_0==CommercialAt||LA143_0==RULE_IDENTIFIER) ) {
                alt143=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 143, 0, input);

                throw nvae;
            }
            switch (alt143) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt144=2;
            int LA144_0 = input.LA(1);

            if ( (LA144_0==LeftCurlyBracket) && (synpred66_InternalN4JSParser())) {
                alt144=1;
            }
            else if ( (LA144_0==LeftSquareBracket) && (synpred66_InternalN4JSParser())) {
                alt144=1;
            }
            else if ( ((LA144_0>=Intersection && LA144_0<=Implements)||(LA144_0>=Promisify && LA144_0<=Abstract)||LA144_0==External||(LA144_0>=Private && LA144_0<=Project)||LA144_0==Public||LA144_0==Static||LA144_0==Target||(LA144_0>=Async && LA144_0<=Await)||LA144_0==Union||(LA144_0>=Yield && LA144_0<=This)||LA144_0==From||LA144_0==Type||(LA144_0>=Get && LA144_0<=Let)||(LA144_0>=Out && LA144_0<=Set)||LA144_0==As||LA144_0==Of||LA144_0==CommercialAt||LA144_0==RULE_IDENTIFIER) ) {
                alt144=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 144, 0, input);

                throw nvae;
            }
            switch (alt144) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt145=2;
            int LA145_0 = input.LA(1);

            if ( (LA145_0==LeftCurlyBracket) && (synpred67_InternalN4JSParser())) {
                alt145=1;
            }
            else if ( (LA145_0==LeftSquareBracket) && (synpred67_InternalN4JSParser())) {
                alt145=1;
            }
            else if ( ((LA145_0>=Intersection && LA145_0<=Implements)||(LA145_0>=Promisify && LA145_0<=Abstract)||LA145_0==External||(LA145_0>=Private && LA145_0<=Project)||LA145_0==Public||LA145_0==Static||LA145_0==Target||(LA145_0>=Async && LA145_0<=Await)||LA145_0==Union||LA145_0==This||LA145_0==From||LA145_0==Type||(LA145_0>=Get && LA145_0<=Let)||(LA145_0>=Out && LA145_0<=Set)||LA145_0==As||LA145_0==Of||LA145_0==CommercialAt||LA145_0==RULE_IDENTIFIER) ) {
                alt145=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 145, 0, input);

                throw nvae;
            }
            switch (alt145) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==LeftCurlyBracket) && (synpred68_InternalN4JSParser())) {
                alt146=1;
            }
            else if ( (LA146_0==LeftSquareBracket) && (synpred68_InternalN4JSParser())) {
                alt146=1;
            }
            else if ( ((LA146_0>=Intersection && LA146_0<=Implements)||(LA146_0>=Promisify && LA146_0<=Abstract)||LA146_0==External||(LA146_0>=Private && LA146_0<=Project)||LA146_0==Public||LA146_0==Static||LA146_0==Target||(LA146_0>=Async && LA146_0<=Await)||LA146_0==Union||LA146_0==This||LA146_0==From||LA146_0==Type||(LA146_0>=Get && LA146_0<=Let)||(LA146_0>=Out && LA146_0<=Set)||LA146_0==As||LA146_0==Of||LA146_0==CommercialAt||LA146_0==RULE_IDENTIFIER) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==LeftCurlyBracket) && (synpred69_InternalN4JSParser())) {
                alt147=1;
            }
            else if ( (LA147_0==LeftSquareBracket) && (synpred69_InternalN4JSParser())) {
                alt147=1;
            }
            else if ( ((LA147_0>=Intersection && LA147_0<=Implements)||(LA147_0>=Promisify && LA147_0<=Abstract)||LA147_0==External||(LA147_0>=Private && LA147_0<=Project)||LA147_0==Public||LA147_0==Static||LA147_0==Target||(LA147_0>=Async && LA147_0<=Await)||LA147_0==Union||(LA147_0>=Yield && LA147_0<=This)||LA147_0==From||LA147_0==Type||(LA147_0>=Get && LA147_0<=Let)||(LA147_0>=Out && LA147_0<=Set)||LA147_0==As||LA147_0==Of||LA147_0==CommercialAt||LA147_0==RULE_IDENTIFIER) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==LeftCurlyBracket) && (synpred70_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( (LA148_0==LeftSquareBracket) && (synpred70_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( ((LA148_0>=Intersection && LA148_0<=Implements)||(LA148_0>=Promisify && LA148_0<=Abstract)||LA148_0==External||(LA148_0>=Private && LA148_0<=Project)||LA148_0==Public||LA148_0==Static||LA148_0==Target||(LA148_0>=Async && LA148_0<=Await)||LA148_0==Union||LA148_0==This||LA148_0==From||LA148_0==Type||(LA148_0>=Get && LA148_0<=Let)||(LA148_0>=Out && LA148_0<=Set)||LA148_0==As||LA148_0==Of||LA148_0==CommercialAt||LA148_0==RULE_IDENTIFIER) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableBinding_return retval = new InternalN4JSParser.ruleVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableBinding_return retval = new InternalN4JSParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableBinding_return retval = new InternalN4JSParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableBinding_return retval = new InternalN4JSParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0());
              		
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              					announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1());
              				
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableBinding_return retval = new InternalN4JSParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==EqualsSign) ) {
                alt149=1;
            }
            switch (alt149) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==EqualsSign) ) {
                alt150=1;
            }
            switch (alt150) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableBinding_return retval = new InternalN4JSParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==EqualsSign) ) {
                alt151=1;
            }
            switch (alt151) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==EqualsSign) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclaration_return retval = new InternalN4JSParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclaration_return retval = new InternalN4JSParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclaration_return retval = new InternalN4JSParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return retval = new InternalN4JSParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclaration_return retval = new InternalN4JSParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return retval = new InternalN4JSParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop153:
            do {
                int alt153=2;
                alt153 = dfa153.predict(input);
                switch (alt153) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop153;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==EqualsSign) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop155:
            do {
                int alt155=2;
                alt155 = dfa155.predict(input);
                switch (alt155) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop155;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt156=2;
            int LA156_0 = input.LA(1);

            if ( (LA156_0==EqualsSign) ) {
                alt156=1;
            }
            switch (alt156) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop157:
            do {
                int alt157=2;
                alt157 = dfa157.predict(input);
                switch (alt157) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop157;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt158=2;
            int LA158_0 = input.LA(1);

            if ( (LA158_0==EqualsSign) ) {
                alt158=1;
            }
            switch (alt158) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            loop159:
            do {
                int alt159=2;
                alt159 = dfa159.predict(input);
                switch (alt159) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop159;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_62);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0());
              					
            }

            }


            }


            }
            int alt160=2;
            int LA160_0 = input.LA(1);

            if ( (LA160_0==EqualsSign) ) {
                alt160=1;
            }
            switch (alt160) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop161:
            do {
                int alt161=2;
                alt161 = dfa161.predict(input);
                switch (alt161) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop161;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt162=2;
            int LA162_0 = input.LA(1);

            if ( (LA162_0==Colon) ) {
                alt162=1;
            }
            switch (alt162) {
                case 1 :
                    {
                    pushFollow(FOLLOW_62);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EqualsSign) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop164:
            do {
                int alt164=2;
                alt164 = dfa164.predict(input);
                switch (alt164) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==Colon) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    pushFollow(FOLLOW_62);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==EqualsSign) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop167:
            do {
                int alt167=2;
                alt167 = dfa167.predict(input);
                switch (alt167) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==Colon) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    {
                    pushFollow(FOLLOW_62);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==EqualsSign) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;




        try {
            {
            {
            loop170:
            do {
                int alt170=2;
                alt170 = dfa170.predict(input);
                switch (alt170) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_67);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_65);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              							announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0());
              						
            }

            }


            }
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==Colon) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    pushFollow(FOLLOW_62);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==EqualsSign) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1());
                      					
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt173=2;
            int LA173_0 = input.LA(1);

            if ( (LA173_0==LeftCurlyBracket) && (synpred87_InternalN4JSParser())) {
                alt173=1;
            }
            else if ( (LA173_0==LeftSquareBracket) && (synpred87_InternalN4JSParser())) {
                alt173=1;
            }
            else if ( ((LA173_0>=Intersection && LA173_0<=Implements)||(LA173_0>=Promisify && LA173_0<=Abstract)||LA173_0==External||(LA173_0>=Private && LA173_0<=Project)||LA173_0==Public||LA173_0==Static||LA173_0==Target||(LA173_0>=Async && LA173_0<=Await)||LA173_0==Union||(LA173_0>=Yield && LA173_0<=This)||LA173_0==From||LA173_0==Type||(LA173_0>=Get && LA173_0<=Let)||(LA173_0>=Out && LA173_0<=Set)||LA173_0==As||LA173_0==Of||LA173_0==CommercialAt||LA173_0==RULE_IDENTIFIER) ) {
                alt173=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 173, 0, input);

                throw nvae;
            }
            switch (alt173) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;




        try {
            {
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==LeftCurlyBracket) && (synpred88_InternalN4JSParser())) {
                alt174=1;
            }
            else if ( (LA174_0==LeftSquareBracket) && (synpred88_InternalN4JSParser())) {
                alt174=1;
            }
            else if ( ((LA174_0>=Intersection && LA174_0<=Implements)||(LA174_0>=Promisify && LA174_0<=Abstract)||LA174_0==External||(LA174_0>=Private && LA174_0<=Project)||LA174_0==Public||LA174_0==Static||LA174_0==Target||(LA174_0>=Async && LA174_0<=Await)||LA174_0==Union||LA174_0==This||LA174_0==From||LA174_0==Type||(LA174_0>=Get && LA174_0<=Let)||(LA174_0>=Out && LA174_0<=Set)||LA174_0==As||LA174_0==Of||LA174_0==CommercialAt||LA174_0==RULE_IDENTIFIER) ) {
                alt174=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 174, 0, input);

                throw nvae;
            }
            switch (alt174) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableBinding_return retval = new InternalN4JSParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0());
              			
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSParser.ruleEmptyStatement_return retval = new InternalN4JSParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;



        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleExpressionStatement_return retval = new InternalN4JSParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionStatement_return retval = new InternalN4JSParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSParser.ruleIfStatement_return retval = new InternalN4JSParser.ruleIfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;




        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_70);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
              			
            }

            }


            }
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==Else) ) {
                int LA175_1 = input.LA(2);

                if ( (synpred91_InternalN4JSParser()) ) {
                    alt175=1;
                }
            }
            switch (alt175) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IfStatement_return retval = new InternalN4JSParser.norm1_IfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;




        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_70);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4());
              			
            }

            }


            }
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==Else) ) {
                int LA176_1 = input.LA(2);

                if ( (synpred92_InternalN4JSParser()) ) {
                    alt176=1;
                }
            }
            switch (alt176) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSParser.ruleIterationStatement_return retval = new InternalN4JSParser.ruleIterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;




        try {
            {
            int alt177=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt177=1;
                }
                break;
            case While:
                {
                alt177=2;
                }
                break;
            case For:
                {
                alt177=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }

            switch (alt177) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IterationStatement_return retval = new InternalN4JSParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;




        try {
            {
            int alt178=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt178=1;
                }
                break;
            case While:
                {
                alt178=2;
                }
                break;
            case For:
                {
                alt178=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 178, 0, input);

                throw nvae;
            }

            switch (alt178) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSParser.ruleDoStatement_return retval = new InternalN4JSParser.ruleDoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;




        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_71);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              	
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
              			
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              	
            }
            int alt179=2;
            alt179 = dfa179.predict(input);
            switch (alt179) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSParser.norm1_DoStatement_return retval = new InternalN4JSParser.norm1_DoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;




        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_71);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2());
              	
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4());
              			
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_38); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5());
              	
            }
            int alt180=2;
            int LA180_0 = input.LA(1);

            if ( (LA180_0==Semicolon) ) {
                int LA180_1 = input.LA(2);

                if ( (synpred94_InternalN4JSParser()) ) {
                    alt180=1;
                }
            }
            else if ( (LA180_0==EOF) && (synpred94_InternalN4JSParser())) {
                alt180=1;
            }
            else if ( (LA180_0==RULE_EOL) && (synpred94_InternalN4JSParser())) {
                alt180=1;
            }
            else if ( (LA180_0==RULE_ML_COMMENT) && (synpred94_InternalN4JSParser())) {
                alt180=1;
            }
            else if ( (LA180_0==RightCurlyBracket) ) {
                int LA180_5 = input.LA(2);

                if ( (synpred94_InternalN4JSParser()) ) {
                    alt180=1;
                }
            }
            switch (alt180) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSParser.ruleWhileStatement_return retval = new InternalN4JSParser.ruleWhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WhileStatement_return retval = new InternalN4JSParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSParser.ruleForStatement_return retval = new InternalN4JSParser.ruleForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              	
            }
            int alt198=2;
            alt198 = dfa198.predict(input);
            switch (alt198) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_73);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2());
                      						
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt197=3;
                    alt197 = dfa197.predict(input);
                    switch (alt197) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_30);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt189=2;
                            alt189 = dfa189.predict(input);
                            switch (alt189) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_74);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0());
                                      										
                                    }

                                    }


                                    }
                                    int alt181=2;
                                    int LA181_0 = input.LA(1);

                                    if ( (LA181_0==In) ) {
                                        alt181=1;
                                    }
                                    else if ( (LA181_0==Of) ) {
                                        alt181=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 181, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt181) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt182=2;
                                    alt182 = dfa182.predict(input);
                                    switch (alt182) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              											announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2());
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_76);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt188=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt188=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt188=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt188=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 188, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt188) {
                                        case 1 :
                                            {
                                            {
                                            loop183:
                                            do {
                                                int alt183=2;
                                                int LA183_0 = input.LA(1);

                                                if ( (LA183_0==Comma) ) {
                                                    alt183=1;
                                                }


                                                switch (alt183) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      											announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      										
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_77);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1());
                                            	      												
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop183;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              									
                                            }
                                            int alt184=2;
                                            int LA184_0 = input.LA(1);

                                            if ( ((LA184_0>=Intersection && LA184_0<=Implements)||(LA184_0>=Promisify && LA184_0<=Abstract)||(LA184_0>=External && LA184_0<=Function)||(LA184_0>=Private && LA184_0<=Delete)||LA184_0==Public||LA184_0==Static||(LA184_0>=Target && LA184_0<=Await)||LA184_0==Class||(LA184_0>=False && LA184_0<=Super)||LA184_0==Union||(LA184_0>=Yield && LA184_0<=This)||(LA184_0>=From && LA184_0<=Void)||(LA184_0>=Get && LA184_0<=Set)||LA184_0==PlusSignPlusSign||LA184_0==HyphenMinusHyphenMinus||LA184_0==SolidusEqualsSign||LA184_0==As||LA184_0==Of||LA184_0==ExclamationMark||LA184_0==LeftParenthesis||LA184_0==PlusSign||LA184_0==HyphenMinus||LA184_0==Solidus||LA184_0==LessThanSign||(LA184_0>=CommercialAt && LA184_0<=LeftSquareBracket)||LA184_0==LeftCurlyBracket||LA184_0==Tilde||LA184_0==RULE_DOUBLE||(LA184_0>=RULE_HEX_INT && LA184_0<=RULE_LEGACY_OCTAL_INT)||LA184_0==RULE_SCIENTIFIC_INT||LA184_0==RULE_IDENTIFIER||LA184_0==RULE_STRING||(LA184_0>=RULE_TEMPLATE_HEAD && LA184_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA184_0==RULE_INT) ) {
                                                alt184=1;
                                            }
                                            switch (alt184) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_79);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              									
                                            }
                                            int alt185=2;
                                            int LA185_0 = input.LA(1);

                                            if ( ((LA185_0>=Intersection && LA185_0<=Implements)||(LA185_0>=Promisify && LA185_0<=Abstract)||(LA185_0>=External && LA185_0<=Function)||(LA185_0>=Private && LA185_0<=Delete)||LA185_0==Public||LA185_0==Static||(LA185_0>=Target && LA185_0<=Await)||LA185_0==Class||(LA185_0>=False && LA185_0<=Super)||LA185_0==Union||(LA185_0>=Yield && LA185_0<=This)||(LA185_0>=From && LA185_0<=Void)||(LA185_0>=Get && LA185_0<=Set)||LA185_0==PlusSignPlusSign||LA185_0==HyphenMinusHyphenMinus||LA185_0==SolidusEqualsSign||LA185_0==As||LA185_0==Of||LA185_0==ExclamationMark||LA185_0==LeftParenthesis||LA185_0==PlusSign||LA185_0==HyphenMinus||LA185_0==Solidus||LA185_0==LessThanSign||(LA185_0>=CommercialAt && LA185_0<=LeftSquareBracket)||LA185_0==LeftCurlyBracket||LA185_0==Tilde||LA185_0==RULE_DOUBLE||(LA185_0>=RULE_HEX_INT && LA185_0<=RULE_LEGACY_OCTAL_INT)||LA185_0==RULE_SCIENTIFIC_INT||LA185_0==RULE_IDENTIFIER||LA185_0==RULE_STRING||(LA185_0>=RULE_TEMPLATE_HEAD && LA185_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA185_0==RULE_INT) ) {
                                                alt185=1;
                                            }
                                            switch (alt185) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_68);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt186=2;
                                            int LA186_0 = input.LA(1);

                                            if ( ((LA186_0>=Intersection && LA186_0<=Implements)||(LA186_0>=Promisify && LA186_0<=Abstract)||(LA186_0>=External && LA186_0<=Function)||(LA186_0>=Private && LA186_0<=Delete)||LA186_0==Public||LA186_0==Static||(LA186_0>=Target && LA186_0<=Await)||LA186_0==Class||(LA186_0>=False && LA186_0<=Super)||LA186_0==Union||(LA186_0>=Yield && LA186_0<=This)||(LA186_0>=From && LA186_0<=Void)||(LA186_0>=Get && LA186_0<=Set)||LA186_0==PlusSignPlusSign||LA186_0==HyphenMinusHyphenMinus||LA186_0==SolidusEqualsSign||LA186_0==As||LA186_0==Of||LA186_0==ExclamationMark||LA186_0==LeftParenthesis||LA186_0==PlusSign||LA186_0==HyphenMinus||LA186_0==Solidus||LA186_0==LessThanSign||(LA186_0>=CommercialAt && LA186_0<=LeftSquareBracket)||LA186_0==LeftCurlyBracket||LA186_0==Tilde||LA186_0==RULE_DOUBLE||(LA186_0>=RULE_HEX_INT && LA186_0<=RULE_LEGACY_OCTAL_INT)||LA186_0==RULE_SCIENTIFIC_INT||LA186_0==RULE_IDENTIFIER||LA186_0==RULE_STRING||(LA186_0>=RULE_TEMPLATE_HEAD && LA186_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA186_0==RULE_INT) ) {
                                                alt186=1;
                                            }
                                            switch (alt186) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_68);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt187=2;
                                            int LA187_0 = input.LA(1);

                                            if ( ((LA187_0>=Intersection && LA187_0<=Implements)||(LA187_0>=Promisify && LA187_0<=Abstract)||(LA187_0>=External && LA187_0<=Function)||(LA187_0>=Private && LA187_0<=Delete)||LA187_0==Public||LA187_0==Static||(LA187_0>=Target && LA187_0<=Await)||LA187_0==Class||(LA187_0>=False && LA187_0<=Super)||LA187_0==Union||(LA187_0>=Yield && LA187_0<=This)||(LA187_0>=From && LA187_0<=Void)||(LA187_0>=Get && LA187_0<=Set)||LA187_0==PlusSignPlusSign||LA187_0==HyphenMinusHyphenMinus||LA187_0==SolidusEqualsSign||LA187_0==As||LA187_0==Of||LA187_0==ExclamationMark||LA187_0==LeftParenthesis||LA187_0==PlusSign||LA187_0==HyphenMinus||LA187_0==Solidus||LA187_0==LessThanSign||(LA187_0>=CommercialAt && LA187_0<=LeftSquareBracket)||LA187_0==LeftCurlyBracket||LA187_0==Tilde||LA187_0==RULE_DOUBLE||(LA187_0>=RULE_HEX_INT && LA187_0<=RULE_LEGACY_OCTAL_INT)||LA187_0==RULE_SCIENTIFIC_INT||LA187_0==RULE_IDENTIFIER||LA187_0==RULE_STRING||(LA187_0>=RULE_TEMPLATE_HEAD && LA187_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA187_0==RULE_INT) ) {
                                                alt187=1;
                                            }
                                            switch (alt187) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_68);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_80);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0());
                              							
                            }

                            }


                            }
                            int alt194=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt194=1;
                                }
                                break;
                            case In:
                                {
                                alt194=2;
                                }
                                break;
                            case Of:
                                {
                                alt194=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 194, 0, input);

                                throw nvae;
                            }

                            switch (alt194) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      							
                                    }
                                    int alt190=2;
                                    int LA190_0 = input.LA(1);

                                    if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Abstract)||(LA190_0>=External && LA190_0<=Function)||(LA190_0>=Private && LA190_0<=Delete)||LA190_0==Public||LA190_0==Static||(LA190_0>=Target && LA190_0<=Await)||LA190_0==Class||(LA190_0>=False && LA190_0<=Super)||LA190_0==Union||(LA190_0>=Yield && LA190_0<=This)||(LA190_0>=From && LA190_0<=Void)||(LA190_0>=Get && LA190_0<=Set)||LA190_0==PlusSignPlusSign||LA190_0==HyphenMinusHyphenMinus||LA190_0==SolidusEqualsSign||LA190_0==As||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_HEX_INT && LA190_0<=RULE_LEGACY_OCTAL_INT)||LA190_0==RULE_SCIENTIFIC_INT||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_STRING||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_INT) ) {
                                        alt190=1;
                                    }
                                    switch (alt190) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_79);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      							
                                    }
                                    int alt191=2;
                                    int LA191_0 = input.LA(1);

                                    if ( ((LA191_0>=Intersection && LA191_0<=Implements)||(LA191_0>=Promisify && LA191_0<=Abstract)||(LA191_0>=External && LA191_0<=Function)||(LA191_0>=Private && LA191_0<=Delete)||LA191_0==Public||LA191_0==Static||(LA191_0>=Target && LA191_0<=Await)||LA191_0==Class||(LA191_0>=False && LA191_0<=Super)||LA191_0==Union||(LA191_0>=Yield && LA191_0<=This)||(LA191_0>=From && LA191_0<=Void)||(LA191_0>=Get && LA191_0<=Set)||LA191_0==PlusSignPlusSign||LA191_0==HyphenMinusHyphenMinus||LA191_0==SolidusEqualsSign||LA191_0==As||LA191_0==Of||LA191_0==ExclamationMark||LA191_0==LeftParenthesis||LA191_0==PlusSign||LA191_0==HyphenMinus||LA191_0==Solidus||LA191_0==LessThanSign||(LA191_0>=CommercialAt && LA191_0<=LeftSquareBracket)||LA191_0==LeftCurlyBracket||LA191_0==Tilde||LA191_0==RULE_DOUBLE||(LA191_0>=RULE_HEX_INT && LA191_0<=RULE_LEGACY_OCTAL_INT)||LA191_0==RULE_SCIENTIFIC_INT||LA191_0==RULE_IDENTIFIER||LA191_0==RULE_STRING||(LA191_0>=RULE_TEMPLATE_HEAD && LA191_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA191_0==RULE_INT) ) {
                                        alt191=1;
                                    }
                                    switch (alt191) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_75); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt192=2;
                                    int LA192_0 = input.LA(1);

                                    if ( ((LA192_0>=Intersection && LA192_0<=Implements)||(LA192_0>=Promisify && LA192_0<=Abstract)||(LA192_0>=External && LA192_0<=Function)||(LA192_0>=Private && LA192_0<=Delete)||LA192_0==Public||LA192_0==Static||(LA192_0>=Target && LA192_0<=Await)||LA192_0==Class||(LA192_0>=False && LA192_0<=Super)||LA192_0==Union||(LA192_0>=Yield && LA192_0<=This)||(LA192_0>=From && LA192_0<=Void)||(LA192_0>=Get && LA192_0<=Set)||LA192_0==PlusSignPlusSign||LA192_0==HyphenMinusHyphenMinus||LA192_0==SolidusEqualsSign||LA192_0==As||LA192_0==Of||LA192_0==ExclamationMark||LA192_0==LeftParenthesis||LA192_0==PlusSign||LA192_0==HyphenMinus||LA192_0==Solidus||LA192_0==LessThanSign||(LA192_0>=CommercialAt && LA192_0<=LeftSquareBracket)||LA192_0==LeftCurlyBracket||LA192_0==Tilde||LA192_0==RULE_DOUBLE||(LA192_0>=RULE_HEX_INT && LA192_0<=RULE_LEGACY_OCTAL_INT)||LA192_0==RULE_SCIENTIFIC_INT||LA192_0==RULE_IDENTIFIER||LA192_0==RULE_STRING||(LA192_0>=RULE_TEMPLATE_HEAD && LA192_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA192_0==RULE_INT) ) {
                                        alt192=1;
                                    }
                                    switch (alt192) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_75); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt193=2;
                                    int LA193_0 = input.LA(1);

                                    if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||LA193_0==Public||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||LA193_0==HyphenMinusHyphenMinus||LA193_0==SolidusEqualsSign||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                        alt193=1;
                                    }
                                    switch (alt193) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              					
                            }
                            int alt195=2;
                            int LA195_0 = input.LA(1);

                            if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||LA195_0==Public||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||LA195_0==HyphenMinusHyphenMinus||LA195_0==SolidusEqualsSign||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                alt195=1;
                            }
                            switch (alt195) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_79);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              					
                            }
                            int alt196=2;
                            int LA196_0 = input.LA(1);

                            if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||LA196_0==Public||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||(LA196_0>=Get && LA196_0<=Set)||LA196_0==PlusSignPlusSign||LA196_0==HyphenMinusHyphenMinus||LA196_0==SolidusEqualsSign||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||LA196_0==PlusSign||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_HEX_INT && LA196_0<=RULE_LEGACY_OCTAL_INT)||LA196_0==RULE_SCIENTIFIC_INT||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_STRING||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_INT) ) {
                                alt196=1;
                            }
                            switch (alt196) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_68);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ForStatement_return retval = new InternalN4JSParser.norm1_ForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_72); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2());
              	
            }
            int alt216=2;
            alt216 = dfa216.predict(input);
            switch (alt216) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_73);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0());
                      						
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2());
                      						
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt215=3;
                    alt215 = dfa215.predict(input);
                    switch (alt215) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_30);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt207=2;
                            alt207 = dfa207.predict(input);
                            switch (alt207) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_74);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      											announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0());
                                      										
                                    }

                                    }


                                    }
                                    int alt199=2;
                                    int LA199_0 = input.LA(1);

                                    if ( (LA199_0==In) ) {
                                        alt199=1;
                                    }
                                    else if ( (LA199_0==Of) ) {
                                        alt199=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 199, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt199) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0());
                                              											
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt200=2;
                                    alt200 = dfa200.predict(input);
                                    switch (alt200) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              											announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2());
                                              										
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_76);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt206=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt206=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt206=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt206=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 206, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt206) {
                                        case 1 :
                                            {
                                            {
                                            loop201:
                                            do {
                                                int alt201=2;
                                                int LA201_0 = input.LA(1);

                                                if ( (LA201_0==Comma) ) {
                                                    alt201=1;
                                                }


                                                switch (alt201) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_30); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      											announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0());
                                            	      										
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_77);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {

                                            	      													announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1());
                                            	      												
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop201;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1());
                                              									
                                            }
                                            int alt202=2;
                                            int LA202_0 = input.LA(1);

                                            if ( ((LA202_0>=Intersection && LA202_0<=Implements)||(LA202_0>=Promisify && LA202_0<=Abstract)||(LA202_0>=External && LA202_0<=Function)||(LA202_0>=Private && LA202_0<=Delete)||LA202_0==Public||LA202_0==Static||(LA202_0>=Target && LA202_0<=Await)||LA202_0==Class||(LA202_0>=False && LA202_0<=Super)||LA202_0==Union||(LA202_0>=Yield && LA202_0<=This)||(LA202_0>=From && LA202_0<=Void)||(LA202_0>=Get && LA202_0<=Set)||LA202_0==PlusSignPlusSign||LA202_0==HyphenMinusHyphenMinus||LA202_0==SolidusEqualsSign||LA202_0==As||LA202_0==Of||LA202_0==ExclamationMark||LA202_0==LeftParenthesis||LA202_0==PlusSign||LA202_0==HyphenMinus||LA202_0==Solidus||LA202_0==LessThanSign||(LA202_0>=CommercialAt && LA202_0<=LeftSquareBracket)||LA202_0==LeftCurlyBracket||LA202_0==Tilde||LA202_0==RULE_DOUBLE||(LA202_0>=RULE_HEX_INT && LA202_0<=RULE_LEGACY_OCTAL_INT)||LA202_0==RULE_SCIENTIFIC_INT||LA202_0==RULE_IDENTIFIER||LA202_0==RULE_STRING||(LA202_0>=RULE_TEMPLATE_HEAD && LA202_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA202_0==RULE_INT) ) {
                                                alt202=1;
                                            }
                                            switch (alt202) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_79);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3());
                                              									
                                            }
                                            int alt203=2;
                                            int LA203_0 = input.LA(1);

                                            if ( ((LA203_0>=Intersection && LA203_0<=Implements)||(LA203_0>=Promisify && LA203_0<=Abstract)||(LA203_0>=External && LA203_0<=Function)||(LA203_0>=Private && LA203_0<=Delete)||LA203_0==Public||LA203_0==Static||(LA203_0>=Target && LA203_0<=Await)||LA203_0==Class||(LA203_0>=False && LA203_0<=Super)||LA203_0==Union||(LA203_0>=Yield && LA203_0<=This)||(LA203_0>=From && LA203_0<=Void)||(LA203_0>=Get && LA203_0<=Set)||LA203_0==PlusSignPlusSign||LA203_0==HyphenMinusHyphenMinus||LA203_0==SolidusEqualsSign||LA203_0==As||LA203_0==Of||LA203_0==ExclamationMark||LA203_0==LeftParenthesis||LA203_0==PlusSign||LA203_0==HyphenMinus||LA203_0==Solidus||LA203_0==LessThanSign||(LA203_0>=CommercialAt && LA203_0<=LeftSquareBracket)||LA203_0==LeftCurlyBracket||LA203_0==Tilde||LA203_0==RULE_DOUBLE||(LA203_0>=RULE_HEX_INT && LA203_0<=RULE_LEGACY_OCTAL_INT)||LA203_0==RULE_SCIENTIFIC_INT||LA203_0==RULE_IDENTIFIER||LA203_0==RULE_STRING||(LA203_0>=RULE_TEMPLATE_HEAD && LA203_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA203_0==RULE_INT) ) {
                                                alt203=1;
                                            }
                                            switch (alt203) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_68);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt204=2;
                                            int LA204_0 = input.LA(1);

                                            if ( ((LA204_0>=Intersection && LA204_0<=Implements)||(LA204_0>=Promisify && LA204_0<=Abstract)||(LA204_0>=External && LA204_0<=Function)||(LA204_0>=Private && LA204_0<=Delete)||LA204_0==Public||LA204_0==Static||(LA204_0>=Target && LA204_0<=Await)||LA204_0==Class||(LA204_0>=False && LA204_0<=Super)||LA204_0==Union||(LA204_0>=Yield && LA204_0<=This)||(LA204_0>=From && LA204_0<=Void)||(LA204_0>=Get && LA204_0<=Set)||LA204_0==PlusSignPlusSign||LA204_0==HyphenMinusHyphenMinus||LA204_0==SolidusEqualsSign||LA204_0==As||LA204_0==Of||LA204_0==ExclamationMark||LA204_0==LeftParenthesis||LA204_0==PlusSign||LA204_0==HyphenMinus||LA204_0==Solidus||LA204_0==LessThanSign||(LA204_0>=CommercialAt && LA204_0<=LeftSquareBracket)||LA204_0==LeftCurlyBracket||LA204_0==Tilde||LA204_0==RULE_DOUBLE||(LA204_0>=RULE_HEX_INT && LA204_0<=RULE_LEGACY_OCTAL_INT)||LA204_0==RULE_SCIENTIFIC_INT||LA204_0==RULE_IDENTIFIER||LA204_0==RULE_STRING||(LA204_0>=RULE_TEMPLATE_HEAD && LA204_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA204_0==RULE_INT) ) {
                                                alt204=1;
                                            }
                                            switch (alt204) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_68);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_75); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              												announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0());
                                              											
                                            }

                                            }


                                            }
                                            int alt205=2;
                                            int LA205_0 = input.LA(1);

                                            if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||LA205_0==Public||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||(LA205_0>=Get && LA205_0<=Set)||LA205_0==PlusSignPlusSign||LA205_0==HyphenMinusHyphenMinus||LA205_0==SolidusEqualsSign||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||LA205_0==PlusSign||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_HEX_INT && LA205_0<=RULE_LEGACY_OCTAL_INT)||LA205_0==RULE_SCIENTIFIC_INT||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_STRING||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_INT) ) {
                                                alt205=1;
                                            }
                                            switch (alt205) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_68);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {

                                                      												announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1());
                                                      											
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_80);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0());
                              							
                            }

                            }


                            }
                            int alt212=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt212=1;
                                }
                                break;
                            case In:
                                {
                                alt212=2;
                                }
                                break;
                            case Of:
                                {
                                alt212=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 212, 0, input);

                                throw nvae;
                            }

                            switch (alt212) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0());
                                      							
                                    }
                                    int alt208=2;
                                    int LA208_0 = input.LA(1);

                                    if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||(LA208_0>=External && LA208_0<=Function)||(LA208_0>=Private && LA208_0<=Delete)||LA208_0==Public||LA208_0==Static||(LA208_0>=Target && LA208_0<=Await)||LA208_0==Class||(LA208_0>=False && LA208_0<=Super)||LA208_0==Union||(LA208_0>=Yield && LA208_0<=This)||(LA208_0>=From && LA208_0<=Void)||(LA208_0>=Get && LA208_0<=Set)||LA208_0==PlusSignPlusSign||LA208_0==HyphenMinusHyphenMinus||LA208_0==SolidusEqualsSign||LA208_0==As||LA208_0==Of||LA208_0==ExclamationMark||LA208_0==LeftParenthesis||LA208_0==PlusSign||LA208_0==HyphenMinus||LA208_0==Solidus||LA208_0==LessThanSign||(LA208_0>=CommercialAt && LA208_0<=LeftSquareBracket)||LA208_0==LeftCurlyBracket||LA208_0==Tilde||LA208_0==RULE_DOUBLE||(LA208_0>=RULE_HEX_INT && LA208_0<=RULE_LEGACY_OCTAL_INT)||LA208_0==RULE_SCIENTIFIC_INT||LA208_0==RULE_IDENTIFIER||LA208_0==RULE_STRING||(LA208_0>=RULE_TEMPLATE_HEAD && LA208_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA208_0==RULE_INT) ) {
                                        alt208=1;
                                    }
                                    switch (alt208) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_79);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2());
                                      							
                                    }
                                    int alt209=2;
                                    int LA209_0 = input.LA(1);

                                    if ( ((LA209_0>=Intersection && LA209_0<=Implements)||(LA209_0>=Promisify && LA209_0<=Abstract)||(LA209_0>=External && LA209_0<=Function)||(LA209_0>=Private && LA209_0<=Delete)||LA209_0==Public||LA209_0==Static||(LA209_0>=Target && LA209_0<=Await)||LA209_0==Class||(LA209_0>=False && LA209_0<=Super)||LA209_0==Union||(LA209_0>=Yield && LA209_0<=This)||(LA209_0>=From && LA209_0<=Void)||(LA209_0>=Get && LA209_0<=Set)||LA209_0==PlusSignPlusSign||LA209_0==HyphenMinusHyphenMinus||LA209_0==SolidusEqualsSign||LA209_0==As||LA209_0==Of||LA209_0==ExclamationMark||LA209_0==LeftParenthesis||LA209_0==PlusSign||LA209_0==HyphenMinus||LA209_0==Solidus||LA209_0==LessThanSign||(LA209_0>=CommercialAt && LA209_0<=LeftSquareBracket)||LA209_0==LeftCurlyBracket||LA209_0==Tilde||LA209_0==RULE_DOUBLE||(LA209_0>=RULE_HEX_INT && LA209_0<=RULE_LEGACY_OCTAL_INT)||LA209_0==RULE_SCIENTIFIC_INT||LA209_0==RULE_IDENTIFIER||LA209_0==RULE_STRING||(LA209_0>=RULE_TEMPLATE_HEAD && LA209_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA209_0==RULE_INT) ) {
                                        alt209=1;
                                    }
                                    switch (alt209) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_75); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt210=2;
                                    int LA210_0 = input.LA(1);

                                    if ( ((LA210_0>=Intersection && LA210_0<=Implements)||(LA210_0>=Promisify && LA210_0<=Abstract)||(LA210_0>=External && LA210_0<=Function)||(LA210_0>=Private && LA210_0<=Delete)||LA210_0==Public||LA210_0==Static||(LA210_0>=Target && LA210_0<=Await)||LA210_0==Class||(LA210_0>=False && LA210_0<=Super)||LA210_0==Union||(LA210_0>=Yield && LA210_0<=This)||(LA210_0>=From && LA210_0<=Void)||(LA210_0>=Get && LA210_0<=Set)||LA210_0==PlusSignPlusSign||LA210_0==HyphenMinusHyphenMinus||LA210_0==SolidusEqualsSign||LA210_0==As||LA210_0==Of||LA210_0==ExclamationMark||LA210_0==LeftParenthesis||LA210_0==PlusSign||LA210_0==HyphenMinus||LA210_0==Solidus||LA210_0==LessThanSign||(LA210_0>=CommercialAt && LA210_0<=LeftSquareBracket)||LA210_0==LeftCurlyBracket||LA210_0==Tilde||LA210_0==RULE_DOUBLE||(LA210_0>=RULE_HEX_INT && LA210_0<=RULE_LEGACY_OCTAL_INT)||LA210_0==RULE_SCIENTIFIC_INT||LA210_0==RULE_IDENTIFIER||LA210_0==RULE_STRING||(LA210_0>=RULE_TEMPLATE_HEAD && LA210_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA210_0==RULE_INT) ) {
                                        alt210=1;
                                    }
                                    switch (alt210) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_75); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      										announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0());
                                      									
                                    }

                                    }


                                    }
                                    int alt211=2;
                                    int LA211_0 = input.LA(1);

                                    if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||LA211_0==Public||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||LA211_0==HyphenMinusHyphenMinus||LA211_0==SolidusEqualsSign||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                                        alt211=1;
                                    }
                                    switch (alt211) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_68);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              										announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1());
                                              									
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_78); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0());
                              					
                            }
                            int alt213=2;
                            int LA213_0 = input.LA(1);

                            if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||LA213_0==Public||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||(LA213_0>=Get && LA213_0<=Set)||LA213_0==PlusSignPlusSign||LA213_0==HyphenMinusHyphenMinus||LA213_0==SolidusEqualsSign||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||LA213_0==PlusSign||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                                alt213=1;
                            }
                            switch (alt213) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_79);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_75); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2());
                              					
                            }
                            int alt214=2;
                            int LA214_0 = input.LA(1);

                            if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Abstract)||(LA214_0>=External && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||LA214_0==Public||LA214_0==Static||(LA214_0>=Target && LA214_0<=Await)||LA214_0==Class||(LA214_0>=False && LA214_0<=Super)||LA214_0==Union||(LA214_0>=Yield && LA214_0<=This)||(LA214_0>=From && LA214_0<=Void)||(LA214_0>=Get && LA214_0<=Set)||LA214_0==PlusSignPlusSign||LA214_0==HyphenMinusHyphenMinus||LA214_0==SolidusEqualsSign||LA214_0==As||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||LA214_0==PlusSign||LA214_0==HyphenMinus||LA214_0==Solidus||LA214_0==LessThanSign||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_HEX_INT && LA214_0<=RULE_LEGACY_OCTAL_INT)||LA214_0==RULE_SCIENTIFIC_INT||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_STRING||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_INT) ) {
                                alt214=1;
                            }
                            switch (alt214) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_68);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {

                                      								announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3());
                                      							
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleLetIdentifierRef_return retval = new InternalN4JSParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleLetAsIdentifier_return retval = new InternalN4JSParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);

        Token LetKeyword=null;



        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSParser.ruleContinueStatement_return retval = new InternalN4JSParser.ruleContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              	
            }
            int alt217=2;
            int LA217_0 = input.LA(1);

            if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||LA217_0==External||(LA217_0>=Private && LA217_0<=Project)||LA217_0==Public||LA217_0==Static||LA217_0==Target||(LA217_0>=Async && LA217_0<=Await)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||LA217_0==From||LA217_0==Type||(LA217_0>=Get && LA217_0<=Let)||(LA217_0>=Out && LA217_0<=Set)||LA217_0==As||LA217_0==Of||LA217_0==RULE_IDENTIFIER) ) {
                alt217=1;
            }
            switch (alt217) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ContinueStatement_return retval = new InternalN4JSParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1());
              	
            }
            int alt218=2;
            int LA218_0 = input.LA(1);

            if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Abstract)||LA218_0==External||(LA218_0>=Private && LA218_0<=Project)||LA218_0==Public||LA218_0==Static||LA218_0==Target||(LA218_0>=Async && LA218_0<=Await)||LA218_0==Union||LA218_0==This||LA218_0==From||LA218_0==Type||(LA218_0>=Get && LA218_0<=Let)||(LA218_0>=Out && LA218_0<=Set)||LA218_0==As||LA218_0==Of||LA218_0==RULE_IDENTIFIER) ) {
                alt218=1;
            }
            switch (alt218) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSParser.ruleBreakStatement_return retval = new InternalN4JSParser.ruleBreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              	
            }
            int alt219=2;
            int LA219_0 = input.LA(1);

            if ( ((LA219_0>=Intersection && LA219_0<=Implements)||(LA219_0>=Promisify && LA219_0<=Abstract)||LA219_0==External||(LA219_0>=Private && LA219_0<=Project)||LA219_0==Public||LA219_0==Static||LA219_0==Target||(LA219_0>=Async && LA219_0<=Await)||LA219_0==Union||(LA219_0>=Yield && LA219_0<=This)||LA219_0==From||LA219_0==Type||(LA219_0>=Get && LA219_0<=Let)||(LA219_0>=Out && LA219_0<=Set)||LA219_0==As||LA219_0==Of||LA219_0==RULE_IDENTIFIER) ) {
                alt219=1;
            }
            switch (alt219) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSParser.norm1_BreakStatement_return retval = new InternalN4JSParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_81); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1());
              	
            }
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||LA220_0==External||(LA220_0>=Private && LA220_0<=Project)||LA220_0==Public||LA220_0==Static||LA220_0==Target||(LA220_0>=Async && LA220_0<=Await)||LA220_0==Union||LA220_0==This||LA220_0==From||LA220_0==Type||(LA220_0>=Get && LA220_0<=Let)||(LA220_0>=Out && LA220_0<=Set)||LA220_0==As||LA220_0==Of||LA220_0==RULE_IDENTIFIER) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSParser.ruleReturnStatement_return retval = new InternalN4JSParser.ruleReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_82); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              	
            }
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||(LA221_0>=External && LA221_0<=Function)||(LA221_0>=Private && LA221_0<=Delete)||LA221_0==Public||LA221_0==Static||(LA221_0>=Target && LA221_0<=Await)||LA221_0==Class||(LA221_0>=False && LA221_0<=Super)||LA221_0==Union||(LA221_0>=Yield && LA221_0<=This)||(LA221_0>=From && LA221_0<=Void)||(LA221_0>=Get && LA221_0<=Set)||LA221_0==PlusSignPlusSign||LA221_0==HyphenMinusHyphenMinus||LA221_0==SolidusEqualsSign||LA221_0==As||LA221_0==Of||LA221_0==ExclamationMark||LA221_0==LeftParenthesis||LA221_0==PlusSign||LA221_0==HyphenMinus||LA221_0==Solidus||LA221_0==LessThanSign||(LA221_0>=CommercialAt && LA221_0<=LeftSquareBracket)||LA221_0==LeftCurlyBracket||LA221_0==Tilde||LA221_0==RULE_DOUBLE||(LA221_0>=RULE_HEX_INT && LA221_0<=RULE_LEGACY_OCTAL_INT)||LA221_0==RULE_SCIENTIFIC_INT||LA221_0==RULE_IDENTIFIER||LA221_0==RULE_STRING||(LA221_0>=RULE_TEMPLATE_HEAD && LA221_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA221_0==RULE_INT) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ReturnStatement_return retval = new InternalN4JSParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;




        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_82); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1());
              	
            }
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||(LA222_0>=External && LA222_0<=Function)||(LA222_0>=Private && LA222_0<=Delete)||LA222_0==Public||LA222_0==Static||(LA222_0>=Target && LA222_0<=Await)||LA222_0==Class||(LA222_0>=False && LA222_0<=Super)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||(LA222_0>=From && LA222_0<=Void)||(LA222_0>=Get && LA222_0<=Set)||LA222_0==PlusSignPlusSign||LA222_0==HyphenMinusHyphenMinus||LA222_0==SolidusEqualsSign||LA222_0==As||LA222_0==Of||LA222_0==ExclamationMark||LA222_0==LeftParenthesis||LA222_0==PlusSign||LA222_0==HyphenMinus||LA222_0==Solidus||LA222_0==LessThanSign||(LA222_0>=CommercialAt && LA222_0<=LeftSquareBracket)||LA222_0==LeftCurlyBracket||LA222_0==Tilde||LA222_0==RULE_DOUBLE||(LA222_0>=RULE_HEX_INT && LA222_0<=RULE_LEGACY_OCTAL_INT)||LA222_0==RULE_SCIENTIFIC_INT||LA222_0==RULE_IDENTIFIER||LA222_0==RULE_STRING||(LA222_0>=RULE_TEMPLATE_HEAD && LA222_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA222_0==RULE_INT) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSParser.ruleWithStatement_return retval = new InternalN4JSParser.ruleWithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WithStatement_return retval = new InternalN4JSParser.norm1_WithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;




        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSParser.ruleSwitchStatement_return retval = new InternalN4JSParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;




        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_83); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              	
            }
            loop223:
            do {
                int alt223=2;
                int LA223_0 = input.LA(1);

                if ( (LA223_0==Case) ) {
                    alt223=1;
                }


                switch (alt223) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_83);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop223;
                }
            } while (true);
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( (LA225_0==Default) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_84);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                      				
                    }

                    }


                    }
                    loop224:
                    do {
                        int alt224=2;
                        int LA224_0 = input.LA(1);

                        if ( (LA224_0==Case) ) {
                            alt224=1;
                        }


                        switch (alt224) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_84);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	      				
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop224;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSParser.norm1_SwitchStatement_return retval = new InternalN4JSParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;




        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0());
              	
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3());
              	
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_83); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4());
              	
            }
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==Case) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_83);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==Default) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_84);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0());
                      				
                    }

                    }


                    }
                    loop227:
                    do {
                        int alt227=2;
                        int LA227_0 = input.LA(1);

                        if ( (LA227_0==Case) ) {
                            alt227=1;
                        }


                        switch (alt227) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_84);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1());
                    	      				
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop227;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSParser.ruleCaseClause_return retval = new InternalN4JSParser.ruleCaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_85);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              	
            }
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( ((LA229_0>=Intersection && LA229_0<=Implements)||(LA229_0>=Promisify && LA229_0<=Function)||(LA229_0>=Private && LA229_0<=Delete)||(LA229_0>=Public && LA229_0<=Break)||(LA229_0>=Class && LA229_0<=This)||(LA229_0>=From && LA229_0<=With)||(LA229_0>=For && LA229_0<=Var)||LA229_0==PlusSignPlusSign||LA229_0==HyphenMinusHyphenMinus||LA229_0==SolidusEqualsSign||(LA229_0>=As && LA229_0<=If)||LA229_0==Of||LA229_0==ExclamationMark||LA229_0==LeftParenthesis||LA229_0==PlusSign||LA229_0==HyphenMinus||LA229_0==Solidus||(LA229_0>=Semicolon && LA229_0<=LessThanSign)||(LA229_0>=CommercialAt && LA229_0<=LeftSquareBracket)||LA229_0==LeftCurlyBracket||LA229_0==Tilde||LA229_0==RULE_DOUBLE||(LA229_0>=RULE_HEX_INT && LA229_0<=RULE_LEGACY_OCTAL_INT)||LA229_0==RULE_SCIENTIFIC_INT||LA229_0==RULE_IDENTIFIER||LA229_0==RULE_STRING||(LA229_0>=RULE_TEMPLATE_HEAD && LA229_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA229_0==RULE_INT) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSParser.norm1_CaseClause_return retval = new InternalN4JSParser.norm1_CaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_85);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2());
              	
            }
            loop230:
            do {
                int alt230=2;
                int LA230_0 = input.LA(1);

                if ( ((LA230_0>=Intersection && LA230_0<=Implements)||(LA230_0>=Promisify && LA230_0<=Function)||(LA230_0>=Private && LA230_0<=Delete)||(LA230_0>=Public && LA230_0<=Break)||(LA230_0>=Class && LA230_0<=This)||(LA230_0>=From && LA230_0<=With)||(LA230_0>=For && LA230_0<=Var)||LA230_0==PlusSignPlusSign||LA230_0==HyphenMinusHyphenMinus||LA230_0==SolidusEqualsSign||(LA230_0>=As && LA230_0<=If)||LA230_0==Of||LA230_0==ExclamationMark||LA230_0==LeftParenthesis||LA230_0==PlusSign||LA230_0==HyphenMinus||LA230_0==Solidus||(LA230_0>=Semicolon && LA230_0<=LessThanSign)||(LA230_0>=CommercialAt && LA230_0<=LeftSquareBracket)||LA230_0==LeftCurlyBracket||LA230_0==Tilde||LA230_0==RULE_DOUBLE||(LA230_0>=RULE_HEX_INT && LA230_0<=RULE_LEGACY_OCTAL_INT)||LA230_0==RULE_SCIENTIFIC_INT||LA230_0==RULE_IDENTIFIER||LA230_0==RULE_STRING||(LA230_0>=RULE_TEMPLATE_HEAD && LA230_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA230_0==RULE_INT) ) {
                    alt230=1;
                }


                switch (alt230) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop230;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSParser.ruleDefaultClause_return retval = new InternalN4JSParser.ruleDefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_85); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              	
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              	
            }
            loop231:
            do {
                int alt231=2;
                int LA231_0 = input.LA(1);

                if ( ((LA231_0>=Intersection && LA231_0<=Implements)||(LA231_0>=Promisify && LA231_0<=Function)||(LA231_0>=Private && LA231_0<=Delete)||(LA231_0>=Public && LA231_0<=Break)||(LA231_0>=Class && LA231_0<=This)||(LA231_0>=From && LA231_0<=With)||(LA231_0>=For && LA231_0<=Var)||LA231_0==PlusSignPlusSign||LA231_0==HyphenMinusHyphenMinus||LA231_0==SolidusEqualsSign||(LA231_0>=As && LA231_0<=If)||LA231_0==Of||LA231_0==ExclamationMark||LA231_0==LeftParenthesis||LA231_0==PlusSign||LA231_0==HyphenMinus||LA231_0==Solidus||(LA231_0>=Semicolon && LA231_0<=LessThanSign)||(LA231_0>=CommercialAt && LA231_0<=LeftSquareBracket)||LA231_0==LeftCurlyBracket||LA231_0==Tilde||LA231_0==RULE_DOUBLE||(LA231_0>=RULE_HEX_INT && LA231_0<=RULE_LEGACY_OCTAL_INT)||LA231_0==RULE_SCIENTIFIC_INT||LA231_0==RULE_IDENTIFIER||LA231_0==RULE_STRING||(LA231_0>=RULE_TEMPLATE_HEAD && LA231_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA231_0==RULE_INT) ) {
                    alt231=1;
                }


                switch (alt231) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop231;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSParser.norm1_DefaultClause_return retval = new InternalN4JSParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;




        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_85); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1());
              	
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2());
              	
            }
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( ((LA232_0>=Intersection && LA232_0<=Implements)||(LA232_0>=Promisify && LA232_0<=Function)||(LA232_0>=Private && LA232_0<=Delete)||(LA232_0>=Public && LA232_0<=Break)||(LA232_0>=Class && LA232_0<=This)||(LA232_0>=From && LA232_0<=With)||(LA232_0>=For && LA232_0<=Var)||LA232_0==PlusSignPlusSign||LA232_0==HyphenMinusHyphenMinus||LA232_0==SolidusEqualsSign||(LA232_0>=As && LA232_0<=If)||LA232_0==Of||LA232_0==ExclamationMark||LA232_0==LeftParenthesis||LA232_0==PlusSign||LA232_0==HyphenMinus||LA232_0==Solidus||(LA232_0>=Semicolon && LA232_0<=LessThanSign)||(LA232_0>=CommercialAt && LA232_0<=LeftSquareBracket)||LA232_0==LeftCurlyBracket||LA232_0==Tilde||LA232_0==RULE_DOUBLE||(LA232_0>=RULE_HEX_INT && LA232_0<=RULE_LEGACY_OCTAL_INT)||LA232_0==RULE_SCIENTIFIC_INT||LA232_0==RULE_IDENTIFIER||LA232_0==RULE_STRING||(LA232_0>=RULE_TEMPLATE_HEAD && LA232_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA232_0==RULE_INT) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSParser.ruleLabelledStatement_return retval = new InternalN4JSParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_85);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
              					
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSParser.norm1_LabelledStatement_return retval = new InternalN4JSParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_85);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0());
              					
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_69); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSParser.ruleThrowStatement_return retval = new InternalN4JSParser.ruleThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;




        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ThrowStatement_return retval = new InternalN4JSParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;




        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		promoteEOL();
              		announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_20);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSParser.ruleTryStatement_return retval = new InternalN4JSParser.ruleTryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;




        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_86);
            BlockBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
              			
            }

            }


            }
            int alt234=2;
            int LA234_0 = input.LA(1);

            if ( (LA234_0==Catch) ) {
                alt234=1;
            }
            else if ( (LA234_0==Finally) ) {
                alt234=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 234, 0, input);

                throw nvae;
            }
            switch (alt234) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_87);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                      					
                    }

                    }


                    }
                    int alt233=2;
                    int LA233_0 = input.LA(1);

                    if ( (LA233_0==Finally) ) {
                        alt233=1;
                    }
                    switch (alt233) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSParser.norm1_TryStatement_return retval = new InternalN4JSParser.norm1_TryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;




        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_86);
            BlockBlockParserRuleCall_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1());
              			
            }

            }


            }
            int alt236=2;
            int LA236_0 = input.LA(1);

            if ( (LA236_0==Catch) ) {
                alt236=1;
            }
            else if ( (LA236_0==Finally) ) {
                alt236=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 236, 0, input);

                throw nvae;
            }
            switch (alt236) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_87);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0());
                      					
                    }

                    }


                    }
                    int alt235=2;
                    int LA235_0 = input.LA(1);

                    if ( (LA235_0==Finally) ) {
                        alt235=1;
                    }
                    switch (alt235) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSParser.ruleCatchBlock_return retval = new InternalN4JSParser.ruleCatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSParser.norm1_CatchBlock_return retval = new InternalN4JSParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;




        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1());
              	
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3());
              			
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSParser.ruleCatchVariable_return retval = new InternalN4JSParser.ruleCatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;




        try {
            {
            int alt238=3;
            alt238 = dfa238.predict(input);
            switch (alt238) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_85);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                      					
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt237=2;
                    alt237 = dfa237.predict(input);
                    switch (alt237) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_9);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSParser.norm1_CatchVariable_return retval = new InternalN4JSParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_1_0 = null;




        try {
            {
            int alt240=3;
            alt240 = dfa240.predict(input);
            switch (alt240) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_85);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0());
                      					
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt239=2;
                    alt239 = dfa239.predict(input);
                    switch (alt239) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_9);
                            BogusTypeRefFragmentParserRuleCall_2_0=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.start):null), (BogusTypeRefFragmentParserRuleCall_2_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getBogusTypeRefFragmentParserRuleCall_2_0()); 
                            }

                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.start):null), (NameBindingIdentifierParserRuleCall_2_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_1_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSParser.ruleFinallyBlock_return retval = new InternalN4JSParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSParser.norm1_FinallyBlock_return retval = new InternalN4JSParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSParser.ruleDebuggerStatement_return retval = new InternalN4JSParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);

        Token DebuggerKeyword_1=null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;




        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_20); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1());
              	
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryExpression_return retval = new InternalN4JSParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSParser.ruleParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;




        try {
            {
            int alt241=13;
            alt241 = dfa241.predict(input);
            switch (alt241) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PrimaryExpression_return retval = new InternalN4JSParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;




        try {
            {
            int alt242=13;
            alt242 = dfa242.predict(input);
            switch (alt242) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSParser.ruleParenExpression_return retval = new InternalN4JSParser.ruleParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParenExpression_return retval = new InternalN4JSParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierRef_return retval = new InternalN4JSParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSParser.norm1_IdentifierRef_return retval = new InternalN4JSParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSParser.ruleSuperLiteral_return retval = new InternalN4JSParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);

        Token SuperKeyword_1=null;



        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSParser.ruleThisLiteral_return retval = new InternalN4JSParser.ruleThisLiteral_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;



        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSParser.ruleArrayLiteral_return retval = new InternalN4JSParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop243:
            do {
                int alt243=2;
                int LA243_0 = input.LA(1);

                if ( (LA243_0==Comma) ) {
                    alt243=1;
                }


                switch (alt243) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_89);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop243;
                }
            } while (true);
            int alt248=2;
            int LA248_0 = input.LA(1);

            if ( ((LA248_0>=Intersection && LA248_0<=Implements)||(LA248_0>=Promisify && LA248_0<=Abstract)||(LA248_0>=External && LA248_0<=Function)||(LA248_0>=Private && LA248_0<=Delete)||LA248_0==Public||LA248_0==Static||(LA248_0>=Target && LA248_0<=Await)||LA248_0==Class||(LA248_0>=False && LA248_0<=Super)||LA248_0==Union||(LA248_0>=Yield && LA248_0<=This)||(LA248_0>=From && LA248_0<=Void)||LA248_0==FullStopFullStopFullStop||(LA248_0>=Get && LA248_0<=Set)||LA248_0==PlusSignPlusSign||LA248_0==HyphenMinusHyphenMinus||LA248_0==SolidusEqualsSign||LA248_0==As||LA248_0==Of||LA248_0==ExclamationMark||LA248_0==LeftParenthesis||LA248_0==PlusSign||LA248_0==HyphenMinus||LA248_0==Solidus||LA248_0==LessThanSign||(LA248_0>=CommercialAt && LA248_0<=LeftSquareBracket)||LA248_0==LeftCurlyBracket||LA248_0==Tilde||LA248_0==RULE_DOUBLE||(LA248_0>=RULE_HEX_INT && LA248_0<=RULE_LEGACY_OCTAL_INT)||LA248_0==RULE_SCIENTIFIC_INT||LA248_0==RULE_IDENTIFIER||LA248_0==RULE_STRING||(LA248_0>=RULE_TEMPLATE_HEAD && LA248_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA248_0==RULE_INT) ) {
                alt248=1;
            }
            switch (alt248) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop245:
                    do {
                        int alt245=2;
                        alt245 = dfa245.predict(input);
                        switch (alt245) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_91); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop244:
                    	    do {
                    	        int alt244=2;
                    	        int LA244_0 = input.LA(1);

                    	        if ( (LA244_0==Comma) ) {
                    	            alt244=1;
                    	        }


                    	        switch (alt244) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_91);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop244;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_90);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop245;
                        }
                    } while (true);
                    int alt247=2;
                    int LA247_0 = input.LA(1);

                    if ( (LA247_0==Comma) ) {
                        alt247=1;
                    }
                    switch (alt247) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_90); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              					
                            }

                            }


                            }
                            loop246:
                            do {
                                int alt246=2;
                                int LA246_0 = input.LA(1);

                                if ( (LA246_0==Comma) ) {
                                    alt246=1;
                                }


                                switch (alt246) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_90);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop246;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayLiteral_return retval = new InternalN4JSParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_89); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop249:
            do {
                int alt249=2;
                int LA249_0 = input.LA(1);

                if ( (LA249_0==Comma) ) {
                    alt249=1;
                }


                switch (alt249) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_89);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop249;
                }
            } while (true);
            int alt254=2;
            int LA254_0 = input.LA(1);

            if ( ((LA254_0>=Intersection && LA254_0<=Implements)||(LA254_0>=Promisify && LA254_0<=Abstract)||(LA254_0>=External && LA254_0<=Function)||(LA254_0>=Private && LA254_0<=Delete)||LA254_0==Public||LA254_0==Static||(LA254_0>=Target && LA254_0<=Await)||LA254_0==Class||(LA254_0>=False && LA254_0<=Super)||LA254_0==Union||(LA254_0>=Yield && LA254_0<=This)||(LA254_0>=From && LA254_0<=Void)||LA254_0==FullStopFullStopFullStop||(LA254_0>=Get && LA254_0<=Set)||LA254_0==PlusSignPlusSign||LA254_0==HyphenMinusHyphenMinus||LA254_0==SolidusEqualsSign||LA254_0==As||LA254_0==Of||LA254_0==ExclamationMark||LA254_0==LeftParenthesis||LA254_0==PlusSign||LA254_0==HyphenMinus||LA254_0==Solidus||LA254_0==LessThanSign||(LA254_0>=CommercialAt && LA254_0<=LeftSquareBracket)||LA254_0==LeftCurlyBracket||LA254_0==Tilde||LA254_0==RULE_DOUBLE||(LA254_0>=RULE_HEX_INT && LA254_0<=RULE_LEGACY_OCTAL_INT)||LA254_0==RULE_SCIENTIFIC_INT||LA254_0==RULE_IDENTIFIER||LA254_0==RULE_STRING||(LA254_0>=RULE_TEMPLATE_HEAD && LA254_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA254_0==RULE_INT) ) {
                alt254=1;
            }
            switch (alt254) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop251:
                    do {
                        int alt251=2;
                        alt251 = dfa251.predict(input);
                        switch (alt251) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_91); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop250:
                    	    do {
                    	        int alt250=2;
                    	        int LA250_0 = input.LA(1);

                    	        if ( (LA250_0==Comma) ) {
                    	            alt250=1;
                    	        }


                    	        switch (alt250) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_91);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop250;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_90);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop251;
                        }
                    } while (true);
                    int alt253=2;
                    int LA253_0 = input.LA(1);

                    if ( (LA253_0==Comma) ) {
                        alt253=1;
                    }
                    switch (alt253) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_90); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0());
                              					
                            }

                            }


                            }
                            loop252:
                            do {
                                int alt252=2;
                                int LA252_0 = input.LA(1);

                                if ( (LA252_0==Comma) ) {
                                    alt252=1;
                                }


                                switch (alt252) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_90);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop252;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSParser.ruleArrayPadding_return retval = new InternalN4JSParser.ruleArrayPadding_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;



        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSParser.ruleArrayElement_return retval = new InternalN4JSParser.ruleArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( (LA255_0==FullStopFullStopFullStop) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayElement_return retval = new InternalN4JSParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;




        try {
            {
            {
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==FullStopFullStopFullStop) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSParser.ruleObjectLiteral_return retval = new InternalN4JSParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt259=2;
            int LA259_0 = input.LA(1);

            if ( ((LA259_0>=Intersection && LA259_0<=With)||(LA259_0>=For && LA259_0<=Var)||(LA259_0>=As && LA259_0<=Of)||LA259_0==LeftParenthesis||LA259_0==Asterisk||LA259_0==LessThanSign||(LA259_0>=QuestionMark && LA259_0<=LeftSquareBracket)||LA259_0==LeftCurlyBracket||LA259_0==Tilde||LA259_0==RULE_DOUBLE||LA259_0==RULE_HEX_INT||LA259_0==RULE_OCTAL_INT||LA259_0==RULE_SCIENTIFIC_INT||LA259_0==RULE_IDENTIFIER||LA259_0==RULE_STRING||LA259_0==RULE_INT) ) {
                alt259=1;
            }
            switch (alt259) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop257:
                    do {
                        int alt257=2;
                        int LA257_0 = input.LA(1);

                        if ( (LA257_0==Comma) ) {
                            int LA257_1 = input.LA(2);

                            if ( ((LA257_1>=Intersection && LA257_1<=With)||(LA257_1>=For && LA257_1<=Var)||(LA257_1>=As && LA257_1<=Of)||LA257_1==LeftParenthesis||LA257_1==Asterisk||LA257_1==LessThanSign||(LA257_1>=QuestionMark && LA257_1<=LeftSquareBracket)||LA257_1==LeftCurlyBracket||LA257_1==Tilde||LA257_1==RULE_DOUBLE||LA257_1==RULE_HEX_INT||LA257_1==RULE_OCTAL_INT||LA257_1==RULE_SCIENTIFIC_INT||LA257_1==RULE_IDENTIFIER||LA257_1==RULE_STRING||LA257_1==RULE_INT) ) {
                                alt257=1;
                            }


                        }


                        switch (alt257) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop257;
                        }
                    } while (true);
                    int alt258=2;
                    int LA258_0 = input.LA(1);

                    if ( (LA258_0==Comma) ) {
                        alt258=1;
                    }
                    switch (alt258) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              			
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectLiteral_return retval = new InternalN4JSParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt262=2;
            int LA262_0 = input.LA(1);

            if ( ((LA262_0>=Intersection && LA262_0<=With)||(LA262_0>=For && LA262_0<=Var)||(LA262_0>=As && LA262_0<=Of)||LA262_0==LeftParenthesis||LA262_0==Asterisk||LA262_0==LessThanSign||(LA262_0>=QuestionMark && LA262_0<=LeftSquareBracket)||LA262_0==LeftCurlyBracket||LA262_0==Tilde||LA262_0==RULE_DOUBLE||LA262_0==RULE_HEX_INT||LA262_0==RULE_OCTAL_INT||LA262_0==RULE_SCIENTIFIC_INT||LA262_0==RULE_IDENTIFIER||LA262_0==RULE_STRING||LA262_0==RULE_INT) ) {
                alt262=1;
            }
            switch (alt262) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop260:
                    do {
                        int alt260=2;
                        int LA260_0 = input.LA(1);

                        if ( (LA260_0==Comma) ) {
                            int LA260_1 = input.LA(2);

                            if ( ((LA260_1>=Intersection && LA260_1<=With)||(LA260_1>=For && LA260_1<=Var)||(LA260_1>=As && LA260_1<=Of)||LA260_1==LeftParenthesis||LA260_1==Asterisk||LA260_1==LessThanSign||(LA260_1>=QuestionMark && LA260_1<=LeftSquareBracket)||LA260_1==LeftCurlyBracket||LA260_1==Tilde||LA260_1==RULE_DOUBLE||LA260_1==RULE_HEX_INT||LA260_1==RULE_OCTAL_INT||LA260_1==RULE_SCIENTIFIC_INT||LA260_1==RULE_IDENTIFIER||LA260_1==RULE_STRING||LA260_1==RULE_INT) ) {
                                alt260=1;
                            }


                        }


                        switch (alt260) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_93); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop260;
                        }
                    } while (true);
                    int alt261=2;
                    int LA261_0 = input.LA(1);

                    if ( (LA261_0==Comma) ) {
                        alt261=1;
                    }
                    switch (alt261) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_25); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2());
                              			
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignment_return retval = new InternalN4JSParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;




        try {
            {
            int alt263=6;
            alt263 = dfa263.predict(input);
            switch (alt263) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyAssignment_return retval = new InternalN4JSParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;




        try {
            {
            int alt264=6;
            alt264 = dfa264.predict(input);
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_94);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt272=5;
            alt272 = dfa272.predict(input);
            switch (alt272) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt265=2;
                    alt265 = dfa265.predict(input);
                    switch (alt265) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                              							
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_85);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                      							
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                      							
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    FparFormalParameterParserRuleCall_1_2_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt266=2;
                    int LA266_0 = input.LA(1);

                    if ( (LA266_0==LessThanSign) ) {
                        alt266=1;
                    }
                    switch (alt266) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt267=2;
                    alt267 = dfa267.predict(input);
                    switch (alt267) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_96);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2());
                              							
                            }

                            }


                            }
                            break;

                    }
                    int alt268=2;
                    int LA268_0 = input.LA(1);

                    if ( (LA268_0==Asterisk) ) {
                        alt268=1;
                    }
                    else if ( ((LA268_0>=Intersection && LA268_0<=With)||(LA268_0>=For && LA268_0<=Var)||(LA268_0>=As && LA268_0<=Of)||LA268_0==LeftSquareBracket||LA268_0==RULE_DOUBLE||LA268_0==RULE_HEX_INT||LA268_0==RULE_OCTAL_INT||LA268_0==RULE_SCIENTIFIC_INT||LA268_0==RULE_IDENTIFIER||LA268_0==RULE_STRING||LA268_0==RULE_INT) ) {
                        alt268=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 268, 0, input);

                        throw nvae;
                    }
                    switch (alt268) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==Semicolon) ) {
                        alt269=1;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt270=2;
                    alt270 = dfa270.predict(input);
                    switch (alt270) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_62);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2());
                      					
                    }

                    }


                    }
                    int alt271=2;
                    int LA271_0 = input.LA(1);

                    if ( (LA271_0==EqualsSign) ) {
                        alt271=1;
                    }
                    switch (alt271) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_94);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt280=5;
            alt280 = dfa280.predict(input);
            switch (alt280) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt273=2;
                    alt273 = dfa273.predict(input);
                    switch (alt273) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1());
                              							
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_85);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_0_0_0_2());
                      							
                    }

                    }


                    }

                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3());
                      					
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_2_0_0_2());
                      							
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    FparFormalParameterParserRuleCall_1_2_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt274=2;
                    int LA274_0 = input.LA(1);

                    if ( (LA274_0==LessThanSign) ) {
                        alt274=1;
                    }
                    switch (alt274) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt275=2;
                    alt275 = dfa275.predict(input);
                    switch (alt275) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_96);
                            ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0=ruleTypeRefWithModifiers();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2());
                              							
                            }

                            }


                            }
                            break;

                    }
                    int alt276=2;
                    int LA276_0 = input.LA(1);

                    if ( (LA276_0==Asterisk) ) {
                        alt276=1;
                    }
                    else if ( ((LA276_0>=Intersection && LA276_0<=With)||(LA276_0>=For && LA276_0<=Var)||(LA276_0>=As && LA276_0<=Of)||LA276_0==LeftSquareBracket||LA276_0==RULE_DOUBLE||LA276_0==RULE_HEX_INT||LA276_0==RULE_OCTAL_INT||LA276_0==RULE_SCIENTIFIC_INT||LA276_0==RULE_IDENTIFIER||LA276_0==RULE_STRING||LA276_0==RULE_INT) ) {
                        alt276=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 276, 0, input);

                        throw nvae;
                    }
                    switch (alt276) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_41);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredNameAssignment_1_3_0_0_3_1_0());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==Semicolon) ) {
                        alt277=1;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt278=2;
                    alt278 = dfa278.predict(input);
                    switch (alt278) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_62);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2());
                      					
                    }

                    }


                    }
                    int alt279=2;
                    int LA279_0 = input.LA(1);

                    if ( (LA279_0==EqualsSign) ) {
                        alt279=1;
                    }
                    switch (alt279) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;




        try {
            {
            {
            {
            {
            int alt281=2;
            int LA281_0 = input.LA(1);

            if ( (LA281_0==LessThanSign) ) {
                alt281=1;
            }
            switch (alt281) {
                case 1 :
                    {
                    pushFollow(FOLLOW_96);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt282=2;
            alt282 = dfa282.predict(input);
            switch (alt282) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_96);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt283=2;
            int LA283_0 = input.LA(1);

            if ( (LA283_0==Asterisk) ) {
                alt283=1;
            }
            else if ( ((LA283_0>=Intersection && LA283_0<=With)||(LA283_0>=For && LA283_0<=Var)||(LA283_0>=As && LA283_0<=Of)||LA283_0==LeftSquareBracket||LA283_0==RULE_DOUBLE||LA283_0==RULE_HEX_INT||LA283_0==RULE_OCTAL_INT||LA283_0==RULE_SCIENTIFIC_INT||LA283_0==RULE_IDENTIFIER||LA283_0==RULE_STRING||LA283_0==RULE_INT) ) {
                alt283=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 283, 0, input);

                throw nvae;
            }
            switch (alt283) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_41);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==Semicolon) ) {
                alt284=1;
            }
            switch (alt284) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;




        try {
            {
            {
            {
            {
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==LessThanSign) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    pushFollow(FOLLOW_96);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt286=2;
            alt286 = dfa286.predict(input);
            switch (alt286) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_96);
                    ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt287=2;
            int LA287_0 = input.LA(1);

            if ( (LA287_0==Asterisk) ) {
                alt287=1;
            }
            else if ( ((LA287_0>=Intersection && LA287_0<=With)||(LA287_0>=For && LA287_0<=Var)||(LA287_0>=As && LA287_0<=Of)||LA287_0==LeftSquareBracket||LA287_0==RULE_DOUBLE||LA287_0==RULE_HEX_INT||LA287_0==RULE_OCTAL_INT||LA287_0==RULE_SCIENTIFIC_INT||LA287_0==RULE_IDENTIFIER||LA287_0==RULE_STRING||LA287_0==RULE_INT) ) {
                alt287=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 287, 0, input);

                throw nvae;
            }
            switch (alt287) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_41);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getDeclaredNameAssignment_0_0_3_1_0());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==Semicolon) ) {
                alt288=1;
            }
            switch (alt288) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePair_return retval = new InternalN4JSParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            int alt289=2;
            alt289 = dfa289.predict(input);
            switch (alt289) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                      					
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_85);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSParser.ruleTypeRefWithModifiers_return DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            int alt290=2;
            alt290 = dfa290.predict(input);
            switch (alt290) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1());
                      					
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_85);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }

            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;




        try {
            {
            {
            int alt291=2;
            alt291 = dfa291.predict(input);
            switch (alt291) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_62);
            IdentifierRefIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1());
              			
            }

            }


            }
            int alt292=2;
            int LA292_0 = input.LA(1);

            if ( (LA292_0==EqualsSign) ) {
                alt292=1;
            }
            switch (alt292) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;




        try {
            {
            {
            int alt293=2;
            alt293 = dfa293.predict(input);
            switch (alt293) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_62);
            IdentifierRefIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1());
              			
            }

            }


            }
            int alt294=2;
            int LA294_0 = input.LA(1);

            if ( (LA294_0==EqualsSign) ) {
                alt294=1;
            }
            switch (alt294) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertySetterDeclaration_return retval = new InternalN4JSParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;




        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;




        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getDeclaredNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedCallExpression_return retval = new InternalN4JSParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_9);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=ruleArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;




        try {
            {
            {
            pushFollow(FOLLOW_9);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_53);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1());
              			
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=norm1_ArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.ruleLeftHandSideExpression_return retval = new InternalN4JSParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_98);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt296=2;
            int LA296_0 = input.LA(1);

            if ( (LA296_0==LeftParenthesis) ) {
                alt296=1;
            }
            switch (alt296) {
                case 1 :
                    {
                    pushFollow(FOLLOW_99);
                    ArgumentsWithParenthesesParserRuleCall_1_1=ruleArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop295:
                    do {
                        int alt295=5;
                        int LA295_0 = input.LA(1);

                        if ( (LA295_0==LeftParenthesis) ) {
                            alt295=1;
                        }
                        else if ( (LA295_0==LeftSquareBracket) ) {
                            alt295=2;
                        }
                        else if ( (LA295_0==FullStop) ) {
                            alt295=3;
                        }
                        else if ( (LA295_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred163_InternalN4JSParser())) {
                            alt295=4;
                        }
                        else if ( (LA295_0==RULE_TEMPLATE_HEAD) && (synpred163_InternalN4JSParser())) {
                            alt295=4;
                        }


                        switch (alt295) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=ruleArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1());
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop295;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_98);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt298=2;
            int LA298_0 = input.LA(1);

            if ( (LA298_0==LeftParenthesis) ) {
                alt298=1;
            }
            switch (alt298) {
                case 1 :
                    {
                    pushFollow(FOLLOW_99);
                    ArgumentsWithParenthesesParserRuleCall_1_1=norm1_ArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop297:
                    do {
                        int alt297=5;
                        int LA297_0 = input.LA(1);

                        if ( (LA297_0==LeftParenthesis) ) {
                            alt297=1;
                        }
                        else if ( (LA297_0==LeftSquareBracket) ) {
                            alt297=2;
                        }
                        else if ( (LA297_0==FullStop) ) {
                            alt297=3;
                        }
                        else if ( (LA297_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred164_InternalN4JSParser())) {
                            alt297=4;
                        }
                        else if ( (LA297_0==RULE_TEMPLATE_HEAD) && (synpred164_InternalN4JSParser())) {
                            alt297=4;
                        }


                        switch (alt297) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=norm1_ArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      								announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1());
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop297;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( ((LA299_0>=Intersection && LA299_0<=Implements)||(LA299_0>=Promisify && LA299_0<=Abstract)||(LA299_0>=External && LA299_0<=Function)||(LA299_0>=Private && LA299_0<=Delete)||LA299_0==Public||LA299_0==Static||(LA299_0>=Target && LA299_0<=Await)||LA299_0==Class||(LA299_0>=False && LA299_0<=Super)||LA299_0==Union||(LA299_0>=Yield && LA299_0<=This)||(LA299_0>=From && LA299_0<=Void)||LA299_0==FullStopFullStopFullStop||(LA299_0>=Get && LA299_0<=Set)||LA299_0==PlusSignPlusSign||LA299_0==HyphenMinusHyphenMinus||LA299_0==SolidusEqualsSign||LA299_0==As||LA299_0==Of||LA299_0==ExclamationMark||LA299_0==LeftParenthesis||LA299_0==PlusSign||LA299_0==HyphenMinus||LA299_0==Solidus||LA299_0==LessThanSign||(LA299_0>=CommercialAt && LA299_0<=LeftSquareBracket)||LA299_0==LeftCurlyBracket||LA299_0==Tilde||LA299_0==RULE_DOUBLE||(LA299_0>=RULE_HEX_INT && LA299_0<=RULE_LEGACY_OCTAL_INT)||LA299_0==RULE_SCIENTIFIC_INT||LA299_0==RULE_IDENTIFIER||LA299_0==RULE_STRING||(LA299_0>=RULE_TEMPLATE_HEAD && LA299_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA299_0==RULE_INT) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    pushFollow(FOLLOW_68);
                    ArgumentsParserRuleCall_1=ruleArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;




        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0());
              	
            }
            int alt300=2;
            int LA300_0 = input.LA(1);

            if ( ((LA300_0>=Intersection && LA300_0<=Implements)||(LA300_0>=Promisify && LA300_0<=Abstract)||(LA300_0>=External && LA300_0<=Function)||(LA300_0>=Private && LA300_0<=Delete)||LA300_0==Public||LA300_0==Static||(LA300_0>=Target && LA300_0<=Await)||LA300_0==Class||(LA300_0>=False && LA300_0<=Super)||LA300_0==Union||(LA300_0>=Yield && LA300_0<=This)||(LA300_0>=From && LA300_0<=Void)||LA300_0==FullStopFullStopFullStop||(LA300_0>=Get && LA300_0<=Set)||LA300_0==PlusSignPlusSign||LA300_0==HyphenMinusHyphenMinus||LA300_0==SolidusEqualsSign||LA300_0==As||LA300_0==Of||LA300_0==ExclamationMark||LA300_0==LeftParenthesis||LA300_0==PlusSign||LA300_0==HyphenMinus||LA300_0==Solidus||LA300_0==LessThanSign||(LA300_0>=CommercialAt && LA300_0<=LeftSquareBracket)||LA300_0==LeftCurlyBracket||LA300_0==Tilde||LA300_0==RULE_DOUBLE||(LA300_0>=RULE_HEX_INT && LA300_0<=RULE_LEGACY_OCTAL_INT)||LA300_0==RULE_SCIENTIFIC_INT||LA300_0==RULE_IDENTIFIER||LA300_0==RULE_STRING||(LA300_0>=RULE_TEMPLATE_HEAD && LA300_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA300_0==RULE_INT) ) {
                alt300=1;
            }
            switch (alt300) {
                case 1 :
                    {
                    pushFollow(FOLLOW_68);
                    ArgumentsParserRuleCall_1=norm1_Arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSParser.ruleArguments_return retval = new InternalN4JSParser.ruleArguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleArgument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_33);
            ArgumentsArgumentParserRuleCall_0_0=ruleArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
              			
            }

            }


            }
            loop301:
            do {
                int alt301=2;
                int LA301_0 = input.LA(1);

                if ( (LA301_0==Comma) ) {
                    alt301=1;
                }


                switch (alt301) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_33);
            	    ArgumentsArgumentParserRuleCall_1_1_0=ruleArgument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop301;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSParser.norm1_Arguments_return retval = new InternalN4JSParser.norm1_Arguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_Argument_return ArgumentsArgumentParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_33);
            ArgumentsArgumentParserRuleCall_0_0=norm1_Argument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.start):null), (ArgumentsArgumentParserRuleCall_0_0!=null?((Token)ArgumentsArgumentParserRuleCall_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0());
              			
            }

            }


            }
            loop302:
            do {
                int alt302=2;
                int LA302_0 = input.LA(1);

                if ( (LA302_0==Comma) ) {
                    alt302=1;
                }


                switch (alt302) {
            	case 1 :
            	    {
            	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_101); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_1_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_33);
            	    ArgumentsArgumentParserRuleCall_1_1_0=norm1_Argument();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.start):null), (ArgumentsArgumentParserRuleCall_1_1_0!=null?((Token)ArgumentsArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop302;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgument_return ruleArgument() throws RecognitionException {
        InternalN4JSParser.ruleArgument_return retval = new InternalN4JSParser.ruleArgument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            int alt303=2;
            int LA303_0 = input.LA(1);

            if ( (LA303_0==FullStopFullStopFullStop) ) {
                alt303=1;
            }
            switch (alt303) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Argument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Argument_return norm1_Argument() throws RecognitionException {
        InternalN4JSParser.norm1_Argument_return retval = new InternalN4JSParser.norm1_Argument_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_0_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            int alt304=2;
            int LA304_0 = input.LA(1);

            if ( (LA304_0==FullStopFullStopFullStop) ) {
                alt304=1;
            }
            switch (alt304) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SpreadFullStopFullStopFullStopKeyword_0_0, grammarAccess.getArgumentAccess().getSpreadFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getArgumentAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSParser.ruleTypeArguments_return retval = new InternalN4JSParser.ruleTypeArguments_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;




        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_17);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1());
              			
            }

            }


            }
            loop305:
            do {
                int alt305=2;
                int LA305_0 = input.LA(1);

                if ( (LA305_0==Comma) ) {
                    alt305=1;
                }


                switch (alt305) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_44); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_17);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop305;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSParser.ruleMemberExpression_return retval = new InternalN4JSParser.ruleMemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;




        try {
            {
            int alt311=3;
            alt311 = dfa311.predict(input);
            switch (alt311) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      				
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      				
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_105);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                      				
                    }

                    }


                    }
                    int alt306=2;
                    int LA306_0 = input.LA(1);

                    if ( (LA306_0==LessThanSign) ) {
                        int LA306_1 = input.LA(2);

                        if ( (synpred167_InternalN4JSParser()) ) {
                            alt306=1;
                        }
                    }
                    switch (alt306) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_98);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==LeftParenthesis) ) {
                        int LA309_1 = input.LA(2);

                        if ( (synpred168_InternalN4JSParser()) ) {
                            alt309=1;
                        }
                    }
                    switch (alt309) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              					
                            }

                            }


                            }
                            int alt307=2;
                            int LA307_0 = input.LA(1);

                            if ( ((LA307_0>=Intersection && LA307_0<=Implements)||(LA307_0>=Promisify && LA307_0<=Abstract)||(LA307_0>=External && LA307_0<=Function)||(LA307_0>=Private && LA307_0<=Delete)||LA307_0==Public||LA307_0==Static||(LA307_0>=Target && LA307_0<=Await)||LA307_0==Class||(LA307_0>=False && LA307_0<=Super)||LA307_0==Union||(LA307_0>=Yield && LA307_0<=This)||(LA307_0>=From && LA307_0<=Void)||LA307_0==FullStopFullStopFullStop||(LA307_0>=Get && LA307_0<=Set)||LA307_0==PlusSignPlusSign||LA307_0==HyphenMinusHyphenMinus||LA307_0==SolidusEqualsSign||LA307_0==As||LA307_0==Of||LA307_0==ExclamationMark||LA307_0==LeftParenthesis||LA307_0==PlusSign||LA307_0==HyphenMinus||LA307_0==Solidus||LA307_0==LessThanSign||(LA307_0>=CommercialAt && LA307_0<=LeftSquareBracket)||LA307_0==LeftCurlyBracket||LA307_0==Tilde||LA307_0==RULE_DOUBLE||(LA307_0>=RULE_HEX_INT && LA307_0<=RULE_LEGACY_OCTAL_INT)||LA307_0==RULE_SCIENTIFIC_INT||LA307_0==RULE_IDENTIFIER||LA307_0==RULE_STRING||(LA307_0>=RULE_TEMPLATE_HEAD && LA307_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA307_0==RULE_INT) ) {
                                alt307=1;
                            }
                            switch (alt307) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_68);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_99); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              			
                            }
                            loop308:
                            do {
                                int alt308=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt308=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt308=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt308=3;
                                    }
                                    break;

                                }

                                switch (alt308) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1());
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop308;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_99);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop310:
                    do {
                        int alt310=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt310=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt310=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt310=3;
                            }
                            break;

                        }

                        switch (alt310) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop310;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MemberExpression_return retval = new InternalN4JSParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;




        try {
            {
            int alt317=3;
            alt317 = dfa317.predict(input);
            switch (alt317) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_102); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1());
                      				
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_103); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2());
                      				
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_104); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_105);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1());
                      				
                    }

                    }


                    }
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==LessThanSign) ) {
                        int LA312_1 = input.LA(2);

                        if ( (synpred171_InternalN4JSParser()) ) {
                            alt312=1;
                        }
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_98);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==LeftParenthesis) ) {
                        int LA315_1 = input.LA(2);

                        if ( (synpred172_InternalN4JSParser()) ) {
                            alt315=1;
                        }
                    }
                    switch (alt315) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0());
                              					
                            }

                            }


                            }
                            int alt313=2;
                            int LA313_0 = input.LA(1);

                            if ( ((LA313_0>=Intersection && LA313_0<=Implements)||(LA313_0>=Promisify && LA313_0<=Abstract)||(LA313_0>=External && LA313_0<=Function)||(LA313_0>=Private && LA313_0<=Delete)||LA313_0==Public||LA313_0==Static||(LA313_0>=Target && LA313_0<=Await)||LA313_0==Class||(LA313_0>=False && LA313_0<=Super)||LA313_0==Union||(LA313_0>=Yield && LA313_0<=This)||(LA313_0>=From && LA313_0<=Void)||LA313_0==FullStopFullStopFullStop||(LA313_0>=Get && LA313_0<=Set)||LA313_0==PlusSignPlusSign||LA313_0==HyphenMinusHyphenMinus||LA313_0==SolidusEqualsSign||LA313_0==As||LA313_0==Of||LA313_0==ExclamationMark||LA313_0==LeftParenthesis||LA313_0==PlusSign||LA313_0==HyphenMinus||LA313_0==Solidus||LA313_0==LessThanSign||(LA313_0>=CommercialAt && LA313_0<=LeftSquareBracket)||LA313_0==LeftCurlyBracket||LA313_0==Tilde||LA313_0==RULE_DOUBLE||(LA313_0>=RULE_HEX_INT && LA313_0<=RULE_LEGACY_OCTAL_INT)||LA313_0==RULE_SCIENTIFIC_INT||LA313_0==RULE_IDENTIFIER||LA313_0==RULE_STRING||(LA313_0>=RULE_TEMPLATE_HEAD && LA313_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA313_0==RULE_INT) ) {
                                alt313=1;
                            }
                            switch (alt313) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_68);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_99); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2());
                              			
                            }
                            loop314:
                            do {
                                int alt314=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt314=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt314=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt314=3;
                                    }
                                    break;

                                }

                                switch (alt314) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_99);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      								announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1());
                            	      							
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop314;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_99);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop316:
                    do {
                        int alt316=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt316=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt316=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt316=3;
                            }
                            break;

                        }

                        switch (alt316) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1());
                    	      						
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop316;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return IndexExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_106);
            IndexExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1());
              			
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return IndexExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0());
              	
            }
            {
            {
            pushFollow(FOLLOW_106);
            IndexExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1());
              			
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;




        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0());
              	
            }
            int alt318=2;
            int LA318_0 = input.LA(1);

            if ( (LA318_0==LessThanSign) ) {
                alt318=1;
            }
            switch (alt318) {
                case 1 :
                    {
                    pushFollow(FOLLOW_27);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;




        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_107); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0());
              	
            }
            int alt319=2;
            int LA319_0 = input.LA(1);

            if ( (LA319_0==LessThanSign) ) {
                alt319=1;
            }
            switch (alt319) {
                case 1 :
                    {
                    pushFollow(FOLLOW_27);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSParser.rulePostfixExpression_return retval = new InternalN4JSParser.rulePostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_108);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt320=2;
            int LA320_0 = input.LA(1);

            if ( (LA320_0==PlusSignPlusSign) && (synpred173_InternalN4JSParser())) {
                alt320=1;
            }
            else if ( (LA320_0==HyphenMinusHyphenMinus) && (synpred173_InternalN4JSParser())) {
                alt320=1;
            }
            switch (alt320) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PostfixExpression_return retval = new InternalN4JSParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_108);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==PlusSignPlusSign) && (synpred174_InternalN4JSParser())) {
                alt321=1;
            }
            else if ( (LA321_0==HyphenMinusHyphenMinus) && (synpred174_InternalN4JSParser())) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSParser.ruleCastExpression_return retval = new InternalN4JSParser.ruleCastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_26);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==As) && (synpred175_InternalN4JSParser())) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSParser.norm1_CastExpression_return retval = new InternalN4JSParser.norm1_CastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_26);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==As) && (synpred176_InternalN4JSParser())) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnaryExpression_return retval = new InternalN4JSParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;




        try {
            {
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( ((LA324_0>=Intersection && LA324_0<=Implements)||(LA324_0>=Promisify && LA324_0<=Abstract)||(LA324_0>=External && LA324_0<=Function)||(LA324_0>=Private && LA324_0<=Project)||LA324_0==Public||LA324_0==Static||LA324_0==Target||(LA324_0>=Async && LA324_0<=Await)||LA324_0==Class||(LA324_0>=False && LA324_0<=Super)||LA324_0==Union||(LA324_0>=Yield && LA324_0<=This)||(LA324_0>=From && LA324_0<=Type)||(LA324_0>=Get && LA324_0<=Set)||LA324_0==SolidusEqualsSign||LA324_0==As||LA324_0==Of||LA324_0==LeftParenthesis||LA324_0==Solidus||LA324_0==LessThanSign||(LA324_0>=CommercialAt && LA324_0<=LeftSquareBracket)||LA324_0==LeftCurlyBracket||LA324_0==RULE_DOUBLE||(LA324_0>=RULE_HEX_INT && LA324_0<=RULE_LEGACY_OCTAL_INT)||LA324_0==RULE_SCIENTIFIC_INT||LA324_0==RULE_IDENTIFIER||LA324_0==RULE_STRING||(LA324_0>=RULE_TEMPLATE_HEAD && LA324_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA324_0==RULE_INT) ) {
                alt324=1;
            }
            else if ( (LA324_0==Delete||LA324_0==Typeof||LA324_0==Void||LA324_0==PlusSignPlusSign||LA324_0==HyphenMinusHyphenMinus||LA324_0==ExclamationMark||LA324_0==PlusSign||LA324_0==HyphenMinus||LA324_0==Tilde) ) {
                alt324=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 324, 0, input);

                throw nvae;
            }
            switch (alt324) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_54);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_UnaryExpression_return retval = new InternalN4JSParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;




        try {
            {
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( ((LA325_0>=Intersection && LA325_0<=Implements)||(LA325_0>=Promisify && LA325_0<=Abstract)||(LA325_0>=External && LA325_0<=Function)||(LA325_0>=Private && LA325_0<=Project)||LA325_0==Public||LA325_0==Static||LA325_0==Target||(LA325_0>=Async && LA325_0<=Await)||LA325_0==Class||(LA325_0>=False && LA325_0<=Super)||LA325_0==Union||LA325_0==This||(LA325_0>=From && LA325_0<=Type)||(LA325_0>=Get && LA325_0<=Set)||LA325_0==SolidusEqualsSign||LA325_0==As||LA325_0==Of||LA325_0==LeftParenthesis||LA325_0==Solidus||LA325_0==LessThanSign||(LA325_0>=CommercialAt && LA325_0<=LeftSquareBracket)||LA325_0==LeftCurlyBracket||LA325_0==RULE_DOUBLE||(LA325_0>=RULE_HEX_INT && LA325_0<=RULE_LEGACY_OCTAL_INT)||LA325_0==RULE_SCIENTIFIC_INT||LA325_0==RULE_IDENTIFIER||LA325_0==RULE_STRING||(LA325_0>=RULE_TEMPLATE_HEAD && LA325_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA325_0==RULE_INT) ) {
                alt325=1;
            }
            else if ( (LA325_0==Delete||LA325_0==Typeof||LA325_0==Void||LA325_0==PlusSignPlusSign||LA325_0==HyphenMinusHyphenMinus||LA325_0==ExclamationMark||LA325_0==PlusSign||LA325_0==HyphenMinus||LA325_0==Tilde) ) {
                alt325=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 325, 0, input);

                throw nvae;
            }
            switch (alt325) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_54);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.ruleMultiplicativeExpression_return retval = new InternalN4JSParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_110);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop326:
            do {
                int alt326=2;
                int LA326_0 = input.LA(1);

                if ( (LA326_0==Asterisk) && (synpred177_InternalN4JSParser())) {
                    alt326=1;
                }
                else if ( (LA326_0==Solidus) && (synpred177_InternalN4JSParser())) {
                    alt326=1;
                }
                else if ( (LA326_0==PercentSign) && (synpred177_InternalN4JSParser())) {
                    alt326=1;
                }


                switch (alt326) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_110);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop326;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_110);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop327:
            do {
                int alt327=2;
                int LA327_0 = input.LA(1);

                if ( (LA327_0==Asterisk) && (synpred178_InternalN4JSParser())) {
                    alt327=1;
                }
                else if ( (LA327_0==Solidus) && (synpred178_InternalN4JSParser())) {
                    alt327=1;
                }
                else if ( (LA327_0==PercentSign) && (synpred178_InternalN4JSParser())) {
                    alt327=1;
                }


                switch (alt327) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_110);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop327;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSParser.ruleAdditiveExpression_return retval = new InternalN4JSParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_111);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop328:
            do {
                int alt328=2;
                int LA328_0 = input.LA(1);

                if ( (LA328_0==PlusSign) && (synpred179_InternalN4JSParser())) {
                    alt328=1;
                }
                else if ( (LA328_0==HyphenMinus) && (synpred179_InternalN4JSParser())) {
                    alt328=1;
                }


                switch (alt328) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_111);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop328;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AdditiveExpression_return retval = new InternalN4JSParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_111);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop329:
            do {
                int alt329=2;
                int LA329_0 = input.LA(1);

                if ( (LA329_0==PlusSign) && (synpred180_InternalN4JSParser())) {
                    alt329=1;
                }
                else if ( (LA329_0==HyphenMinus) && (synpred180_InternalN4JSParser())) {
                    alt329=1;
                }


                switch (alt329) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_111);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop329;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSParser.ruleShiftExpression_return retval = new InternalN4JSParser.ruleShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_112);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop330:
            do {
                int alt330=2;
                alt330 = dfa330.predict(input);
                switch (alt330) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_112);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ShiftExpression_return retval = new InternalN4JSParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_112);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop331:
            do {
                int alt331=2;
                alt331 = dfa331.predict(input);
                switch (alt331) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_112);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop331;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSParser.ruleShiftOperator_return retval = new InternalN4JSParser.ruleShiftOperator_return();
        retval.start = input.LT(1);

        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;



        try {
            {
            int alt333=2;
            int LA333_0 = input.LA(1);

            if ( (LA333_0==GreaterThanSign) ) {
                alt333=1;
            }
            else if ( (LA333_0==LessThanSignLessThanSign) ) {
                alt333=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 333, 0, input);

                throw nvae;
            }
            switch (alt333) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_113); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0());
                      		
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1());
                      		
                    }
                    int alt332=2;
                    int LA332_0 = input.LA(1);

                    if ( (LA332_0==GreaterThanSign) ) {
                        alt332=1;
                    }
                    switch (alt332) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2());
                              			
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSParser.ruleRelationalExpression_return retval = new InternalN4JSParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_115);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop334:
            do {
                int alt334=2;
                alt334 = dfa334.predict(input);
                switch (alt334) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop334;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalExpression_return retval = new InternalN4JSParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_116);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop335:
            do {
                int alt335=2;
                alt335 = dfa335.predict(input);
                switch (alt335) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop335;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_RelationalExpression_return retval = new InternalN4JSParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_115);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop336:
            do {
                int alt336=2;
                alt336 = dfa336.predict(input);
                switch (alt336) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop336;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_RelationalExpression_return retval = new InternalN4JSParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_116);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop337:
            do {
                int alt337=2;
                alt337 = dfa337.predict(input);
                switch (alt337) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1());
            	      					
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      						announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2());
            	      					
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop337;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSParser.ruleRelationalOperator_return retval = new InternalN4JSParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;



        try {
            {
            int alt338=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt338=1;
                }
                break;
            case GreaterThanSign:
                {
                alt338=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt338=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt338=4;
                }
                break;
            case Instanceof:
                {
                alt338=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 338, 0, input);

                throw nvae;
            }

            switch (alt338) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalOperator_return retval = new InternalN4JSParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;
        Token InKeyword_5_0=null;



        try {
            {
            int alt339=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt339=1;
                }
                break;
            case GreaterThanSign:
                {
                alt339=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt339=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt339=4;
                }
                break;
            case Instanceof:
                {
                alt339=5;
                }
                break;
            case In:
                {
                alt339=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 339, 0, input);

                throw nvae;
            }

            switch (alt339) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    InKeyword_5_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(InKeyword_5_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSParser.ruleEqualityExpression_return retval = new InternalN4JSParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_117);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop340:
            do {
                int alt340=2;
                int LA340_0 = input.LA(1);

                if ( (LA340_0==EqualsSignEqualsSignEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt340=1;
                }
                else if ( (LA340_0==ExclamationMarkEqualsSignEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt340=1;
                }
                else if ( (LA340_0==EqualsSignEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt340=1;
                }
                else if ( (LA340_0==ExclamationMarkEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt340=1;
                }


                switch (alt340) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm1_EqualityExpression_return retval = new InternalN4JSParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_117);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop341:
            do {
                int alt341=2;
                int LA341_0 = input.LA(1);

                if ( (LA341_0==EqualsSignEqualsSignEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt341=1;
                }
                else if ( (LA341_0==ExclamationMarkEqualsSignEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt341=1;
                }
                else if ( (LA341_0==EqualsSignEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt341=1;
                }
                else if ( (LA341_0==ExclamationMarkEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt341=1;
                }


                switch (alt341) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop341;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm2_EqualityExpression_return retval = new InternalN4JSParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_117);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop342:
            do {
                int alt342=2;
                int LA342_0 = input.LA(1);

                if ( (LA342_0==EqualsSignEqualsSignEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt342=1;
                }
                else if ( (LA342_0==ExclamationMarkEqualsSignEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt342=1;
                }
                else if ( (LA342_0==EqualsSignEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt342=1;
                }
                else if ( (LA342_0==ExclamationMarkEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt342=1;
                }


                switch (alt342) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop342;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm3_EqualityExpression_return retval = new InternalN4JSParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_117);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop343:
            do {
                int alt343=2;
                int LA343_0 = input.LA(1);

                if ( (LA343_0==EqualsSignEqualsSignEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt343=1;
                }
                else if ( (LA343_0==ExclamationMarkEqualsSignEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt343=1;
                }
                else if ( (LA343_0==EqualsSignEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt343=1;
                }
                else if ( (LA343_0==ExclamationMarkEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt343=1;
                }


                switch (alt343) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop343;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDExpression_return retval = new InternalN4JSParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_61);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop344:
            do {
                int alt344=2;
                int LA344_0 = input.LA(1);

                if ( (LA344_0==Ampersand) && (synpred195_InternalN4JSParser())) {
                    alt344=1;
                }


                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_61);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==Ampersand) && (synpred196_InternalN4JSParser())) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_61);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==Ampersand) && (synpred197_InternalN4JSParser())) {
                    alt346=1;
                }


                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_61);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==Ampersand) && (synpred198_InternalN4JSParser())) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDOperator_return retval = new InternalN4JSParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword=null;



        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXORExpression_return retval = new InternalN4JSParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);

                if ( (LA348_0==CircumflexAccent) && (synpred199_InternalN4JSParser())) {
                    alt348=1;
                }


                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==CircumflexAccent) && (synpred200_InternalN4JSParser())) {
                    alt349=1;
                }


                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);

                if ( (LA350_0==CircumflexAccent) && (synpred201_InternalN4JSParser())) {
                    alt350=1;
                }


                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_118);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==CircumflexAccent) && (synpred202_InternalN4JSParser())) {
                    alt351=1;
                }


                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_118);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXOROperator_return retval = new InternalN4JSParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);

        Token CircumflexAccentKeyword=null;



        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseORExpression_return retval = new InternalN4JSParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);

                if ( (LA352_0==VerticalLine) && (synpred203_InternalN4JSParser())) {
                    alt352=1;
                }


                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop352;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseORExpression_return retval = new InternalN4JSParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);

                if ( (LA353_0==VerticalLine) && (synpred204_InternalN4JSParser())) {
                    alt353=1;
                }


                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseORExpression_return retval = new InternalN4JSParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                int LA354_0 = input.LA(1);

                if ( (LA354_0==VerticalLine) && (synpred205_InternalN4JSParser())) {
                    alt354=1;
                }


                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop354;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseORExpression_return retval = new InternalN4JSParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_119);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==VerticalLine) && (synpred206_InternalN4JSParser())) {
                    alt355=1;
                }


                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_119);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop355;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseOROperator_return retval = new InternalN4JSParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword=null;



        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDExpression_return retval = new InternalN4JSParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_120);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);

                if ( (LA356_0==AmpersandAmpersand) && (synpred207_InternalN4JSParser())) {
                    alt356=1;
                }


                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop356;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalANDExpression_return retval = new InternalN4JSParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_120);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==AmpersandAmpersand) && (synpred208_InternalN4JSParser())) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalANDExpression_return retval = new InternalN4JSParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_120);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==AmpersandAmpersand) && (synpred209_InternalN4JSParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalANDExpression_return retval = new InternalN4JSParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_120);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==AmpersandAmpersand) && (synpred210_InternalN4JSParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDOperator_return retval = new InternalN4JSParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandAmpersandKeyword=null;



        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalORExpression_return retval = new InternalN4JSParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==VerticalLineVerticalLine) && (synpred211_InternalN4JSParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalORExpression_return retval = new InternalN4JSParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==VerticalLineVerticalLine) && (synpred212_InternalN4JSParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalORExpression_return retval = new InternalN4JSParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==VerticalLineVerticalLine) && (synpred213_InternalN4JSParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalORExpression_return retval = new InternalN4JSParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_121);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==VerticalLineVerticalLine) && (synpred214_InternalN4JSParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_54);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      							announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1());
            	      						
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalOROperator_return retval = new InternalN4JSParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineVerticalLineKeyword=null;



        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSParser.ruleConditionalExpression_return retval = new InternalN4JSParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_122);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt364=2;
            int LA364_0 = input.LA(1);

            if ( (LA364_0==QuestionMark) && (synpred215_InternalN4JSParser())) {
                alt364=1;
            }
            switch (alt364) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_85);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ConditionalExpression_return retval = new InternalN4JSParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_122);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt365=2;
            int LA365_0 = input.LA(1);

            if ( (LA365_0==QuestionMark) && (synpred216_InternalN4JSParser())) {
                alt365=1;
            }
            switch (alt365) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_85);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ConditionalExpression_return retval = new InternalN4JSParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_122);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt366=2;
            int LA366_0 = input.LA(1);

            if ( (LA366_0==QuestionMark) && (synpred217_InternalN4JSParser())) {
                alt366=1;
            }
            switch (alt366) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_85);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ConditionalExpression_return retval = new InternalN4JSParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_122);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt367=2;
            int LA367_0 = input.LA(1);

            if ( (LA367_0==QuestionMark) && (synpred218_InternalN4JSParser())) {
                alt367=1;
            }
            switch (alt367) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_85);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpression_return retval = new InternalN4JSParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt369=4;
            alt369 = dfa369.predict(input);
            switch (alt369) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_123);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt368=2;
                    alt368 = dfa368.predict(input);
                    switch (alt368) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpression_return retval = new InternalN4JSParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt371=4;
            alt371 = dfa371.predict(input);
            switch (alt371) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_123);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt370=2;
                    alt370 = dfa370.predict(input);
                    switch (alt370) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AssignmentExpression_return retval = new InternalN4JSParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt373=5;
            alt373 = dfa373.predict(input);
            switch (alt373) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_123);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt372=2;
                    alt372 = dfa372.predict(input);
                    switch (alt372) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AssignmentExpression_return retval = new InternalN4JSParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;




        try {
            {
            int alt375=5;
            alt375 = dfa375.predict(input);
            switch (alt375) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_123);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt374=2;
                    alt374 = dfa374.predict(input);
                    switch (alt374) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_54);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              								announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1());
                              							
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSParser.ruleYieldExpression_return retval = new InternalN4JSParser.ruleYieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;




        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              	
            }
            int alt376=2;
            int LA376_0 = input.LA(1);

            if ( (LA376_0==Asterisk) && (synpred239_InternalN4JSParser())) {
                alt376=1;
            }
            switch (alt376) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt377=2;
            alt377 = dfa377.predict(input);
            switch (alt377) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSParser.norm1_YieldExpression_return retval = new InternalN4JSParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;




        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_124); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1());
              	
            }
            int alt378=2;
            int LA378_0 = input.LA(1);

            if ( (LA378_0==Asterisk) && (synpred241_InternalN4JSParser())) {
                alt378=1;
            }
            switch (alt378) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_125); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt379=2;
            alt379 = dfa379.predict(input);
            switch (alt379) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentOperator_return retval = new InternalN4JSParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusEqualsSignKeyword_5=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignEqualsSignKeyword_7_2=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;



        try {
            {
            int alt381=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt381=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt381=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt381=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt381=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt381=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt381=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt381=7;
                }
                break;
            case GreaterThanSign:
                {
                alt381=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt381=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt381=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt381=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 381, 0, input);

                throw nvae;
            }

            switch (alt381) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    HyphenMinusEqualsSignKeyword_5=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(HyphenMinusEqualsSignKeyword_5, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5());
                      	
                    }

                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6());
                      	
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_126); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0());
                      		
                    }
                    int alt380=2;
                    int LA380_0 = input.LA(1);

                    if ( (LA380_0==GreaterThanSign) ) {
                        alt380=1;
                    }
                    switch (alt380) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_127); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1());
                              			
                            }

                            }
                            break;

                    }

                    GreaterThanSignEqualsSignKeyword_7_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignEqualsSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2());
                      		
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8());
                      	
                    }

                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9());
                      	
                    }

                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSParser.ruleAwaitExpression_return retval = new InternalN4JSParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AwaitExpression_return retval = new InternalN4JSParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AwaitExpression_return retval = new InternalN4JSParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AwaitExpression_return retval = new InternalN4JSParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSParser.rulePromisifyExpression_return retval = new InternalN4JSParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PromisifyExpression_return retval = new InternalN4JSParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm2_PromisifyExpression_return retval = new InternalN4JSParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm3_PromisifyExpression_return retval = new InternalN4JSParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_128); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSParser.ruleExpression_return retval = new InternalN4JSParser.ruleExpression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt383=2;
            int LA383_0 = input.LA(1);

            if ( (LA383_0==Comma) ) {
                alt383=1;
            }
            switch (alt383) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop382:
                    do {
                        int alt382=2;
                        int LA382_0 = input.LA(1);

                        if ( (LA382_0==Comma) ) {
                            alt382=1;
                        }


                        switch (alt382) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop382;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSParser.norm1_Expression_return retval = new InternalN4JSParser.norm1_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt385=2;
            int LA385_0 = input.LA(1);

            if ( (LA385_0==Comma) ) {
                alt385=1;
            }
            switch (alt385) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop384:
                    do {
                        int alt384=2;
                        int LA384_0 = input.LA(1);

                        if ( (LA384_0==Comma) ) {
                            alt384=1;
                        }


                        switch (alt384) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop384;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSParser.norm2_Expression_return retval = new InternalN4JSParser.norm2_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt387=2;
            int LA387_0 = input.LA(1);

            if ( (LA387_0==Comma) ) {
                alt387=1;
            }
            switch (alt387) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop386:
                    do {
                        int alt386=2;
                        int LA386_0 = input.LA(1);

                        if ( (LA386_0==Comma) ) {
                            alt386=1;
                        }


                        switch (alt386) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop386;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSParser.norm3_Expression_return retval = new InternalN4JSParser.norm3_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_33);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt389=2;
            int LA389_0 = input.LA(1);

            if ( (LA389_0==Comma) ) {
                alt389=1;
            }
            switch (alt389) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_33);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2());
                      				
                    }

                    }


                    }
                    loop388:
                    do {
                        int alt388=2;
                        int LA388_0 = input.LA(1);

                        if ( (LA388_0==Comma) ) {
                            alt388=1;
                        }


                        switch (alt388) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_54); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop388;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateLiteral_return retval = new InternalN4JSParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;




        try {
            {
            {
            int alt393=2;
            int LA393_0 = input.LA(1);

            if ( (LA393_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt393=1;
            }
            else if ( (LA393_0==RULE_TEMPLATE_HEAD) ) {
                alt393=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 393, 0, input);

                throw nvae;
            }
            switch (alt393) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_129);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                      					
                    }

                    }


                    }
                    int alt390=2;
                    int LA390_0 = input.LA(1);

                    if ( ((LA390_0>=Intersection && LA390_0<=Implements)||(LA390_0>=Promisify && LA390_0<=Abstract)||(LA390_0>=External && LA390_0<=Function)||(LA390_0>=Private && LA390_0<=Delete)||LA390_0==Public||LA390_0==Static||(LA390_0>=Target && LA390_0<=Await)||LA390_0==Class||(LA390_0>=False && LA390_0<=Super)||LA390_0==Union||(LA390_0>=Yield && LA390_0<=This)||(LA390_0>=From && LA390_0<=Void)||(LA390_0>=Get && LA390_0<=Set)||LA390_0==PlusSignPlusSign||LA390_0==HyphenMinusHyphenMinus||LA390_0==SolidusEqualsSign||LA390_0==As||LA390_0==Of||LA390_0==ExclamationMark||LA390_0==LeftParenthesis||LA390_0==PlusSign||LA390_0==HyphenMinus||LA390_0==Solidus||LA390_0==LessThanSign||(LA390_0>=CommercialAt && LA390_0<=LeftSquareBracket)||LA390_0==LeftCurlyBracket||LA390_0==Tilde||LA390_0==RULE_DOUBLE||(LA390_0>=RULE_HEX_INT && LA390_0<=RULE_LEGACY_OCTAL_INT)||LA390_0==RULE_SCIENTIFIC_INT||LA390_0==RULE_IDENTIFIER||LA390_0==RULE_STRING||(LA390_0>=RULE_TEMPLATE_HEAD && LA390_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA390_0==RULE_INT) ) {
                        alt390=1;
                    }
                    switch (alt390) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_129);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                              					
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_130);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop392:
                    do {
                        int alt392=2;
                        int LA392_0 = input.LA(1);

                        if ( (LA392_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt392=1;
                        }


                        switch (alt392) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_129);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	      						
                    	    }

                    	    }


                    	    }
                    	    int alt391=2;
                    	    int LA391_0 = input.LA(1);

                    	    if ( ((LA391_0>=Intersection && LA391_0<=Implements)||(LA391_0>=Promisify && LA391_0<=Abstract)||(LA391_0>=External && LA391_0<=Function)||(LA391_0>=Private && LA391_0<=Delete)||LA391_0==Public||LA391_0==Static||(LA391_0>=Target && LA391_0<=Await)||LA391_0==Class||(LA391_0>=False && LA391_0<=Super)||LA391_0==Union||(LA391_0>=Yield && LA391_0<=This)||(LA391_0>=From && LA391_0<=Void)||(LA391_0>=Get && LA391_0<=Set)||LA391_0==PlusSignPlusSign||LA391_0==HyphenMinusHyphenMinus||LA391_0==SolidusEqualsSign||LA391_0==As||LA391_0==Of||LA391_0==ExclamationMark||LA391_0==LeftParenthesis||LA391_0==PlusSign||LA391_0==HyphenMinus||LA391_0==Solidus||LA391_0==LessThanSign||(LA391_0>=CommercialAt && LA391_0<=LeftSquareBracket)||LA391_0==LeftCurlyBracket||LA391_0==Tilde||LA391_0==RULE_DOUBLE||(LA391_0>=RULE_HEX_INT && LA391_0<=RULE_LEGACY_OCTAL_INT)||LA391_0==RULE_SCIENTIFIC_INT||LA391_0==RULE_IDENTIFIER||LA391_0==RULE_STRING||(LA391_0>=RULE_TEMPLATE_HEAD && LA391_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA391_0==RULE_INT) ) {
                    	        alt391=1;
                    	    }
                    	    switch (alt391) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_129);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {

                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	              						
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_130);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop392;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_TemplateLiteral_return retval = new InternalN4JSParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;




        try {
            {
            {
            int alt397=2;
            int LA397_0 = input.LA(1);

            if ( (LA397_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt397=1;
            }
            else if ( (LA397_0==RULE_TEMPLATE_HEAD) ) {
                alt397=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 397, 0, input);

                throw nvae;
            }
            switch (alt397) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_129);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0());
                      					
                    }

                    }


                    }
                    int alt394=2;
                    int LA394_0 = input.LA(1);

                    if ( ((LA394_0>=Intersection && LA394_0<=Implements)||(LA394_0>=Promisify && LA394_0<=Abstract)||(LA394_0>=External && LA394_0<=Function)||(LA394_0>=Private && LA394_0<=Delete)||LA394_0==Public||LA394_0==Static||(LA394_0>=Target && LA394_0<=Await)||LA394_0==Class||(LA394_0>=False && LA394_0<=Super)||LA394_0==Union||(LA394_0>=Yield && LA394_0<=This)||(LA394_0>=From && LA394_0<=Void)||(LA394_0>=Get && LA394_0<=Set)||LA394_0==PlusSignPlusSign||LA394_0==HyphenMinusHyphenMinus||LA394_0==SolidusEqualsSign||LA394_0==As||LA394_0==Of||LA394_0==ExclamationMark||LA394_0==LeftParenthesis||LA394_0==PlusSign||LA394_0==HyphenMinus||LA394_0==Solidus||LA394_0==LessThanSign||(LA394_0>=CommercialAt && LA394_0<=LeftSquareBracket)||LA394_0==LeftCurlyBracket||LA394_0==Tilde||LA394_0==RULE_DOUBLE||(LA394_0>=RULE_HEX_INT && LA394_0<=RULE_LEGACY_OCTAL_INT)||LA394_0==RULE_SCIENTIFIC_INT||LA394_0==RULE_IDENTIFIER||LA394_0==RULE_STRING||(LA394_0>=RULE_TEMPLATE_HEAD && LA394_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA394_0==RULE_INT) ) {
                        alt394=1;
                    }
                    switch (alt394) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_129);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1());
                              					
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_130);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop396:
                    do {
                        int alt396=2;
                        int LA396_0 = input.LA(1);

                        if ( (LA396_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt396=1;
                        }


                        switch (alt396) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_129);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      							announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0());
                    	      						
                    	    }

                    	    }


                    	    }
                    	    int alt395=2;
                    	    int LA395_0 = input.LA(1);

                    	    if ( ((LA395_0>=Intersection && LA395_0<=Implements)||(LA395_0>=Promisify && LA395_0<=Abstract)||(LA395_0>=External && LA395_0<=Function)||(LA395_0>=Private && LA395_0<=Delete)||LA395_0==Public||LA395_0==Static||(LA395_0>=Target && LA395_0<=Await)||LA395_0==Class||(LA395_0>=False && LA395_0<=Super)||LA395_0==Union||(LA395_0>=Yield && LA395_0<=This)||(LA395_0>=From && LA395_0<=Void)||(LA395_0>=Get && LA395_0<=Set)||LA395_0==PlusSignPlusSign||LA395_0==HyphenMinusHyphenMinus||LA395_0==SolidusEqualsSign||LA395_0==As||LA395_0==Of||LA395_0==ExclamationMark||LA395_0==LeftParenthesis||LA395_0==PlusSign||LA395_0==HyphenMinus||LA395_0==Solidus||LA395_0==LessThanSign||(LA395_0>=CommercialAt && LA395_0<=LeftSquareBracket)||LA395_0==LeftCurlyBracket||LA395_0==Tilde||LA395_0==RULE_DOUBLE||(LA395_0>=RULE_HEX_INT && LA395_0<=RULE_LEGACY_OCTAL_INT)||LA395_0==RULE_SCIENTIFIC_INT||LA395_0==RULE_IDENTIFIER||LA395_0==RULE_STRING||(LA395_0>=RULE_TEMPLATE_HEAD && LA395_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA395_0==RULE_INT) ) {
                    	        alt395=1;
                    	    }
                    	    switch (alt395) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_129);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {

                    	              							announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1());
                    	              						
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_130);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop396;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);

        Token RightCurlyBracketKeyword=null;


        	setInTemplateSegment();

        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);

        Token RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;



        try {
            {
            {
            {
            {
            RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSParser.ruleTemplateHead_return retval = new InternalN4JSParser.ruleTemplateHead_return();
        retval.start = input.LT(1);

        Token RawValueTEMPLATE_HEADTerminalRuleCall_1_0=null;



        try {
            {
            {
            {
            {
            RawValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(RawValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTail_return retval = new InternalN4JSParser.ruleTemplateTail_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTemplateTailLiteral_return RawValueTemplateTailLiteralParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.start):null), (RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddle_return retval = new InternalN4JSParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTemplateMiddleLiteral_return RawValueTemplateMiddleLiteralParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getRawValueAssignment_1());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLiteral_return retval = new InternalN4JSParser.ruleLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;

        InternalN4JSParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;

        InternalN4JSParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;




        try {
            {
            int alt398=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt398=1;
                }
                break;
            case False:
            case True:
                {
                alt398=2;
                }
                break;
            case RULE_STRING:
                {
                alt398=3;
                }
                break;
            case Null:
                {
                alt398=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt398=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 398, 0, input);

                throw nvae;
            }

            switch (alt398) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNullLiteral_return retval = new InternalN4JSParser.ruleNullLiteral_return();
        retval.start = input.LT(1);

        Token NullKeyword_1=null;



        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBooleanLiteral_return retval = new InternalN4JSParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);

        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;



        try {
            {
            {
            int alt399=2;
            int LA399_0 = input.LA(1);

            if ( (LA399_0==True) ) {
                alt399=1;
            }
            else if ( (LA399_0==False) ) {
                alt399=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 399, 0, input);

                throw nvae;
            }
            switch (alt399) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0());
                      				
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSParser.ruleStringLiteral_return retval = new InternalN4JSParser.ruleStringLiteral_return();
        retval.start = input.LT(1);

        Token ValueSTRINGTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteral_return retval = new InternalN4JSParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;

        InternalN4JSParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;

        InternalN4JSParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;

        InternalN4JSParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;

        InternalN4JSParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;




        try {
            {
            int alt400=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt400=1;
                }
                break;
            case RULE_INT:
                {
                alt400=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt400=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt400=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt400=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt400=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt400=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 400, 0, input);

                throw nvae;
            }

            switch (alt400) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleDoubleLiteral_return retval = new InternalN4JSParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);

        Token ValueDOUBLETerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleIntLiteral_return retval = new InternalN4JSParser.ruleIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueINTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleOctalIntLiteral_return retval = new InternalN4JSParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueOCTAL_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleHexIntLiteral_return retval = new InternalN4JSParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueHEX_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBinaryIntLiteral_return retval = new InternalN4JSParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueBINARY_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleScientificIntLiteral_return retval = new InternalN4JSParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;



        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteralAsString_return retval = new InternalN4JSParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);



        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierOrThis_return retval = new InternalN4JSParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;



        try {
            {
            int alt401=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt401=1;
                }
                break;
            case This:
                {
                alt401=2;
                }
                break;
            case Promisify:
                {
                alt401=3;
                }
                break;
            case Target:
                {
                alt401=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 401, 0, input);

                throw nvae;
            }

            switch (alt401) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationName_return retval = new InternalN4JSParser.ruleAnnotationName_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;



        try {
            {
            int alt402=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt402=1;
                }
                break;
            case This:
                {
                alt402=2;
                }
                break;
            case Target:
                {
                alt402=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 402, 0, input);

                throw nvae;
            }

            switch (alt402) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2());
                      	
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSParser.ruleREGEX_LITERAL_return retval = new InternalN4JSParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);

        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;


        	setInRegularExpression();

        try {
            {
            {
            int alt403=2;
            int LA403_0 = input.LA(1);

            if ( (LA403_0==Solidus) ) {
                alt403=1;
            }
            else if ( (LA403_0==SolidusEqualsSign) ) {
                alt403=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 403, 0, input);

                throw nvae;
            }
            switch (alt403) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1());
                      		
                    }

                    }
                    break;

            }
            int alt404=2;
            int LA404_0 = input.LA(1);

            if ( (LA404_0==RULE_REGEX_TAIL) ) {
                alt404=1;
            }
            switch (alt404) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTailLiteral_return retval = new InternalN4JSParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);



        try {
            {
            int alt405=2;
            int LA405_0 = input.LA(1);

            if ( (LA405_0==RULE_TEMPLATE_END) ) {
                alt405=1;
            }
            switch (alt405) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);



        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSParser.ruleSemi_return retval = new InternalN4JSParser.ruleSemi_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword=null;


        	int marker = input.mark();
        	promoteEOL();

        try {
            int alt406=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt406=1;
                }
                break;
            case EOF:
                {
                alt406=2;
                }
                break;
            case RULE_EOL:
                {
                alt406=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt406=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt406=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 406, 0, input);

                throw nvae;
            }

            switch (alt406) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      	announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword());

                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSParser.ruleNoLineTerminator_return retval = new InternalN4JSParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);

        Token NO_LINE_TERMINATORTerminalRuleCall=null;



        try {
            {
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==RULE_NO_LINE_TERMINATOR) ) {
                alt407=1;
            }
            switch (alt407) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleAnnotation_return retval = new InternalN4JSParser.ruleAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;




        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0());
              	
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return retval = new InternalN4JSParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;




        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0());
              	
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_98);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0());
              			
            }

            }


            }
            int alt410=2;
            alt410 = dfa410.predict(input);
            switch (alt410) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_133); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0());
                      			
                    }

                    }
                    int alt409=2;
                    int LA409_0 = input.LA(1);

                    if ( ((LA409_0>=Intersection && LA409_0<=Constructor)||LA409_0==Promisify||LA409_0==Target||LA409_0==Await||LA409_0==False||LA409_0==Union||LA409_0==This||(LA409_0>=Null && LA409_0<=Void)||LA409_0==SolidusEqualsSign||LA409_0==LeftParenthesis||LA409_0==Solidus||LA409_0==QuestionMark||LA409_0==LeftSquareBracket||LA409_0==LeftCurlyBracket||LA409_0==Tilde||LA409_0==RULE_DOUBLE||(LA409_0>=RULE_HEX_INT && LA409_0<=RULE_LEGACY_OCTAL_INT)||LA409_0==RULE_SCIENTIFIC_INT||LA409_0==RULE_IDENTIFIER||LA409_0==RULE_STRING||LA409_0==RULE_INT) ) {
                        alt409=1;
                    }
                    switch (alt409) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_48);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0());
                              					
                            }

                            }


                            }
                            loop408:
                            do {
                                int alt408=2;
                                int LA408_0 = input.LA(1);

                                if ( (LA408_0==Comma) ) {
                                    alt408=1;
                                }


                                switch (alt408) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_134); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      					announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0());
                            	      				
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_48);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      							announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1());
                            	      						
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop408;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationArgument_return retval = new InternalN4JSParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;




        try {
            {
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==False||LA411_0==Null||LA411_0==True||LA411_0==SolidusEqualsSign||LA411_0==Solidus||LA411_0==RULE_DOUBLE||(LA411_0>=RULE_HEX_INT && LA411_0<=RULE_LEGACY_OCTAL_INT)||LA411_0==RULE_SCIENTIFIC_INT||LA411_0==RULE_STRING||LA411_0==RULE_INT) ) {
                alt411=1;
            }
            else if ( ((LA411_0>=Intersection && LA411_0<=Constructor)||LA411_0==Promisify||LA411_0==Target||LA411_0==Await||LA411_0==Union||LA411_0==This||LA411_0==This_1||(LA411_0>=Type && LA411_0<=Void)||LA411_0==LeftParenthesis||LA411_0==QuestionMark||LA411_0==LeftSquareBracket||LA411_0==LeftCurlyBracket||LA411_0==Tilde||LA411_0==RULE_IDENTIFIER) ) {
                alt411=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 411, 0, input);

                throw nvae;
            }
            switch (alt411) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationList_return retval = new InternalN4JSParser.ruleAnnotationList_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_132); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_135);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2());
              					
            }

            }


            }


            }


            }
            loop412:
            do {
                int alt412=2;
                int LA412_0 = input.LA(1);

                if ( (LA412_0==CommercialAt) ) {
                    alt412=1;
                }


                switch (alt412) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_135);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop412;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleExpressionAnnotationList_return retval = new InternalN4JSParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            int cnt413=0;
            loop413:
            do {
                int alt413=2;
                int LA413_0 = input.LA(1);

                if ( (LA413_0==CommercialAt) ) {
                    alt413=1;
                }


                switch (alt413) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_135);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt413 >= 1 ) break loop413;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(413, input);
                        throw eee;
                }
                cnt413++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            int cnt414=0;
            loop414:
            do {
                int alt414=2;
                int LA414_0 = input.LA(1);

                if ( (LA414_0==CommercialAt) ) {
                    alt414=1;
                }


                switch (alt414) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_135);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt414 >= 1 ) break loop414;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(414, input);
                        throw eee;
                }
                cnt414++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;




        try {
            {
            {
            int cnt415=0;
            loop415:
            do {
                int alt415=2;
                int LA415_0 = input.LA(1);

                if ( (LA415_0==CommercialAt) ) {
                    alt415=1;
                }


                switch (alt415) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_135);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt415 >= 1 ) break loop415;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(415, input);
                        throw eee;
                }
                cnt415++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSParser.ruleTypeReferenceName_return retval = new InternalN4JSParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);

        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;



        try {
            {
            int alt416=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt416=1;
                }
                break;
            case This:
                {
                alt416=2;
                }
                break;
            case Await:
                {
                alt416=3;
                }
                break;
            case Promisify:
                {
                alt416=4;
                }
                break;
            case Target:
                {
                alt416=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt416=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);

                throw nvae;
            }

            switch (alt416) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleQualifiedTypeReferenceName() throws RecognitionException {
        Token FullStopKeyword_1_0=null;



        try {
            {
            {
            match(input,RULE_IDENTIFIER,FOLLOW_136); if (state.failed) return ;
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==FullStop) ) {
                alt417=1;
            }
            switch (alt417) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_137); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(FullStopKeyword_1_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0());
                      		
                    }
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassDeclaration_return retval = new InternalN4JSParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);

        Token ClassKeyword_0_0_2=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_2 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            loop418:
            do {
                int alt418=2;
                int LA418_0 = input.LA(1);

                if ( ((LA418_0>=Protected && LA418_0<=Abstract)||LA418_0==External||(LA418_0>=Private && LA418_0<=Project)||LA418_0==Public||LA418_0==Static||LA418_0==Const) ) {
                    alt418=1;
                }


                switch (alt418) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_7);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop418;
                }
            } while (true);

            ClassKeyword_0_0_2=(Token)match(input,Class,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ClassKeyword_0_0_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2());
              			
            }
            int alt419=2;
            int LA419_0 = input.LA(1);

            if ( (LA419_0==Tilde) ) {
                alt419=1;
            }
            switch (alt419) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_3());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt420=2;
            int LA420_0 = input.LA(1);

            if ( ((LA420_0>=Intersection && LA420_0<=Constructor)||(LA420_0>=Promisify && LA420_0<=Abstract)||LA420_0==External||(LA420_0>=Private && LA420_0<=Project)||LA420_0==Public||LA420_0==Static||LA420_0==Target||(LA420_0>=Async && LA420_0<=Await)||LA420_0==Union||(LA420_0>=Yield && LA420_0<=This)||LA420_0==From||LA420_0==Type||(LA420_0>=Get && LA420_0<=Let)||(LA420_0>=Out && LA420_0<=Set)||LA420_0==As||LA420_0==Of||LA420_0==RULE_IDENTIFIER) ) {
                alt420=1;
            }
            else if ( (LA420_0==Implements) ) {
                int LA420_2 = input.LA(2);

                if ( (LA420_2==Implements||LA420_2==Extends||LA420_2==LessThanSign||LA420_2==LeftCurlyBracket) ) {
                    alt420=1;
                }
            }
            switch (alt420) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_4());
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt421=2;
            int LA421_0 = input.LA(1);

            if ( (LA421_0==LessThanSign) ) {
                alt421=1;
            }
            switch (alt421) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt422=2;
            int LA422_0 = input.LA(1);

            if ( (LA422_0==Implements||LA422_0==Extends) ) {
                alt422=1;
            }
            switch (alt422) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    ClassExtendsClauseParserRuleCall_2=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.start):null), (ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSParser.ruleMembers_return retval = new InternalN4JSParser.ruleMembers_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            loop423:
            do {
                int alt423=2;
                int LA423_0 = input.LA(1);

                if ( ((LA423_0>=Intersection && LA423_0<=With)||(LA423_0>=For && LA423_0<=Var)||(LA423_0>=As && LA423_0<=Of)||LA423_0==LeftParenthesis||LA423_0==Asterisk||LA423_0==LessThanSign||(LA423_0>=QuestionMark && LA423_0<=LeftSquareBracket)||LA423_0==LeftCurlyBracket||LA423_0==Tilde||LA423_0==RULE_DOUBLE||LA423_0==RULE_HEX_INT||LA423_0==RULE_OCTAL_INT||LA423_0==RULE_SCIENTIFIC_INT||LA423_0==RULE_IDENTIFIER||LA423_0==RULE_STRING||LA423_0==RULE_INT) ) {
                    alt423=1;
                }


                switch (alt423) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_92);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop423;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSParser.norm1_Members_return retval = new InternalN4JSParser.norm1_Members_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_92); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            loop424:
            do {
                int alt424=2;
                int LA424_0 = input.LA(1);

                if ( ((LA424_0>=Intersection && LA424_0<=With)||(LA424_0>=For && LA424_0<=Var)||(LA424_0>=As && LA424_0<=Of)||LA424_0==LeftParenthesis||LA424_0==Asterisk||LA424_0==LessThanSign||(LA424_0>=QuestionMark && LA424_0<=LeftSquareBracket)||LA424_0==LeftCurlyBracket||LA424_0==Tilde||LA424_0==RULE_DOUBLE||LA424_0==RULE_HEX_INT||LA424_0==RULE_OCTAL_INT||LA424_0==RULE_SCIENTIFIC_INT||LA424_0==RULE_IDENTIFIER||LA424_0==RULE_STRING||LA424_0==RULE_INT) ) {
                    alt424=1;
                }


                switch (alt424) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_92);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop424;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.ruleClassExtendsClause_return retval = new InternalN4JSParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;




        try {
            {
            int alt428=2;
            int LA428_0 = input.LA(1);

            if ( (LA428_0==Extends) ) {
                alt428=1;
            }
            else if ( (LA428_0==Implements) ) {
                alt428=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 428, 0, input);

                throw nvae;
            }
            switch (alt428) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0());
                      		
                    }
                    int alt427=2;
                    int LA427_0 = input.LA(1);

                    if ( (LA427_0==Void) && (synpred255_InternalN4JSParser())) {
                        alt427=1;
                    }
                    else if ( (LA427_0==This) ) {
                        int LA427_2 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt427=1;
                        }
                        else if ( (true) ) {
                            alt427=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 427, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA427_0==Await) ) {
                        int LA427_3 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt427=1;
                        }
                        else if ( (true) ) {
                            alt427=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 427, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA427_0==Promisify) ) {
                        int LA427_4 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt427=1;
                        }
                        else if ( (true) ) {
                            alt427=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 427, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA427_0==Target) ) {
                        int LA427_5 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt427=1;
                        }
                        else if ( (true) ) {
                            alt427=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 427, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA427_0==RULE_IDENTIFIER) ) {
                        int LA427_6 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt427=1;
                        }
                        else if ( (true) ) {
                            alt427=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 427, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA427_0>=Intersection && LA427_0<=Implements)||(LA427_0>=Interface && LA427_0<=Abstract)||(LA427_0>=External && LA427_0<=Function)||(LA427_0>=Private && LA427_0<=Project)||LA427_0==Public||LA427_0==Static||LA427_0==Async||LA427_0==Class||(LA427_0>=False && LA427_0<=Super)||LA427_0==Union||LA427_0==Yield||(LA427_0>=From && LA427_0<=Type)||(LA427_0>=Get && LA427_0<=Set)||LA427_0==SolidusEqualsSign||LA427_0==As||LA427_0==Of||LA427_0==LeftParenthesis||LA427_0==Solidus||LA427_0==LessThanSign||(LA427_0>=CommercialAt && LA427_0<=LeftSquareBracket)||LA427_0==LeftCurlyBracket||LA427_0==RULE_DOUBLE||(LA427_0>=RULE_HEX_INT && LA427_0<=RULE_LEGACY_OCTAL_INT)||LA427_0==RULE_SCIENTIFIC_INT||LA427_0==RULE_STRING||(LA427_0>=RULE_TEMPLATE_HEAD && LA427_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA427_0==RULE_INT) ) {
                        alt427=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 427, 0, input);

                        throw nvae;
                    }
                    switch (alt427) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_140);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0());
                              						
                            }

                            }


                            }
                            int alt426=2;
                            int LA426_0 = input.LA(1);

                            if ( (LA426_0==Implements||LA426_0==Extends) ) {
                                alt426=1;
                            }
                            switch (alt426) {
                                case 1 :
                                    {
                                    int alt425=2;
                                    int LA425_0 = input.LA(1);

                                    if ( (LA425_0==Implements) ) {
                                        alt425=1;
                                    }
                                    else if ( (LA425_0==Extends) ) {
                                        alt425=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 425, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt425) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_60); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0());
                                              						
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_60); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1());
                                              						
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.norm1_ClassExtendsClause_return retval = new InternalN4JSParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;




        try {
            {
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==Extends) ) {
                alt432=1;
            }
            else if ( (LA432_0==Implements) ) {
                alt432=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 432, 0, input);

                throw nvae;
            }
            switch (alt432) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0());
                      		
                    }
                    int alt431=2;
                    int LA431_0 = input.LA(1);

                    if ( (LA431_0==Void) && (synpred256_InternalN4JSParser())) {
                        alt431=1;
                    }
                    else if ( (LA431_0==This) ) {
                        int LA431_2 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt431=1;
                        }
                        else if ( (true) ) {
                            alt431=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 431, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA431_0==Await) ) {
                        int LA431_3 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt431=1;
                        }
                        else if ( (true) ) {
                            alt431=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 431, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA431_0==Promisify) ) {
                        int LA431_4 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt431=1;
                        }
                        else if ( (true) ) {
                            alt431=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 431, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA431_0==Target) ) {
                        int LA431_5 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt431=1;
                        }
                        else if ( (true) ) {
                            alt431=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 431, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA431_0==RULE_IDENTIFIER) ) {
                        int LA431_6 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt431=1;
                        }
                        else if ( (true) ) {
                            alt431=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 431, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA431_0>=Intersection && LA431_0<=Implements)||(LA431_0>=Interface && LA431_0<=Abstract)||(LA431_0>=External && LA431_0<=Function)||(LA431_0>=Private && LA431_0<=Project)||LA431_0==Public||LA431_0==Static||LA431_0==Async||LA431_0==Class||(LA431_0>=False && LA431_0<=Super)||LA431_0==Union||(LA431_0>=From && LA431_0<=Type)||(LA431_0>=Get && LA431_0<=Set)||LA431_0==SolidusEqualsSign||LA431_0==As||LA431_0==Of||LA431_0==LeftParenthesis||LA431_0==Solidus||LA431_0==LessThanSign||(LA431_0>=CommercialAt && LA431_0<=LeftSquareBracket)||LA431_0==LeftCurlyBracket||LA431_0==RULE_DOUBLE||(LA431_0>=RULE_HEX_INT && LA431_0<=RULE_LEGACY_OCTAL_INT)||LA431_0==RULE_SCIENTIFIC_INT||LA431_0==RULE_STRING||(LA431_0>=RULE_TEMPLATE_HEAD && LA431_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA431_0==RULE_INT) ) {
                        alt431=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 431, 0, input);

                        throw nvae;
                    }
                    switch (alt431) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_140);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0());
                              						
                            }

                            }


                            }
                            int alt430=2;
                            int LA430_0 = input.LA(1);

                            if ( (LA430_0==Implements||LA430_0==Extends) ) {
                                alt430=1;
                            }
                            switch (alt430) {
                                case 1 :
                                    {
                                    int alt429=2;
                                    int LA429_0 = input.LA(1);

                                    if ( (LA429_0==Implements) ) {
                                        alt429=1;
                                    }
                                    else if ( (LA429_0==Extends) ) {
                                        alt429=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 429, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt429) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_60); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0());
                                              						
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_60); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {

                                              							announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1());
                                              						
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleClassImplementsList_return retval = new InternalN4JSParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0_0=null;
        Token ImplementsKeyword_1_0_1=null;
        Token ExtendsKeyword_1_0_2=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_141);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_0());
              			
            }

            }


            }
            loop434:
            do {
                int alt434=2;
                int LA434_0 = input.LA(1);

                if ( (LA434_0==Implements||LA434_0==Extends||LA434_0==Comma) ) {
                    alt434=1;
                }


                switch (alt434) {
            	case 1 :
            	    {
            	    int alt433=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt433=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt433=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt433=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 433, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt433) {
            	        case 1 :
            	            {
            	            CommaKeyword_1_0_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(CommaKeyword_1_0_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0());
            	              			
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_1_0_1=(Token)match(input,Implements,FOLLOW_60); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ImplementsKeyword_1_0_1, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1());
            	              			
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_1_0_2=(Token)match(input,Extends,FOLLOW_60); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ExtendsKeyword_1_0_2, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2());
            	              			
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop434;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassExpression_return retval = new InternalN4JSParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_4 = null;




        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              	
            }
            int alt435=2;
            int LA435_0 = input.LA(1);

            if ( ((LA435_0>=Intersection && LA435_0<=Constructor)||(LA435_0>=Promisify && LA435_0<=Abstract)||LA435_0==External||(LA435_0>=Private && LA435_0<=Project)||LA435_0==Public||LA435_0==Static||LA435_0==Target||(LA435_0>=Async && LA435_0<=Await)||LA435_0==Union||(LA435_0>=Yield && LA435_0<=This)||LA435_0==From||LA435_0==Type||(LA435_0>=Get && LA435_0<=Let)||(LA435_0>=Out && LA435_0<=Set)||LA435_0==As||LA435_0==Of||LA435_0==RULE_IDENTIFIER) ) {
                alt435=1;
            }
            else if ( (LA435_0==Implements) ) {
                int LA435_2 = input.LA(2);

                if ( (LA435_2==Implements||LA435_2==Extends||LA435_2==LeftCurlyBracket) ) {
                    alt435=1;
                }
            }
            switch (alt435) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt436=2;
            int LA436_0 = input.LA(1);

            if ( (LA436_0==Implements||LA436_0==Extends) ) {
                alt436=1;
            }
            switch (alt436) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    ClassExtendsClauseParserRuleCall_3=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSParser.norm1_N4ClassExpression_return retval = new InternalN4JSParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_4 = null;




        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_58); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1());
              	
            }
            int alt437=2;
            int LA437_0 = input.LA(1);

            if ( ((LA437_0>=Intersection && LA437_0<=Constructor)||(LA437_0>=Promisify && LA437_0<=Abstract)||LA437_0==External||(LA437_0>=Private && LA437_0<=Project)||LA437_0==Public||LA437_0==Static||LA437_0==Target||(LA437_0>=Async && LA437_0<=Await)||LA437_0==Union||LA437_0==This||LA437_0==From||LA437_0==Type||(LA437_0>=Get && LA437_0<=Let)||(LA437_0>=Out && LA437_0<=Set)||LA437_0==As||LA437_0==Of||LA437_0==RULE_IDENTIFIER) ) {
                alt437=1;
            }
            else if ( (LA437_0==Implements) ) {
                int LA437_2 = input.LA(2);

                if ( (LA437_2==Implements||LA437_2==Extends||LA437_2==LeftCurlyBracket) ) {
                    alt437=1;
                }
            }
            switch (alt437) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_58);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( (LA438_0==Implements||LA438_0==Extends) ) {
                alt438=1;
            }
            switch (alt438) {
                case 1 :
                    {
                    pushFollow(FOLLOW_58);
                    ClassExtendsClauseParserRuleCall_3=norm1_ClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);

        Token InterfaceKeyword_0_0_2=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_2 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;




        try {
            {
            {
            {
            {
            loop439:
            do {
                int alt439=2;
                int LA439_0 = input.LA(1);

                if ( ((LA439_0>=Protected && LA439_0<=Abstract)||LA439_0==External||(LA439_0>=Private && LA439_0<=Project)||LA439_0==Public||LA439_0==Static||LA439_0==Const) ) {
                    alt439=1;
                }


                switch (alt439) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop439;
                }
            } while (true);

            InterfaceKeyword_0_0_2=(Token)match(input,Interface,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(InterfaceKeyword_0_0_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2());
              			
            }
            int alt440=2;
            int LA440_0 = input.LA(1);

            if ( (LA440_0==Tilde) ) {
                alt440=1;
            }
            switch (alt440) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_57);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_3());
                      					
                    }

                    }


                    }
                    break;

            }
            int alt441=2;
            int LA441_0 = input.LA(1);

            if ( ((LA441_0>=Intersection && LA441_0<=Constructor)||(LA441_0>=Promisify && LA441_0<=Abstract)||LA441_0==External||(LA441_0>=Private && LA441_0<=Project)||LA441_0==Public||LA441_0==Static||LA441_0==Target||(LA441_0>=Async && LA441_0<=Await)||LA441_0==Union||(LA441_0>=Yield && LA441_0<=This)||LA441_0==From||LA441_0==Type||(LA441_0>=Get && LA441_0<=Let)||(LA441_0>=Out && LA441_0<=Set)||LA441_0==As||LA441_0==Of||LA441_0==RULE_IDENTIFIER) ) {
                alt441=1;
            }
            else if ( (LA441_0==Implements) ) {
                int LA441_2 = input.LA(2);

                if ( (LA441_2==Implements||LA441_2==Extends||LA441_2==LessThanSign||LA441_2==LeftCurlyBracket) ) {
                    alt441=1;
                }
            }
            switch (alt441) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_4());
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( (LA442_0==LessThanSign) ) {
                alt442=1;
            }
            switch (alt442) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt443=2;
            int LA443_0 = input.LA(1);

            if ( (LA443_0==Implements||LA443_0==Extends) ) {
                alt443=1;
            }
            switch (alt443) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    InterfaceImplementsListParserRuleCall_2=ruleInterfaceImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.start):null), (InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleInterfaceImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleInterfaceImplementsList_return ruleInterfaceImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleInterfaceImplementsList_return retval = new InternalN4JSParser.ruleInterfaceImplementsList_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0_0=null;
        Token ImplementsKeyword_2_0_1=null;
        Token ExtendsKeyword_2_0_2=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;




        try {
            {
            {
            int alt444=2;
            int LA444_0 = input.LA(1);

            if ( (LA444_0==Extends) ) {
                alt444=1;
            }
            else if ( (LA444_0==Implements) ) {
                alt444=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 444, 0, input);

                throw nvae;
            }
            switch (alt444) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1());
                      		
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_141);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_1());
              			
            }

            }


            }
            loop446:
            do {
                int alt446=2;
                int LA446_0 = input.LA(1);

                if ( (LA446_0==Implements||LA446_0==Extends||LA446_0==Comma) ) {
                    alt446=1;
                }


                switch (alt446) {
            	case 1 :
            	    {
            	    int alt445=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt445=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt445=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt445=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 445, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt445) {
            	        case 1 :
            	            {
            	            CommaKeyword_2_0_0=(Token)match(input,Comma,FOLLOW_60); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(CommaKeyword_2_0_0, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0());
            	              			
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_2_0_1=(Token)match(input,Implements,FOLLOW_60); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ImplementsKeyword_2_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1());
            	              			
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_2_0_2=(Token)match(input,Extends,FOLLOW_60); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(ExtendsKeyword_2_0_2, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2());
            	              			
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_2_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop446;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumDeclaration_return retval = new InternalN4JSParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);

        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            {
            {
            loop447:
            do {
                int alt447=2;
                int LA447_0 = input.LA(1);

                if ( ((LA447_0>=Protected && LA447_0<=Abstract)||LA447_0==External||(LA447_0>=Private && LA447_0<=Project)||LA447_0==Public||LA447_0==Static||LA447_0==Const) ) {
                    alt447=1;
                }


                switch (alt447) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_12);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop447;
                }
            } while (true);

            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_142); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2());
              			
            }
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( ((LA448_0>=Intersection && LA448_0<=Implements)||(LA448_0>=Promisify && LA448_0<=Abstract)||LA448_0==External||(LA448_0>=Private && LA448_0<=Project)||LA448_0==Public||LA448_0==Static||LA448_0==Target||(LA448_0>=Async && LA448_0<=Await)||LA448_0==Union||(LA448_0>=Yield && LA448_0<=This)||LA448_0==From||LA448_0==Type||(LA448_0>=Get && LA448_0<=Let)||(LA448_0>=Out && LA448_0<=Set)||LA448_0==As||LA448_0==Of||LA448_0==RULE_IDENTIFIER) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3());
                      					
                    }

                    }


                    }
                    break;

            }


            }


            }

            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( (LA450_0==Promisify||LA450_0==Target||LA450_0==This||LA450_0==RULE_IDENTIFIER) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop449:
                    do {
                        int alt449=2;
                        int LA449_0 = input.LA(1);

                        if ( (LA449_0==Comma) ) {
                            alt449=1;
                        }


                        switch (alt449) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop449;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumLiteral_return retval = new InternalN4JSParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        Token ValueSTRINGTerminalRuleCall_1_1_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_43);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0());
              			
            }

            }


            }
            int alt451=2;
            int LA451_0 = input.LA(1);

            if ( (LA451_0==Colon) ) {
                alt451=1;
            }
            switch (alt451) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_23); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0());
                      		
                    }
                    {
                    {
                    ValueSTRINGTerminalRuleCall_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ValueSTRINGTerminalRuleCall_1_1_0, grammarAccess.getN4EnumLiteralAccess().getValueAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberDeclaration_return retval = new InternalN4JSParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;




        try {
            {
            int alt452=6;
            alt452 = dfa452.predict(input);
            switch (alt452) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;




        try {
            {
            int alt453=6;
            alt453 = dfa453.predict(input);
            switch (alt453) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_144);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt465=4;
            alt465 = dfa465.predict(input);
            switch (alt465) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop454:
                    do {
                        int alt454=2;
                        int LA454_0 = input.LA(1);

                        if ( ((LA454_0>=Protected && LA454_0<=Abstract)||LA454_0==External||(LA454_0>=Private && LA454_0<=Project)||LA454_0==Public||LA454_0==Static||LA454_0==Const) ) {
                            alt454=1;
                        }


                        switch (alt454) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_145);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop454;
                        }
                    } while (true);

                    pushFollow(FOLLOW_146);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt455=2;
                    alt455 = dfa455.predict(input);
                    switch (alt455) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_97);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt456=2;
                    int LA456_0 = input.LA(1);

                    if ( (LA456_0==Semicolon) ) {
                        alt456=1;
                    }
                    switch (alt456) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop457:
                    do {
                        int alt457=2;
                        int LA457_0 = input.LA(1);

                        if ( ((LA457_0>=Protected && LA457_0<=Abstract)||LA457_0==External||(LA457_0>=Private && LA457_0<=Project)||LA457_0==Public||LA457_0==Static||LA457_0==Const) ) {
                            alt457=1;
                        }


                        switch (alt457) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_147);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop457;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                      							
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    FparFormalParameterParserRuleCall_1_1_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3());
                      			
                    }
                    int alt458=2;
                    alt458 = dfa458.predict(input);
                    switch (alt458) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_97);
                            BodyBlockParserRuleCall_1_1_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt459=2;
                    int LA459_0 = input.LA(1);

                    if ( (LA459_0==Semicolon) ) {
                        alt459=1;
                    }
                    switch (alt459) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop460:
                    do {
                        int alt460=2;
                        alt460 = dfa460.predict(input);
                        switch (alt460) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_144);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop460;
                        }
                    } while (true);
                    int alt461=2;
                    int LA461_0 = input.LA(1);

                    if ( (LA461_0==LessThanSign) ) {
                        alt461=1;
                    }
                    switch (alt461) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt462=2;
                    alt462 = dfa462.predict(input);
                    switch (alt462) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt463=2;
                    int LA463_0 = input.LA(1);

                    if ( (LA463_0==Asterisk) ) {
                        alt463=1;
                    }
                    else if ( ((LA463_0>=Intersection && LA463_0<=With)||(LA463_0>=For && LA463_0<=Var)||(LA463_0>=As && LA463_0<=Of)||LA463_0==LeftSquareBracket||LA463_0==RULE_DOUBLE||LA463_0==RULE_HEX_INT||LA463_0==RULE_OCTAL_INT||LA463_0==RULE_SCIENTIFIC_INT||LA463_0==RULE_IDENTIFIER||LA463_0==RULE_STRING||LA463_0==RULE_INT) ) {
                        alt463=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 463, 0, input);

                        throw nvae;
                    }
                    switch (alt463) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_93);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt464=2;
                    int LA464_0 = input.LA(1);

                    if ( (LA464_0==Semicolon) ) {
                        alt464=1;
                    }
                    switch (alt464) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1_2_0_0_3 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2 = null;

        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_144);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt477=4;
            alt477 = dfa477.predict(input);
            switch (alt477) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop466:
                    do {
                        int alt466=2;
                        int LA466_0 = input.LA(1);

                        if ( ((LA466_0>=Protected && LA466_0<=Abstract)||LA466_0==External||(LA466_0>=Private && LA466_0<=Project)||LA466_0==Public||LA466_0==Static||LA466_0==Const) ) {
                            alt466=1;
                        }


                        switch (alt466) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_145);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop466;
                        }
                    } while (true);

                    pushFollow(FOLLOW_146);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt467=2;
                    alt467 = dfa467.predict(input);
                    switch (alt467) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_97);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt468=2;
                    int LA468_0 = input.LA(1);

                    if ( (LA468_0==Semicolon) ) {
                        alt468=1;
                    }
                    switch (alt468) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop469:
                    do {
                        int alt469=2;
                        int LA469_0 = input.LA(1);

                        if ( ((LA469_0>=Protected && LA469_0<=Abstract)||LA469_0==External||(LA469_0>=Private && LA469_0<=Project)||LA469_0==Public||LA469_0==Static||LA469_0==Const) ) {
                            alt469=1;
                        }


                        switch (alt469) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_147);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop469;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2());
                      					
                    }
                    {
                    {
                    pushFollow(FOLLOW_53);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_1_0_0_3());
                      							
                    }

                    }


                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    FparFormalParameterParserRuleCall_1_1_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2());
                      					
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_146); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3());
                      			
                    }
                    int alt470=2;
                    alt470 = dfa470.predict(input);
                    switch (alt470) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_97);
                            BodyBlockParserRuleCall_1_1_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4());
                              					
                            }

                            }


                            }
                            break;

                    }
                    int alt471=2;
                    int LA471_0 = input.LA(1);

                    if ( (LA471_0==Semicolon) ) {
                        alt471=1;
                    }
                    switch (alt471) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop472:
                    do {
                        int alt472=2;
                        alt472 = dfa472.predict(input);
                        switch (alt472) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_144);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop472;
                        }
                    } while (true);
                    int alt473=2;
                    int LA473_0 = input.LA(1);

                    if ( (LA473_0==LessThanSign) ) {
                        alt473=1;
                    }
                    switch (alt473) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt474=2;
                    alt474 = dfa474.predict(input);
                    switch (alt474) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_96);
                            BogusTypeRefFragmentParserRuleCall_1_2_0_0_3=ruleBogusTypeRefFragment();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_1_2_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_1_2_0_0_3()); 
                            }

                            }
                            break;

                    }
                    int alt475=2;
                    int LA475_0 = input.LA(1);

                    if ( (LA475_0==Asterisk) ) {
                        alt475=1;
                    }
                    else if ( ((LA475_0>=Intersection && LA475_0<=With)||(LA475_0>=For && LA475_0<=Var)||(LA475_0>=As && LA475_0<=Of)||LA475_0==LeftSquareBracket||LA475_0==RULE_DOUBLE||LA475_0==RULE_HEX_INT||LA475_0==RULE_OCTAL_INT||LA475_0==RULE_SCIENTIFIC_INT||LA475_0==RULE_IDENTIFIER||LA475_0==RULE_STRING||LA475_0==RULE_INT) ) {
                        alt475=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 475, 0, input);

                        throw nvae;
                    }
                    switch (alt475) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce(GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_4_0_0_0());
                              									
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_42);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_0_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_95);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_93);
                            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              										announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getDeclaredNameAssignment_1_2_0_0_4_1_1());
                              									
                            }

                            }


                            }
                            {
                            pushFollow(FOLLOW_97);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt476=2;
                    int LA476_0 = input.LA(1);

                    if ( (LA476_0==Semicolon) ) {
                        alt476=1;
                    }
                    switch (alt476) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1());
                              				
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;




        try {
            {
            {
            loop478:
            do {
                int alt478=2;
                alt478 = dfa478.predict(input);
                switch (alt478) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_95);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop478;
                }
            } while (true);
            int alt479=2;
            alt479 = dfa479.predict(input);
            switch (alt479) {
                case 1 :
                    {
                    pushFollow(FOLLOW_95);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_148);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }
            int alt480=2;
            int LA480_0 = input.LA(1);

            if ( (LA480_0==Colon) ) {
                alt480=1;
            }
            switch (alt480) {
                case 1 :
                    {
                    pushFollow(FOLLOW_149);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt481=2;
            int LA481_0 = input.LA(1);

            if ( (LA481_0==EqualsSign) ) {
                alt481=1;
            }
            switch (alt481) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_4_1_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_4_0=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_1 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_3 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;




        try {
            {
            {
            loop482:
            do {
                int alt482=2;
                alt482 = dfa482.predict(input);
                switch (alt482) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_95);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop482;
                }
            } while (true);
            int alt483=2;
            alt483 = dfa483.predict(input);
            switch (alt483) {
                case 1 :
                    {
                    pushFollow(FOLLOW_95);
                    BogusTypeRefFragmentParserRuleCall_1=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.start):null), (BogusTypeRefFragmentParserRuleCall_1!=null?((Token)BogusTypeRefFragmentParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getBogusTypeRefFragmentParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_148);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }
            int alt484=2;
            int LA484_0 = input.LA(1);

            if ( (LA484_0==Colon) ) {
                alt484=1;
            }
            switch (alt484) {
                case 1 :
                    {
                    pushFollow(FOLLOW_149);
                    ColonSepTypeRefParserRuleCall_3=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.start):null), (ColonSepTypeRefParserRuleCall_3!=null?((Token)ColonSepTypeRefParserRuleCall_3.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;

            }
            int alt485=2;
            int LA485_0 = input.LA(1);

            if ( (LA485_0==EqualsSign) ) {
                alt485=1;
            }
            switch (alt485) {
                case 1 :
                    {
                    EqualsSignKeyword_4_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(EqualsSignKeyword_4_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_4_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExpressionExpressionParserRuleCall_4_1_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.start):null), (ExpressionExpressionParserRuleCall_4_1_0!=null?((Token)ExpressionExpressionParserRuleCall_4_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_4_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getFieldDeclarationImplAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4FieldDeclaration_return retval = new InternalN4JSParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;




        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MethodDeclaration_return retval = new InternalN4JSParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;




        try {
            {
            {
            {
            {
            loop486:
            do {
                int alt486=2;
                alt486 = dfa486.predict(input);
                switch (alt486) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop486;
                }
            } while (true);
            int alt487=2;
            int LA487_0 = input.LA(1);

            if ( (LA487_0==LessThanSign) ) {
                alt487=1;
            }
            switch (alt487) {
                case 1 :
                    {
                    pushFollow(FOLLOW_96);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt488=2;
            alt488 = dfa488.predict(input);
            switch (alt488) {
                case 1 :
                    {
                    pushFollow(FOLLOW_96);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt489=2;
            int LA489_0 = input.LA(1);

            if ( (LA489_0==Asterisk) ) {
                alt489=1;
            }
            else if ( ((LA489_0>=Intersection && LA489_0<=With)||(LA489_0>=For && LA489_0<=Var)||(LA489_0>=As && LA489_0<=Of)||LA489_0==LeftSquareBracket||LA489_0==RULE_DOUBLE||LA489_0==RULE_HEX_INT||LA489_0==RULE_OCTAL_INT||LA489_0==RULE_SCIENTIFIC_INT||LA489_0==RULE_IDENTIFIER||LA489_0==RULE_STRING||LA489_0==RULE_INT) ) {
                alt489=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 489, 0, input);

                throw nvae;
            }
            switch (alt489) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt490=2;
            int LA490_0 = input.LA(1);

            if ( (LA490_0==Semicolon) ) {
                alt490=1;
            }
            switch (alt490) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_4_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0_0_3 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2 = null;




        try {
            {
            {
            {
            {
            loop491:
            do {
                int alt491=2;
                alt491 = dfa491.predict(input);
                switch (alt491) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop491;
                }
            } while (true);
            int alt492=2;
            int LA492_0 = input.LA(1);

            if ( (LA492_0==LessThanSign) ) {
                alt492=1;
            }
            switch (alt492) {
                case 1 :
                    {
                    pushFollow(FOLLOW_96);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt493=2;
            alt493 = dfa493.predict(input);
            switch (alt493) {
                case 1 :
                    {
                    pushFollow(FOLLOW_96);
                    BogusTypeRefFragmentParserRuleCall_0_0_3=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.start):null), (BogusTypeRefFragmentParserRuleCall_0_0_3!=null?((Token)BogusTypeRefFragmentParserRuleCall_0_0_3.stop):null), grammarAccess.getN4MethodDeclarationAccess().getBogusTypeRefFragmentParserRuleCall_0_0_3()); 
                    }

                    }
                    break;

            }
            int alt494=2;
            int LA494_0 = input.LA(1);

            if ( (LA494_0==Asterisk) ) {
                alt494=1;
            }
            else if ( ((LA494_0>=Intersection && LA494_0<=With)||(LA494_0>=For && LA494_0<=Var)||(LA494_0>=As && LA494_0<=Of)||LA494_0==LeftSquareBracket||LA494_0==RULE_DOUBLE||LA494_0==RULE_HEX_INT||LA494_0==RULE_OCTAL_INT||LA494_0==RULE_SCIENTIFIC_INT||LA494_0==RULE_IDENTIFIER||LA494_0==RULE_STRING||LA494_0==RULE_INT) ) {
                alt494=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 494, 0, input);

                throw nvae;
            }
            switch (alt494) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_4_0_0_0=(Token)match(input,Asterisk,FOLLOW_95); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce(GeneratorAsteriskKeyword_0_0_4_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_4_0_0_0());
                      							
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_42);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_0_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_0_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_95);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_4_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_93);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      								announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_4_1_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getDeclaredNameAssignment_0_0_4_1_1());
                      							
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_97);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_4_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt495=2;
            int LA495_0 = input.LA(1);

            if ( (LA495_0==Semicolon) ) {
                alt495=1;
            }
            switch (alt495) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_97);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt496=2;
            int LA496_0 = input.LA(1);

            if ( (LA496_0==Semicolon) ) {
                alt496=1;
            }
            switch (alt496) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_97);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt497=2;
            int LA497_0 = input.LA(1);

            if ( (LA497_0==Semicolon) ) {
                alt497=1;
            }
            switch (alt497) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsAndBody_return retval = new InternalN4JSParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_150);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt498=2;
            int LA498_0 = input.LA(1);

            if ( (LA498_0==LeftCurlyBracket) && (synpred287_InternalN4JSParser())) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_150);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt499=2;
            int LA499_0 = input.LA(1);

            if ( (LA499_0==LeftCurlyBracket) && (synpred288_InternalN4JSParser())) {
                alt499=1;
            }
            switch (alt499) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_151);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt500=2;
            int LA500_0 = input.LA(1);

            if ( (LA500_0==Colon) ) {
                alt500=1;
            }
            switch (alt500) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_150);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            int alt501=2;
            alt501 = dfa501.predict(input);
            switch (alt501) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_151);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt502=2;
            int LA502_0 = input.LA(1);

            if ( (LA502_0==Colon) ) {
                alt502=1;
            }
            switch (alt502) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_150);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }
            int alt503=2;
            alt503 = dfa503.predict(input);
            switch (alt503) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2());
                      			
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4GetterDeclaration_return retval = new InternalN4JSParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            loop504:
            do {
                int alt504=2;
                int LA504_0 = input.LA(1);

                if ( ((LA504_0>=Protected && LA504_0<=Abstract)||LA504_0==External||(LA504_0>=Private && LA504_0<=Project)||LA504_0==Public||LA504_0==Static||LA504_0==Const) ) {
                    alt504=1;
                }


                switch (alt504) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_145);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop504;
                }
            } while (true);

            pushFollow(FOLLOW_146);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt505=2;
            alt505 = dfa505.predict(input);
            switch (alt505) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_97);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt506=2;
            int LA506_0 = input.LA(1);

            if ( (LA506_0==Semicolon) ) {
                alt506=1;
            }
            switch (alt506) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            loop507:
            do {
                int alt507=2;
                int LA507_0 = input.LA(1);

                if ( ((LA507_0>=Protected && LA507_0<=Abstract)||LA507_0==External||(LA507_0>=Private && LA507_0<=Project)||LA507_0==Public||LA507_0==Static||LA507_0==Const) ) {
                    alt507=1;
                }


                switch (alt507) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_145);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop507;
                }
            } while (true);

            pushFollow(FOLLOW_146);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt508=2;
            alt508 = dfa508.predict(input);
            switch (alt508) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_97);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt509=2;
            int LA509_0 = input.LA(1);

            if ( (LA509_0==Semicolon) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSParser.ruleGetterHeader_return retval = new InternalN4JSParser.ruleGetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;




        try {
            {
            {
            int alt510=2;
            int LA510_0 = input.LA(1);

            if ( ((LA510_0>=Intersection && LA510_0<=Constructor)||LA510_0==Promisify||LA510_0==Target||LA510_0==Await||LA510_0==Union||LA510_0==This||LA510_0==This_1||(LA510_0>=Type && LA510_0<=Void)||LA510_0==QuestionMark||LA510_0==LeftCurlyBracket||LA510_0==Tilde||LA510_0==RULE_IDENTIFIER) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    pushFollow(FOLLOW_152);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_68); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
              	
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
              	
            }
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==Colon) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSParser.norm1_GetterHeader_return retval = new InternalN4JSParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleBogusTypeRefFragment_return BogusTypeRefFragmentParserRuleCall_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_5 = null;




        try {
            {
            {
            int alt512=2;
            int LA512_0 = input.LA(1);

            if ( ((LA512_0>=Intersection && LA512_0<=Constructor)||LA512_0==Promisify||LA512_0==Target||LA512_0==Await||LA512_0==Union||LA512_0==This||LA512_0==This_1||(LA512_0>=Type && LA512_0<=Void)||LA512_0==QuestionMark||LA512_0==LeftCurlyBracket||LA512_0==Tilde||LA512_0==RULE_IDENTIFIER) ) {
                alt512=1;
            }
            switch (alt512) {
                case 1 :
                    {
                    pushFollow(FOLLOW_152);
                    BogusTypeRefFragmentParserRuleCall_0=ruleBogusTypeRefFragment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.start):null), (BogusTypeRefFragmentParserRuleCall_0!=null?((Token)BogusTypeRefFragmentParserRuleCall_0.stop):null), grammarAccess.getGetterHeaderAccess().getBogusTypeRefFragmentParserRuleCall_0()); 
                    }

                    }
                    break;

            }

            GetKeyword_1=(Token)match(input,Get,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(GetKeyword_1, grammarAccess.getGetterHeaderAccess().getGetKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_2_0.stop):null), grammarAccess.getGetterHeaderAccess().getDeclaredNameAssignment_2());
              			
            }

            }


            }

            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_68); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_3());
              	
            }
            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_4, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_4());
              	
            }
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==Colon) ) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_5=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.start):null), (ColonSepTypeRefParserRuleCall_5!=null?((Token)ColonSepTypeRefParserRuleCall_5.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4SetterDeclaration_return retval = new InternalN4JSParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;




        try {
            {
            {
            {
            {
            loop514:
            do {
                int alt514=2;
                int LA514_0 = input.LA(1);

                if ( ((LA514_0>=Protected && LA514_0<=Abstract)||LA514_0==External||(LA514_0>=Private && LA514_0<=Project)||LA514_0==Public||LA514_0==Static||LA514_0==Const) ) {
                    alt514=1;
                }


                switch (alt514) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_147);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop514;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              			
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
              					
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3());
              	
            }
            int alt515=2;
            alt515 = dfa515.predict(input);
            switch (alt515) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_97);
                    BodyBlockParserRuleCall_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==Semicolon) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_4_0 = null;




        try {
            {
            {
            {
            {
            loop517:
            do {
                int alt517=2;
                int LA517_0 = input.LA(1);

                if ( ((LA517_0>=Protected && LA517_0<=Abstract)||LA517_0==External||(LA517_0>=Private && LA517_0<=Project)||LA517_0==Public||LA517_0==Static||LA517_0==Const) ) {
                    alt517=1;
                }


                switch (alt517) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_147);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop517;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_95); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2());
              			
            }
            {
            {
            pushFollow(FOLLOW_53);
            DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getDeclaredNameAssignment_0_0_3());
              					
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_49); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_146); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3());
              	
            }
            int alt518=2;
            alt518 = dfa518.predict(input);
            switch (alt518) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_97);
                    BodyBlockParserRuleCall_4_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt519=2;
            int LA519_0 = input.LA(1);

            if ( (LA519_0==Semicolon) ) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleBindingPattern_return retval = new InternalN4JSParser.ruleBindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;




        try {
            {
            int alt520=2;
            int LA520_0 = input.LA(1);

            if ( (LA520_0==LeftCurlyBracket) ) {
                alt520=1;
            }
            else if ( (LA520_0==LeftSquareBracket) ) {
                alt520=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 520, 0, input);

                throw nvae;
            }
            switch (alt520) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_BindingPattern_return retval = new InternalN4JSParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;




        try {
            {
            int alt521=2;
            int LA521_0 = input.LA(1);

            if ( (LA521_0==LeftCurlyBracket) ) {
                alt521=1;
            }
            else if ( (LA521_0==LeftSquareBracket) ) {
                alt521=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 521, 0, input);

                throw nvae;
            }
            switch (alt521) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleObjectBindingPattern_return retval = new InternalN4JSParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt523=2;
            int LA523_0 = input.LA(1);

            if ( ((LA523_0>=Intersection && LA523_0<=With)||(LA523_0>=For && LA523_0<=Var)||(LA523_0>=As && LA523_0<=Of)||(LA523_0>=CommercialAt && LA523_0<=LeftSquareBracket)||LA523_0==RULE_DOUBLE||LA523_0==RULE_HEX_INT||LA523_0==RULE_OCTAL_INT||LA523_0==RULE_SCIENTIFIC_INT||LA523_0==RULE_IDENTIFIER||LA523_0==RULE_STRING||LA523_0==RULE_INT) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop522:
                    do {
                        int alt522=2;
                        int LA522_0 = input.LA(1);

                        if ( (LA522_0==Comma) ) {
                            alt522=1;
                        }


                        switch (alt522) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_154); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop522;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_153); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt525=2;
            int LA525_0 = input.LA(1);

            if ( ((LA525_0>=Intersection && LA525_0<=With)||(LA525_0>=For && LA525_0<=Var)||(LA525_0>=As && LA525_0<=Of)||(LA525_0>=CommercialAt && LA525_0<=LeftSquareBracket)||LA525_0==RULE_DOUBLE||LA525_0==RULE_HEX_INT||LA525_0==RULE_OCTAL_INT||LA525_0==RULE_SCIENTIFIC_INT||LA525_0==RULE_IDENTIFIER||LA525_0==RULE_STRING||LA525_0==RULE_INT) ) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0());
                      				
                    }

                    }


                    }
                    loop524:
                    do {
                        int alt524=2;
                        int LA524_0 = input.LA(1);

                        if ( (LA524_0==Comma) ) {
                            alt524=1;
                        }


                        switch (alt524) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_154); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop524;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleArrayBindingPattern_return retval = new InternalN4JSParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop526:
            do {
                int alt526=2;
                int LA526_0 = input.LA(1);

                if ( (LA526_0==Comma) ) {
                    alt526=1;
                }


                switch (alt526) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop526;
                }
            } while (true);
            int alt531=2;
            int LA531_0 = input.LA(1);

            if ( ((LA531_0>=Intersection && LA531_0<=Implements)||(LA531_0>=Promisify && LA531_0<=Abstract)||LA531_0==External||(LA531_0>=Private && LA531_0<=Project)||LA531_0==Public||LA531_0==Static||LA531_0==Target||(LA531_0>=Async && LA531_0<=Await)||LA531_0==Union||(LA531_0>=Yield && LA531_0<=This)||LA531_0==From||LA531_0==Type||LA531_0==FullStopFullStopFullStop||(LA531_0>=Get && LA531_0<=Let)||(LA531_0>=Out && LA531_0<=Set)||LA531_0==As||LA531_0==Of||(LA531_0>=CommercialAt && LA531_0<=LeftSquareBracket)||LA531_0==LeftCurlyBracket||LA531_0==RULE_IDENTIFIER) ) {
                alt531=1;
            }
            switch (alt531) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop528:
                    do {
                        int alt528=2;
                        alt528 = dfa528.predict(input);
                        switch (alt528) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop527:
                    	    do {
                    	        int alt527=2;
                    	        int LA527_0 = input.LA(1);

                    	        if ( (LA527_0==Comma) ) {
                    	            alt527=1;
                    	        }


                    	        switch (alt527) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_156);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop527;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_90);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop528;
                        }
                    } while (true);
                    int alt530=2;
                    int LA530_0 = input.LA(1);

                    if ( (LA530_0==Comma) ) {
                        alt530=1;
                    }
                    switch (alt530) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_90); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              			
                            }
                            loop529:
                            do {
                                int alt529=2;
                                int LA529_0 = input.LA(1);

                                if ( (LA529_0==Comma) ) {
                                    alt529=1;
                                }


                                switch (alt529) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_90);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop529;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;




        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_155); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1());
              	
            }
            loop532:
            do {
                int alt532=2;
                int LA532_0 = input.LA(1);

                if ( (LA532_0==Comma) ) {
                    alt532=1;
                }


                switch (alt532) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      				announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2());
            	      			
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop532;
                }
            } while (true);
            int alt537=2;
            int LA537_0 = input.LA(1);

            if ( ((LA537_0>=Intersection && LA537_0<=Implements)||(LA537_0>=Promisify && LA537_0<=Abstract)||LA537_0==External||(LA537_0>=Private && LA537_0<=Project)||LA537_0==Public||LA537_0==Static||LA537_0==Target||(LA537_0>=Async && LA537_0<=Await)||LA537_0==Union||LA537_0==This||LA537_0==From||LA537_0==Type||LA537_0==FullStopFullStopFullStop||(LA537_0>=Get && LA537_0<=Let)||(LA537_0>=Out && LA537_0<=Set)||LA537_0==As||LA537_0==Of||(LA537_0>=CommercialAt && LA537_0<=LeftSquareBracket)||LA537_0==LeftCurlyBracket||LA537_0==RULE_IDENTIFIER) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0());
                      				
                    }

                    }


                    }
                    loop534:
                    do {
                        int alt534=2;
                        alt534 = dfa534.predict(input);
                        switch (alt534) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_156); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0());
                    	      			
                    	    }
                    	    loop533:
                    	    do {
                    	        int alt533=2;
                    	        int LA533_0 = input.LA(1);

                    	        if ( (LA533_0==Comma) ) {
                    	            alt533=1;
                    	        }


                    	        switch (alt533) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_156);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {

                    	    	      						announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1());
                    	    	      					
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop533;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_90);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop534;
                        }
                    } while (true);
                    int alt536=2;
                    int LA536_0 = input.LA(1);

                    if ( (LA536_0==Comma) ) {
                        alt536=1;
                    }
                    switch (alt536) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_90); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0());
                              			
                            }
                            loop535:
                            do {
                                int alt535=2;
                                int LA535_0 = input.LA(1);

                                if ( (LA535_0==Comma) ) {
                                    alt535=1;
                                }


                                switch (alt535) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_90);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {

                            	      						announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1());
                            	      					
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop535;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSParser.ruleBindingProperty_return retval = new InternalN4JSParser.ruleBindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;




        try {
            {
            int alt538=2;
            alt538 = dfa538.predict(input);
            switch (alt538) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_85);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                      						
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSParser.norm1_BindingProperty_return retval = new InternalN4JSParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0 = null;

        InternalN4JSParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;




        try {
            {
            int alt539=2;
            alt539 = dfa539.predict(input);
            switch (alt539) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_85);
                    DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.start):null), (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0!=null?((Token)DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getDeclaredNameAssignment_0_0_0_0());
                      						
                    }

                    }


                    }

                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSParser.ruleSingleNameBinding_return retval = new InternalN4JSParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm1_SingleNameBinding_return retval = new InternalN4JSParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;




        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {

              			announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment());
              		
            }

            }


            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingElement_return retval = new InternalN4JSParser.ruleBindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;




        try {
            {
            int alt541=2;
            int LA541_0 = input.LA(1);

            if ( (LA541_0==LeftCurlyBracket) && (synpred305_InternalN4JSParser())) {
                alt541=1;
            }
            else if ( (LA541_0==LeftSquareBracket) && (synpred305_InternalN4JSParser())) {
                alt541=1;
            }
            else if ( ((LA541_0>=Intersection && LA541_0<=Implements)||(LA541_0>=Promisify && LA541_0<=Abstract)||LA541_0==External||(LA541_0>=Private && LA541_0<=Project)||LA541_0==Public||LA541_0==Static||LA541_0==Target||(LA541_0>=Async && LA541_0<=Await)||LA541_0==Union||(LA541_0>=Yield && LA541_0<=This)||LA541_0==From||LA541_0==Type||(LA541_0>=Get && LA541_0<=Let)||(LA541_0>=Out && LA541_0<=Set)||LA541_0==As||LA541_0==Of||LA541_0==CommercialAt||LA541_0==RULE_IDENTIFIER) ) {
                alt541=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 541, 0, input);

                throw nvae;
            }
            switch (alt541) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0());
                      					
                    }

                    }


                    }


                    }
                    int alt540=2;
                    int LA540_0 = input.LA(1);

                    if ( (LA540_0==EqualsSign) ) {
                        alt540=1;
                    }
                    switch (alt540) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0());
                              			
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElement_return retval = new InternalN4JSParser.norm1_BindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;




        try {
            {
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( (LA543_0==LeftCurlyBracket) && (synpred306_InternalN4JSParser())) {
                alt543=1;
            }
            else if ( (LA543_0==LeftSquareBracket) && (synpred306_InternalN4JSParser())) {
                alt543=1;
            }
            else if ( ((LA543_0>=Intersection && LA543_0<=Implements)||(LA543_0>=Promisify && LA543_0<=Abstract)||LA543_0==External||(LA543_0>=Private && LA543_0<=Project)||LA543_0==Public||LA543_0==Static||LA543_0==Target||(LA543_0>=Async && LA543_0<=Await)||LA543_0==Union||LA543_0==This||LA543_0==From||LA543_0==Type||(LA543_0>=Get && LA543_0<=Let)||(LA543_0>=Out && LA543_0<=Set)||LA543_0==As||LA543_0==Of||LA543_0==CommercialAt||LA543_0==RULE_IDENTIFIER) ) {
                alt543=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 543, 0, input);

                throw nvae;
            }
            switch (alt543) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0());
                      					
                    }

                    }


                    }


                    }
                    int alt542=2;
                    int LA542_0 = input.LA(1);

                    if ( (LA542_0==EqualsSign) ) {
                        alt542=1;
                    }
                    switch (alt542) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              				announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0());
                              			
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              						announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1());
                              					
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingRestElement_return retval = new InternalN4JSParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt544=2;
            int LA544_0 = input.LA(1);

            if ( (LA544_0==FullStopFullStopFullStop) ) {
                alt544=1;
            }
            switch (alt544) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt546=2;
            int LA546_0 = input.LA(1);

            if ( (LA546_0==LeftCurlyBracket) && (synpred307_InternalN4JSParser())) {
                alt546=1;
            }
            else if ( (LA546_0==LeftSquareBracket) && (synpred307_InternalN4JSParser())) {
                alt546=1;
            }
            else if ( ((LA546_0>=Intersection && LA546_0<=Implements)||(LA546_0>=Promisify && LA546_0<=Abstract)||LA546_0==External||(LA546_0>=Private && LA546_0<=Project)||LA546_0==Public||LA546_0==Static||LA546_0==Target||(LA546_0>=Async && LA546_0<=Await)||LA546_0==Union||(LA546_0>=Yield && LA546_0<=This)||LA546_0==From||LA546_0==Type||(LA546_0>=Get && LA546_0<=Let)||(LA546_0>=Out && LA546_0<=Set)||LA546_0==As||LA546_0==Of||LA546_0==CommercialAt||LA546_0==RULE_IDENTIFIER) ) {
                alt546=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 546, 0, input);

                throw nvae;
            }
            switch (alt546) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0());
                      						
                    }

                    }


                    }


                    }
                    int alt545=2;
                    int LA545_0 = input.LA(1);

                    if ( (LA545_0==EqualsSign) ) {
                        alt545=1;
                    }
                    switch (alt545) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingRestElement_return retval = new InternalN4JSParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;




        try {
            {
            {
            int alt547=2;
            int LA547_0 = input.LA(1);

            if ( (LA547_0==FullStopFullStopFullStop) ) {
                alt547=1;
            }
            switch (alt547) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_30); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt549=2;
            int LA549_0 = input.LA(1);

            if ( (LA549_0==LeftCurlyBracket) && (synpred308_InternalN4JSParser())) {
                alt549=1;
            }
            else if ( (LA549_0==LeftSquareBracket) && (synpred308_InternalN4JSParser())) {
                alt549=1;
            }
            else if ( ((LA549_0>=Intersection && LA549_0<=Implements)||(LA549_0>=Promisify && LA549_0<=Abstract)||LA549_0==External||(LA549_0>=Private && LA549_0<=Project)||LA549_0==Public||LA549_0==Static||LA549_0==Target||(LA549_0>=Async && LA549_0<=Await)||LA549_0==Union||LA549_0==This||LA549_0==From||LA549_0==Type||(LA549_0>=Get && LA549_0<=Let)||(LA549_0>=Out && LA549_0<=Set)||LA549_0==As||LA549_0==Of||LA549_0==CommercialAt||LA549_0==RULE_IDENTIFIER) ) {
                alt549=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 549, 0, input);

                throw nvae;
            }
            switch (alt549) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_62);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0());
                      						
                    }

                    }


                    }


                    }
                    int alt548=2;
                    int LA548_0 = input.LA(1);

                    if ( (LA548_0==EqualsSign) ) {
                        alt548=1;
                    }
                    switch (alt548) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_54); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0());
                              				
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              							announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1());
                              						
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSParser.ruleElision_return retval = new InternalN4JSParser.ruleElision_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;



        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralOrComputedPropertyName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;




        try {
            {
            int alt550=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt550=1;
                }
                break;
            case RULE_STRING:
                {
                alt550=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt550=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt550=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 550, 0, input);

                throw nvae;
            }

            switch (alt550) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_106);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                      				
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token LiteralNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return LiteralNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return LiteralNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0 = null;




        try {
            {
            int alt551=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Async:
            case Await:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Out:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt551=1;
                }
                break;
            case RULE_STRING:
                {
                alt551=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt551=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt551=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 551, 0, input);

                throw nvae;
            }

            switch (alt551) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.start):null), (LiteralNameIdentifierNameParserRuleCall_0_0!=null?((Token)LiteralNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_0());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    LiteralNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LiteralNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_1());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LiteralNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (LiteralNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)LiteralNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getLiteralNameAssignment_2());
                      			
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_54); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_106);
                    ExpressionAssignmentExpressionParserRuleCall_3_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getExpressionAssignment_3_1());
                      				
                    }

                    }


                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeRef_return retval = new InternalN4JSParser.ruleTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall = null;




        try {
            {
            pushFollow(FOLLOW_2);
            UnionTypeExpressionParserRuleCall=ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.start):null), (UnionTypeExpressionParserRuleCall!=null?((Token)UnionTypeExpressionParserRuleCall.stop):null), grammarAccess.getTypeRefAccess().getUnionTypeExpressionParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnionTypeExpression_return ruleUnionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnionTypeExpression_return retval = new InternalN4JSParser.ruleUnionTypeExpression_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword_1_1_0=null;
        InternalN4JSParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleIntersectionTypeExpression_return TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_119);
            IntersectionTypeExpressionParserRuleCall_0=ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.start):null), (IntersectionTypeExpressionParserRuleCall_0!=null?((Token)IntersectionTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getIntersectionTypeExpressionParserRuleCall_0()); 
            }
            int alt553=2;
            int LA553_0 = input.LA(1);

            if ( (LA553_0==VerticalLine) ) {
                alt553=1;
            }
            switch (alt553) {
                case 1 :
                    {
                    int cnt552=0;
                    loop552:
                    do {
                        int alt552=2;
                        int LA552_0 = input.LA(1);

                        if ( (LA552_0==VerticalLine) ) {
                            alt552=1;
                        }


                        switch (alt552) {
                    	case 1 :
                    	    {
                    	    VerticalLineKeyword_1_1_0=(Token)match(input,VerticalLine,FOLLOW_44); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(VerticalLineKeyword_1_1_0, grammarAccess.getUnionTypeExpressionAccess().getVerticalLineKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_119);
                    	    TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0=ruleIntersectionTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsIntersectionTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt552 >= 1 ) break loop552;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(552, input);
                                throw eee;
                        }
                        cnt552++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword_1_1_0=null;
        InternalN4JSParser.rulePrimaryTypeExpression_return PrimaryTypeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.rulePrimaryTypeExpression_return TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            pushFollow(FOLLOW_61);
            PrimaryTypeExpressionParserRuleCall_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.start):null), (PrimaryTypeExpressionParserRuleCall_0!=null?((Token)PrimaryTypeExpressionParserRuleCall_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getPrimaryTypeExpressionParserRuleCall_0()); 
            }
            int alt555=2;
            int LA555_0 = input.LA(1);

            if ( (LA555_0==Ampersand) ) {
                alt555=1;
            }
            switch (alt555) {
                case 1 :
                    {
                    int cnt554=0;
                    loop554:
                    do {
                        int alt554=2;
                        int LA554_0 = input.LA(1);

                        if ( (LA554_0==Ampersand) ) {
                            alt554=1;
                        }


                        switch (alt554) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_1_0=(Token)match(input,Ampersand,FOLLOW_44); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(AmpersandKeyword_1_1_0, grammarAccess.getIntersectionTypeExpressionAccess().getAmpersandKeyword_1_1_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_61);
                    	    TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0=rulePrimaryTypeExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.start):null), (TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0!=null?((Token)TypeRefsPrimaryTypeExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_1_1_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    if ( cnt554 >= 1 ) break loop554;
                    	    if (state.backtracking>0) {state.failed=true; return retval;}
                                EarlyExitException eee =
                                    new EarlyExitException(554, input);
                                throw eee;
                        }
                        cnt554++;
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class rulePrimaryTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryTypeExpression_return rulePrimaryTypeExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryTypeExpression_return retval = new InternalN4JSParser.rulePrimaryTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_1=null;
        Token RightParenthesisKeyword_0_0_0_3=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_0_4=null;
        Token LeftParenthesisKeyword_3_0=null;
        Token RightParenthesisKeyword_3_2=null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_0_0_0_2 = null;

        InternalN4JSParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_3_1 = null;




        try {
            {
            int alt556=4;
            alt556 = dfa556.predict(input);
            switch (alt556) {
                case 1 :
                    {
                    {
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_1=(Token)match(input,LeftParenthesis,FOLLOW_157); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(LeftParenthesisKeyword_0_0_0_1, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_0_0_0_1());
                      				
                    }
                    pushFollow(FOLLOW_68);
                    TAnonymousFormalParameterListParserRuleCall_0_0_0_2=ruleTAnonymousFormalParameterList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.start):null), (TAnonymousFormalParameterListParserRuleCall_0_0_0_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_0_0_0_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_0_0_0_2()); 
                    }
                    RightParenthesisKeyword_0_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_51); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(RightParenthesisKeyword_0_0_0_3, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_0_0_0_3());
                      				
                    }
                    EqualsSignGreaterThanSignKeyword_0_0_0_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(EqualsSignGreaterThanSignKeyword_0_0_0_4, grammarAccess.getPrimaryTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_0_4());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0=rulePrimaryTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getReturnTypeRefAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefWithModifiersParserRuleCall_2=ruleTypeRefWithModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.start):null), (TypeRefWithModifiersParserRuleCall_2!=null?((Token)TypeRefWithModifiersParserRuleCall_2.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefWithModifiersParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    {
                    LeftParenthesisKeyword_3_0=(Token)match(input,LeftParenthesis,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftParenthesisKeyword_3_0, grammarAccess.getPrimaryTypeExpressionAccess().getLeftParenthesisKeyword_3_0());
                      		
                    }
                    pushFollow(FOLLOW_68);
                    TypeRefParserRuleCall_3_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.start):null), (TypeRefParserRuleCall_3_1!=null?((Token)TypeRefParserRuleCall_3_1.stop):null), grammarAccess.getPrimaryTypeExpressionAccess().getTypeRefParserRuleCall_3_1()); 
                    }
                    RightParenthesisKeyword_3_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightParenthesisKeyword_3_2, grammarAccess.getPrimaryTypeExpressionAccess().getRightParenthesisKeyword_3_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBogusTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBogusTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBogusTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBogusTypeRef_return ruleBogusTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleBogusTypeRef_return retval = new InternalN4JSParser.ruleBogusTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRefWithModifiers_return TypeRefWithModifiersParserRuleCall = null;




        try {
            {
            pushFollow(FOLLOW_2);
            TypeRefWithModifiersParserRuleCall=ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.start):null), (TypeRefWithModifiersParserRuleCall!=null?((Token)TypeRefWithModifiersParserRuleCall.stop):null), grammarAccess.getBogusTypeRefAccess().getTypeRefWithModifiersParserRuleCall()); 
            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithModifiers_return ruleTypeRefWithModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithModifiers_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_1_1_0 = null;




        try {
            {
            int alt558=2;
            int LA558_0 = input.LA(1);

            if ( ((LA558_0>=Intersection && LA558_0<=Constructor)||LA558_0==Promisify||LA558_0==Target||LA558_0==Await||LA558_0==Union||LA558_0==This||LA558_0==This_1||(LA558_0>=Type && LA558_0<=Void)||LA558_0==LeftCurlyBracket||LA558_0==Tilde||LA558_0==RULE_IDENTIFIER) ) {
                alt558=1;
            }
            else if ( (LA558_0==QuestionMark) ) {
                alt558=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 558, 0, input);

                throw nvae;
            }
            switch (alt558) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_158);
                    TypeRefWithoutModifiersParserRuleCall_0_0=ruleTypeRefWithoutModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getTypeRefWithoutModifiersParserRuleCall_0_0()); 
                    }
                    int alt557=2;
                    int LA557_0 = input.LA(1);

                    if ( (LA557_0==QuestionMark) ) {
                        int LA557_1 = input.LA(2);

                        if ( (synpred310_InternalN4JSParser()) ) {
                            alt557=1;
                        }
                    }
                    switch (alt557) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            UndefModifierUndefModifierTokenParserRuleCall_0_1_0=ruleUndefModifierToken();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce((UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_0_1());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    UndefModifierUndefModifierTokenParserRuleCall_1_1_0=ruleUndefModifierToken();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.stop):null), grammarAccess.getTypeRefWithModifiersAccess().getUndefModifierAssignment_1_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);

        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_2 = null;

        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;




        try {
            {
            int alt561=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt561=1;
                }
                break;
            case Constructor:
            case Type:
                {
                alt561=2;
                }
                break;
            case LeftCurlyBracket:
                {
                alt561=3;
                }
                break;
            case Union:
                {
                alt561=4;
                }
                break;
            case Intersection:
                {
                alt561=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 561, 0, input);

                throw nvae;
            }

            switch (alt561) {
                case 1 :
                    {
                    {
                    int alt559=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt559=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA559_4 = input.LA(3);

                            if ( (LA559_4==Promisify||LA559_4==Target||LA559_4==Await||LA559_4==This||LA559_4==Void||LA559_4==RULE_IDENTIFIER) ) {
                                alt559=1;
                            }
                            else if ( (LA559_4==This_1) ) {
                                alt559=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 559, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA559_5 = input.LA(3);

                            if ( (LA559_5==This_1) ) {
                                alt559=2;
                            }
                            else if ( (LA559_5==Promisify||LA559_5==Target||LA559_5==Await||LA559_5==This||LA559_5==Void||LA559_5==RULE_IDENTIFIER) ) {
                                alt559=1;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 559, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt559=1;
                            }
                            break;
                        case This_1:
                            {
                            alt559=2;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 559, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt559=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 559, 0, input);

                        throw nvae;
                    }

                    switch (alt559) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_37);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }

                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_37);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt560=2;
                    alt560 = dfa560.predict(input);
                    switch (alt560) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {

                              					announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0());
                              				
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_1=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.start):null), (TypeTypeRefParserRuleCall_1!=null?((Token)TypeTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getTypeTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_2=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.start):null), (FunctionTypeExpressionOLDParserRuleCall_2!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionOLDParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_3 = null;

        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_4 = null;




        try {
            {
            int alt562=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt562=1;
                }
                break;
            case LeftSquareBracket:
                {
                alt562=2;
                }
                break;
            case Constructor:
            case Type:
                {
                alt562=3;
                }
                break;
            case Union:
                {
                alt562=4;
                }
                break;
            case Intersection:
                {
                alt562=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 562, 0, input);

                throw nvae;
            }

            switch (alt562) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_2=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.start):null), (TypeTypeRefParserRuleCall_2!=null?((Token)TypeTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getTypeTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_3=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.start):null), (UnionTypeExpressionOLDParserRuleCall_3!=null?((Token)UnionTypeExpressionOLDParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionOLDParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_4=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.start):null), (IntersectionTypeExpressionOLDParserRuleCall_4!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefForCast() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeRefForCast_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefForCast_return ruleTypeRefForCast() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefForCast_return retval = new InternalN4JSParser.ruleTypeRefForCast_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSParser.ruleArrayTypeRef_return ArrayTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeTypeRef_return TypeTypeRefParserRuleCall_3 = null;

        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return FunctionTypeExpressionOLDParserRuleCall_4 = null;

        InternalN4JSParser.ruleArrowFunctionTypeExpression_return ArrowFunctionTypeExpressionParserRuleCall_5 = null;

        InternalN4JSParser.ruleUnionTypeExpressionOLD_return UnionTypeExpressionOLDParserRuleCall_6 = null;

        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return IntersectionTypeExpressionOLDParserRuleCall_7 = null;




        try {
            {
            int alt563=8;
            alt563 = dfa563.predict(input);
            switch (alt563) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayTypeRefParserRuleCall_1=ruleArrayTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.start):null), (ArrayTypeRefParserRuleCall_1!=null?((Token)ArrayTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefForCastAccess().getArrayTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefParserRuleCall_2=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.start):null), (ThisTypeRefParserRuleCall_2!=null?((Token)ThisTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeTypeRefParserRuleCall_3=ruleTypeTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.start):null), (TypeTypeRefParserRuleCall_3!=null?((Token)TypeTypeRefParserRuleCall_3.stop):null), grammarAccess.getTypeRefForCastAccess().getTypeTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionOLDParserRuleCall_4=ruleFunctionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.start):null), (FunctionTypeExpressionOLDParserRuleCall_4!=null?((Token)FunctionTypeExpressionOLDParserRuleCall_4.stop):null), grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionOLDParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrowFunctionTypeExpressionParserRuleCall_5=ruleArrowFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.start):null), (ArrowFunctionTypeExpressionParserRuleCall_5!=null?((Token)ArrowFunctionTypeExpressionParserRuleCall_5.stop):null), grammarAccess.getTypeRefForCastAccess().getArrowFunctionTypeExpressionParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionOLDParserRuleCall_6=ruleUnionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.start):null), (UnionTypeExpressionOLDParserRuleCall_6!=null?((Token)UnionTypeExpressionOLDParserRuleCall_6.stop):null), grammarAccess.getTypeRefForCastAccess().getUnionTypeExpressionOLDParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionOLDParserRuleCall_7=ruleIntersectionTypeExpressionOLD();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.start):null), (IntersectionTypeExpressionOLDParserRuleCall_7!=null?((Token)IntersectionTypeExpressionOLDParserRuleCall_7.stop):null), grammarAccess.getTypeRefForCastAccess().getIntersectionTypeExpressionOLDParserRuleCall_7()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgInTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeArgInTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgInTypeTypeRef_return ruleTypeArgInTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeArgInTypeTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;

        InternalN4JSParser.ruleWildcard_return WildcardParserRuleCall_2 = null;




        try {
            {
            int alt564=3;
            int LA564_0 = input.LA(1);

            if ( (LA564_0==Promisify||LA564_0==Target||LA564_0==Await||LA564_0==This||LA564_0==Void||LA564_0==RULE_IDENTIFIER) ) {
                alt564=1;
            }
            else if ( (LA564_0==This_1) ) {
                alt564=2;
            }
            else if ( (LA564_0==QuestionMark) && (synpred312_InternalN4JSParser())) {
                alt564=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 564, 0, input);

                throw nvae;
            }
            switch (alt564) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_2=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.start):null), (WildcardParserRuleCall_2!=null?((Token)WildcardParserRuleCall_2.stop):null), grammarAccess.getTypeArgInTypeTypeRefAccess().getWildcardParserRuleCall_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRef_return retval = new InternalN4JSParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;




        try {
            {
            int alt565=2;
            int LA565_0 = input.LA(1);

            if ( (LA565_0==This_1) ) {
                alt565=1;
            }
            else if ( (LA565_0==Tilde) ) {
                alt565=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 565, 0, input);

                throw nvae;
            }
            switch (alt565) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefNominal_return retval = new InternalN4JSParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;



        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefStructural_return retval = new InternalN4JSParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_159);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0());
              			
            }

            }


            }

            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1());
              	
            }
            int alt566=2;
            int LA566_0 = input.LA(1);

            if ( (LA566_0==With) ) {
                int LA566_1 = input.LA(2);

                if ( (LA566_1==LeftCurlyBracket) ) {
                    alt566=1;
                }
            }
            switch (alt566) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleFunctionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionTypeExpressionOLD_return ruleFunctionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleFunctionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleFunctionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token RightParenthesisKeyword_7=null;
        Token ColonKeyword_8_0=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;

        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_6 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_8_1_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_161); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_1());
              	
            }
            int alt567=2;
            int LA567_0 = input.LA(1);

            if ( (LA567_0==CommercialAt) ) {
                alt567=1;
            }
            switch (alt567) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_162); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommercialAtKeyword_2_0());
                      		
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionOLDAccess().getThisKeyword_2_1());
                      		
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_163); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_2_2());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getDeclaredThisTypeAssignment_2_3());
                      				
                    }

                    }


                    }

                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_2_4());
                      		
                    }

                    }
                    break;

            }

            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_164); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getFunctionKeyword_3());
              	
            }
            int alt569=2;
            int LA569_0 = input.LA(1);

            if ( (LA569_0==LessThanSign) ) {
                alt569=1;
            }
            switch (alt569) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_16); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getLessThanSignKeyword_4_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_1());
                      				
                    }

                    }


                    }
                    loop568:
                    do {
                        int alt568=2;
                        int LA568_0 = input.LA(1);

                        if ( (LA568_0==Comma) ) {
                            alt568=1;
                        }


                        switch (alt568) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getCommaKeyword_4_2_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getOwnedTypeVarsAssignment_4_2_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop568;
                        }
                    } while (true);

                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_53); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionOLDAccess().getGreaterThanSignKeyword_4_3());
                      		
                    }

                    }
                    break;

            }

            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionOLDAccess().getLeftParenthesisKeyword_5());
              	
            }
            pushFollow(FOLLOW_68);
            TAnonymousFormalParameterListParserRuleCall_6=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.start):null), (TAnonymousFormalParameterListParserRuleCall_6!=null?((Token)TAnonymousFormalParameterListParserRuleCall_6.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getTAnonymousFormalParameterListParserRuleCall_6()); 
            }
            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_165); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightParenthesisKeyword_7());
              	
            }
            int alt570=2;
            int LA570_0 = input.LA(1);

            if ( (LA570_0==Colon) ) {
                alt570=1;
            }
            switch (alt570) {
                case 1 :
                    {
                    ColonKeyword_8_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_8_0, grammarAccess.getFunctionTypeExpressionOLDAccess().getColonKeyword_8_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_25);
                    ReturnTypeRefTypeRefParserRuleCall_8_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.stop):null), grammarAccess.getFunctionTypeExpressionOLDAccess().getReturnTypeRefAssignment_8_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_9());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrowFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowFunctionTypeExpression_return ruleArrowFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowFunctionTypeExpression_return retval = new InternalN4JSParser.ruleArrowFunctionTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token EqualsSignGreaterThanSignKeyword_4=null;
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_2 = null;

        InternalN4JSParser.rulePrimaryTypeExpression_return ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0 = null;




        try {
            {
            {
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getArrowFunctionTypeExpressionAccess().getLeftParenthesisKeyword_1());
              	
            }
            pushFollow(FOLLOW_68);
            TAnonymousFormalParameterListParserRuleCall_2=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.start):null), (TAnonymousFormalParameterListParserRuleCall_2!=null?((Token)TAnonymousFormalParameterListParserRuleCall_2.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getTAnonymousFormalParameterListParserRuleCall_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_51); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getArrowFunctionTypeExpressionAccess().getRightParenthesisKeyword_3());
              	
            }
            EqualsSignGreaterThanSignKeyword_4=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(EqualsSignGreaterThanSignKeyword_4, grammarAccess.getArrowFunctionTypeExpressionAccess().getEqualsSignGreaterThanSignKeyword_4());
              	
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0=rulePrimaryTypeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.start):null), (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0!=null?((Token)ReturnTypeRefPrimaryTypeExpressionParserRuleCall_5_0.stop):null), grammarAccess.getArrowFunctionTypeExpressionAccess().getReturnTypeRefAssignment_5());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;




        try {
            {
            int alt572=2;
            int LA572_0 = input.LA(1);

            if ( ((LA572_0>=Intersection && LA572_0<=Implements)||(LA572_0>=Promisify && LA572_0<=Abstract)||LA572_0==External||(LA572_0>=Private && LA572_0<=Project)||LA572_0==Public||LA572_0==Static||LA572_0==Target||(LA572_0>=Async && LA572_0<=Await)||LA572_0==Union||(LA572_0>=Yield && LA572_0<=This)||LA572_0==From||LA572_0==This_1||(LA572_0>=Type && LA572_0<=Void)||LA572_0==FullStopFullStopFullStop||(LA572_0>=Get && LA572_0<=Let)||(LA572_0>=Out && LA572_0<=Set)||LA572_0==As||LA572_0==Of||LA572_0==LeftParenthesis||LA572_0==QuestionMark||LA572_0==LeftSquareBracket||LA572_0==LeftCurlyBracket||LA572_0==Tilde||LA572_0==RULE_IDENTIFIER) ) {
                alt572=1;
            }
            switch (alt572) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_33);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0());
                      			
                    }

                    }


                    }
                    loop571:
                    do {
                        int alt571=2;
                        int LA571_0 = input.LA(1);

                        if ( (LA571_0==Comma) ) {
                            alt571=1;
                        }


                        switch (alt571) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_166); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      			announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0());
                    	      		
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_33);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      					announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1());
                    	      				
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop571;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        Token ColonKeyword_1_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_0 = null;




        try {
            {
            {
            int alt573=2;
            int LA573_0 = input.LA(1);

            if ( (LA573_0==FullStopFullStopFullStop) ) {
                alt573=1;
            }
            switch (alt573) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0());
                      			
                    }

                    }


                    }
                    break;

            }
            int alt574=2;
            alt574 = dfa574.predict(input);
            switch (alt574) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_85);
                    NameBindingIdentifierParserRuleCall_1_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0());
                      				
                    }

                    }


                    }

                    ColonKeyword_1_1=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_1, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1());
                      		
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_2_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.start):null), (TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_2());
              			
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnionTypeExpressionOLD_return ruleUnionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleUnionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleUnionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;




        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionOLDAccess().getUnionKeyword_1());
              	
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
              			
            }

            }


            }
            loop575:
            do {
                int alt575=2;
                int LA575_0 = input.LA(1);

                if ( (LA575_0==Comma) ) {
                    alt575=1;
                }


                switch (alt575) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_168); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop575;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpressionOLD() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpressionOLD();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpressionOLD_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return ruleIntersectionTypeExpressionOLD() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return retval = new InternalN4JSParser.ruleIntersectionTypeExpressionOLD_return();
        retval.start = input.LT(1);

        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;




        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionOLDAccess().getIntersectionKeyword_1());
              	
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_168); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionOLDAccess().getLeftCurlyBracketKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_3());
              			
            }

            }


            }
            loop576:
            do {
                int alt576=2;
                int LA576_0 = input.LA(1);

                if ( (LA576_0==Comma) ) {
                    alt576=1;
                }


                switch (alt576) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_168); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      			announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionOLDAccess().getCommaKeyword_4_0());
            	      		
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionOLDAccess().getTypeRefsAssignment_4_1());
            	      				
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop576;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionOLDAccess().getRightCurlyBracketKeyword_5());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRef_return retval = new InternalN4JSParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;




        try {
            {
            int alt577=2;
            int LA577_0 = input.LA(1);

            if ( (LA577_0==Promisify||LA577_0==Target||LA577_0==Await||LA577_0==This||LA577_0==Void||LA577_0==RULE_IDENTIFIER) ) {
                alt577=1;
            }
            else if ( (LA577_0==Tilde) ) {
                alt577=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 577, 0, input);

                throw nvae;
            }
            switch (alt577) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_1_0=null;
        Token CommaKeyword_1_2_0=null;
        Token GreaterThanSignKeyword_1_3=null;
        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_2_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_169);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeAssignment_0());
              			
            }

            }


            }
            int alt579=2;
            alt579 = dfa579.predict(input);
            switch (alt579) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_1_0=(Token)match(input,LessThanSign,FOLLOW_170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LessThanSignKeyword_1_0, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_1());
                      				
                    }

                    }


                    }
                    loop578:
                    do {
                        int alt578=2;
                        int LA578_0 = input.LA(1);

                        if ( (LA578_0==Comma) ) {
                            alt578=1;
                        }


                        switch (alt578) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_2_0=(Token)match(input,Comma,FOLLOW_170); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_1_2_0, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    TypeArgsTypeArgumentParserRuleCall_1_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_2_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop578;
                        }
                    } while (true);

                    GreaterThanSignKeyword_1_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_1_3, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3());
                      		
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleArrayTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayTypeRef_return ruleArrayTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleArrayTypeRef_return retval = new InternalN4JSParser.ruleArrayTypeRef_return();
        retval.start = input.LT(1);

        Token ArrayTypeLiteralLeftSquareBracketKeyword_0_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_0 = null;




        try {
            {
            {
            {
            {
            ArrayTypeLiteralLeftSquareBracketKeyword_0_0=(Token)match(input,LeftSquareBracket,FOLLOW_170); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(ArrayTypeLiteralLeftSquareBracketKeyword_0_0, grammarAccess.getArrayTypeRefAccess().getArrayTypeLiteralLeftSquareBracketKeyword_0_0());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_106);
            TypeArgsTypeArgumentParserRuleCall_1_0=ruleTypeArgument();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_0.stop):null), grammarAccess.getArrayTypeRefAccess().getTypeArgsAssignment_1());
              			
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightSquareBracketKeyword_2, grammarAccess.getArrayTypeRefAccess().getRightSquareBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_2_0=null;
        Token CommaKeyword_2_2_0=null;
        Token GreaterThanSignKeyword_2_3=null;
        Token WithKeyword_3_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_2_1_0 = null;

        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_3_1 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_60);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0());
              			
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_171);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeAssignment_1());
              			
            }

            }


            }
            int alt581=2;
            alt581 = dfa581.predict(input);
            switch (alt581) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_2_0=(Token)match(input,LessThanSign,FOLLOW_170); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(LessThanSignKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0());
                      			
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_1());
                      				
                    }

                    }


                    }
                    loop580:
                    do {
                        int alt580=2;
                        int LA580_0 = input.LA(1);

                        if ( (LA580_0==Comma) ) {
                            alt580=1;
                        }


                        switch (alt580) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_2_0=(Token)match(input,Comma,FOLLOW_170); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      				announce(CommaKeyword_2_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0());
                    	      			
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    TypeArgsTypeArgumentParserRuleCall_2_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce((TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_2_1());
                    	      					
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop580;
                        }
                    } while (true);

                    GreaterThanSignKeyword_2_3=(Token)match(input,GreaterThanSign,FOLLOW_160); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(GreaterThanSignKeyword_2_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3());
                      		
                    }

                    }
                    break;

            }
            int alt582=2;
            int LA582_0 = input.LA(1);

            if ( (LA582_0==With) ) {
                int LA582_1 = input.LA(2);

                if ( (LA582_1==LeftCurlyBracket) ) {
                    alt582=1;
                }
            }
            switch (alt582) {
                case 1 :
                    {
                    WithKeyword_3_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(WithKeyword_3_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0());
                      		
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_3_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.start):null), (TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSParser.ruleTStructMemberList_return retval = new InternalN4JSParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;




        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_172); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0());
              	
            }
            loop584:
            do {
                int alt584=2;
                int LA584_0 = input.LA(1);

                if ( ((LA584_0>=Intersection && LA584_0<=With)||(LA584_0>=For && LA584_0<=Var)||(LA584_0>=As && LA584_0<=Of)||LA584_0==LessThanSign||LA584_0==RULE_IDENTIFIER) ) {
                    alt584=1;
                }


                switch (alt584) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_173);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {

            	      					announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0());
            	      				
            	    }

            	    }


            	    }
            	    int alt583=3;
            	    int LA583_0 = input.LA(1);

            	    if ( (LA583_0==Semicolon) ) {
            	        alt583=1;
            	    }
            	    else if ( (LA583_0==Comma) ) {
            	        alt583=2;
            	    }
            	    switch (alt583) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_172); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0());
            	              			
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_172); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {

            	              				announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1());
            	              			
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop584;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSParser.ruleTStructMember_return retval = new InternalN4JSParser.ruleTStructMember_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;

        InternalN4JSParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;

        InternalN4JSParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;

        InternalN4JSParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;




        try {
            {
            int alt585=4;
            alt585 = dfa585.predict(input);
            switch (alt585) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSParser.ruleTStructMethod_return retval = new InternalN4JSParser.ruleTStructMethod_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0_0_1_0=null;
        Token CommaKeyword_0_0_1_2_0=null;
        Token GreaterThanSignKeyword_0_0_1_3=null;
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0 = null;

        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            {
            {
            int alt587=2;
            int LA587_0 = input.LA(1);

            if ( (LA587_0==LessThanSign) ) {
                alt587=1;
            }
            switch (alt587) {
                case 1 :
                    {
                    LessThanSignKeyword_0_0_1_0=(Token)match(input,LessThanSign,FOLLOW_16); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(LessThanSignKeyword_0_0_1_0, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0());
                      				
                    }
                    {
                    {
                    pushFollow(FOLLOW_17);
                    TypeVarsTypeVariableParserRuleCall_0_0_1_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      							announce((TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_1());
                      						
                    }

                    }


                    }
                    loop586:
                    do {
                        int alt586=2;
                        int LA586_0 = input.LA(1);

                        if ( (LA586_0==Comma) ) {
                            alt586=1;
                        }


                        switch (alt586) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_0_1_2_0=(Token)match(input,Comma,FOLLOW_16); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      						announce(CommaKeyword_0_0_1_2_0, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0());
                    	      					
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_17);
                    	    TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {

                    	      								announce((TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_2_1());
                    	      							
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop586;
                        }
                    } while (true);

                    GreaterThanSignKeyword_0_0_1_3=(Token)match(input,GreaterThanSign,FOLLOW_27); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(GreaterThanSignKeyword_0_0_1_3, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3());
                      				
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_53);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2());
              					
            }

            }


            }

            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_157); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3());
              			
            }

            }


            }

            pushFollow(FOLLOW_68);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2());
              	
            }
            int alt588=2;
            int LA588_0 = input.LA(1);

            if ( (LA588_0==Colon) ) {
                alt588=1;
            }
            switch (alt588) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_3_0, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructMethodAccess().getReturnTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSParser.ruleTStructField_return retval = new InternalN4JSParser.ruleTStructField_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;




        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_43);
            NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0());
              			
            }

            }


            }
            int alt589=2;
            int LA589_0 = input.LA(1);

            if ( (LA589_0==Colon) ) {
                alt589=1;
            }
            switch (alt589) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_1_0, grammarAccess.getTStructFieldAccess().getColonKeyword_1_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTStructFieldAccess().getTypeRefAssignment_1_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructGetter_return retval = new InternalN4JSParser.ruleTStructGetter_return();
        retval.start = input.LT(1);

        Token GetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_3_1_0 = null;




        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_27); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_53);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_68); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_1());
              	
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_2());
              	
            }
            int alt590=2;
            int LA590_0 = input.LA(1);

            if ( (LA590_0==Colon) ) {
                alt590=1;
            }
            switch (alt590) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(ColonKeyword_3_0, grammarAccess.getTStructGetterAccess().getColonKeyword_3_0());
                      		
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructGetterAccess().getDeclaredTypeRefAssignment_3_1());
                      				
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructSetter_return retval = new InternalN4JSParser.ruleTStructSetter_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_2_0 = null;




        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_27); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1());
              			
            }
            {
            {
            pushFollow(FOLLOW_53);
            NameIdentifierNameParserRuleCall_0_0_2_0=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              						announce((NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.start):null), (NameIdentifierNameParserRuleCall_0_0_2_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2());
              					
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftParenthesisKeyword_1, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_1());
              	
            }
            {
            {
            pushFollow(FOLLOW_68);
            FparTAnonymousFormalParameterParserRuleCall_2_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_2());
              			
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightParenthesisKeyword_3, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_3());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;



        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0());
              	
            }
            int alt591=3;
            int LA591_0 = input.LA(1);

            if ( (LA591_0==Tilde) ) {
                alt591=1;
            }
            else if ( (LA591_0==RULE_STRUCTMODSUFFIX) ) {
                alt591=2;
            }
            switch (alt591) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword=null;



        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeTypeRef_return ruleTypeTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeTypeRef_return retval = new InternalN4JSParser.ruleTypeTypeRef_return();
        retval.start = input.LT(1);

        Token TypeKeyword_1_0=null;
        Token ConstructorRefConstructorKeyword_1_1_0=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSParser.ruleTypeArgInTypeTypeRef_return TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0 = null;




        try {
            {
            {
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==Type) ) {
                alt592=1;
            }
            else if ( (LA592_0==Constructor) ) {
                alt592=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 592, 0, input);

                throw nvae;
            }
            switch (alt592) {
                case 1 :
                    {
                    TypeKeyword_1_0=(Token)match(input,Type,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      			announce(TypeKeyword_1_0, grammarAccess.getTypeTypeRefAccess().getTypeKeyword_1_0());
                      		
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    ConstructorRefConstructorKeyword_1_1_0=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(ConstructorRefConstructorKeyword_1_1_0, grammarAccess.getTypeTypeRefAccess().getConstructorRefConstructorKeyword_1_1_0());
                      				
                    }

                    }


                    }


                    }
                    break;

            }

            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(LeftCurlyBracketKeyword_2, grammarAccess.getTypeTypeRefAccess().getLeftCurlyBracketKeyword_2());
              	
            }
            {
            {
            pushFollow(FOLLOW_25);
            TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0=ruleTypeArgInTypeTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce((TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.start):null), (TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0!=null?((Token)TypeArgTypeArgInTypeTypeRefParserRuleCall_3_0.stop):null), grammarAccess.getTypeTypeRefAccess().getTypeArgAssignment_3());
              			
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		announce(RightCurlyBracketKeyword_4, grammarAccess.getTypeTypeRefAccess().getRightCurlyBracketKeyword_4());
              	
            }

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgument_return retval = new InternalN4JSParser.ruleTypeArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleWildcard_return WildcardParserRuleCall_0 = null;

        InternalN4JSParser.ruleWildcardNewNotation_return WildcardNewNotationParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_2 = null;




        try {
            {
            int alt593=3;
            switch ( input.LA(1) ) {
            case QuestionMark:
                {
                int LA593_1 = input.LA(2);

                if ( (synpred322_InternalN4JSParser()) ) {
                    alt593=1;
                }
                else if ( (true) ) {
                    alt593=3;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 593, 1, input);

                    throw nvae;
                }
                }
                break;
            case Out:
            case In:
                {
                alt593=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Promisify:
            case Target:
            case Await:
            case Union:
            case This:
            case This_1:
            case Type:
            case Void:
            case LeftParenthesis:
            case LeftSquareBracket:
            case LeftCurlyBracket:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt593=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 593, 0, input);

                throw nvae;
            }

            switch (alt593) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WildcardNewNotationParserRuleCall_1=ruleWildcardNewNotation();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.start):null), (WildcardNewNotationParserRuleCall_1!=null?((Token)WildcardNewNotationParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardNewNotationParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_2=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.start):null), (TypeRefParserRuleCall_2!=null?((Token)TypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSParser.ruleWildcard_return retval = new InternalN4JSParser.ruleWildcard_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;




        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_176); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              				announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1());
              			
            }

            }


            }
            int alt594=3;
            int LA594_0 = input.LA(1);

            if ( (LA594_0==Extends) ) {
                alt594=1;
            }
            else if ( (LA594_0==Super) ) {
                alt594=2;
            }
            switch (alt594) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredUpperBoundAssignment_1_0_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      				announce(SuperKeyword_1_1_0, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0());
                      			
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      						announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredLowerBoundAssignment_1_1_1());
                      					
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcardNewNotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcardNewNotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleWildcardNewNotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcardNewNotation_return ruleWildcardNewNotation() throws RecognitionException {
        InternalN4JSParser.ruleWildcardNewNotation_return retval = new InternalN4JSParser.ruleWildcardNewNotation_return();
        retval.start = input.LT(1);

        Token UsingInOutNotationOutKeyword_0_0_0=null;
        Token UsingInOutNotationInKeyword_1_0_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_0 = null;




        try {
            {
            int alt595=2;
            int LA595_0 = input.LA(1);

            if ( (LA595_0==Out) ) {
                alt595=1;
            }
            else if ( (LA595_0==In) ) {
                alt595=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 595, 0, input);

                throw nvae;
            }
            switch (alt595) {
                case 1 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationOutKeyword_0_0_0=(Token)match(input,Out,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(UsingInOutNotationOutKeyword_0_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationOutKeyword_0_0_0());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_0_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredUpperBoundAssignment_0_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    UsingInOutNotationInKeyword_1_0_0=(Token)match(input,In,FOLLOW_44); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce(UsingInOutNotationInKeyword_1_0_0, grammarAccess.getWildcardNewNotationAccess().getUsingInOutNotationInKeyword_1_0_0());
                      				
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      					announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getWildcardNewNotationAccess().getDeclaredLowerBoundAssignment_1_1());
                      				
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleUndefModifierToken() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUndefModifierToken();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleUndefModifierToken_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUndefModifierToken_return ruleUndefModifierToken() throws RecognitionException {
        InternalN4JSParser.ruleUndefModifierToken_return retval = new InternalN4JSParser.ruleUndefModifierToken_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword=null;



        try {
            {
            QuestionMarkKeyword=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              	announce(QuestionMarkKeyword, grammarAccess.getUndefModifierTokenAccess().getQuestionMarkKeyword());

            }

            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifier_return retval = new InternalN4JSParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1_0=null;



        try {
            {
            int alt596=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt596=1;
                }
                break;
            case Yield:
                {
                alt596=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt596=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 596, 0, input);

                throw nvae;
            }

            switch (alt596) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {

                      		announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifier_return retval = new InternalN4JSParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);



        try {
            {
            int alt597=2;
            int LA597_0 = input.LA(1);

            if ( (LA597_0==RULE_IDENTIFIER) ) {
                alt597=1;
            }
            else if ( ((LA597_0>=Intersection && LA597_0<=Implements)||(LA597_0>=Promisify && LA597_0<=Abstract)||LA597_0==External||(LA597_0>=Private && LA597_0<=Project)||LA597_0==Public||LA597_0==Static||LA597_0==Target||(LA597_0>=Async && LA597_0<=Await)||LA597_0==Union||LA597_0==This||LA597_0==From||LA597_0==Type||(LA597_0>=Get && LA597_0<=Let)||(LA597_0>=Out && LA597_0<=Set)||LA597_0==As||LA597_0==Of) ) {
                alt597=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 597, 0, input);

                throw nvae;
            }
            switch (alt597) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }

    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierName_return retval = new InternalN4JSParser.ruleIdentifierName_return();
        retval.start = input.LT(1);



        try {
            {
            int alt598=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt598=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt598=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Async:
            case Await:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Out:
            case Set:
            case As:
            case Of:
                {
                alt598=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 598, 0, input);

                throw nvae;
            }

            switch (alt598) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;



        try {
            {
            int alt599=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt599=1;
                }
                break;
            case Case:
                {
                alt599=2;
                }
                break;
            case Catch:
                {
                alt599=3;
                }
                break;
            case Class:
                {
                alt599=4;
                }
                break;
            case Const:
                {
                alt599=5;
                }
                break;
            case Continue:
                {
                alt599=6;
                }
                break;
            case Debugger:
                {
                alt599=7;
                }
                break;
            case Default:
                {
                alt599=8;
                }
                break;
            case Delete:
                {
                alt599=9;
                }
                break;
            case Do:
                {
                alt599=10;
                }
                break;
            case Else:
                {
                alt599=11;
                }
                break;
            case Export:
                {
                alt599=12;
                }
                break;
            case Extends:
                {
                alt599=13;
                }
                break;
            case Finally:
                {
                alt599=14;
                }
                break;
            case For:
                {
                alt599=15;
                }
                break;
            case Function:
                {
                alt599=16;
                }
                break;
            case If:
                {
                alt599=17;
                }
                break;
            case Import:
                {
                alt599=18;
                }
                break;
            case In:
                {
                alt599=19;
                }
                break;
            case Instanceof:
                {
                alt599=20;
                }
                break;
            case New:
                {
                alt599=21;
                }
                break;
            case Return:
                {
                alt599=22;
                }
                break;
            case Super:
                {
                alt599=23;
                }
                break;
            case Switch:
                {
                alt599=24;
                }
                break;
            case This_1:
                {
                alt599=25;
                }
                break;
            case Throw:
                {
                alt599=26;
                }
                break;
            case Try:
                {
                alt599=27;
                }
                break;
            case Typeof:
                {
                alt599=28;
                }
                break;
            case Var:
                {
                alt599=29;
                }
                break;
            case Void:
                {
                alt599=30;
                }
                break;
            case While:
                {
                alt599=31;
                }
                break;
            case With:
                {
                alt599=32;
                }
                break;
            case Yield:
                {
                alt599=33;
                }
                break;
            case Null:
                {
                alt599=34;
                }
                break;
            case True:
                {
                alt599=35;
                }
                break;
            case False:
                {
                alt599=36;
                }
                break;
            case Enum:
                {
                alt599=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 599, 0, input);

                throw nvae;
            }

            switch (alt599) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5());
                      	
                    }

                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6());
                      	
                    }

                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7());
                      	
                    }

                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8());
                      	
                    }

                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9());
                      	
                    }

                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10());
                      	
                    }

                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11());
                      	
                    }

                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12());
                      	
                    }

                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13());
                      	
                    }

                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14());
                      	
                    }

                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15());
                      	
                    }

                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16());
                      	
                    }

                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17());
                      	
                    }

                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18());
                      	
                    }

                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19());
                      	
                    }

                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20());
                      	
                    }

                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21());
                      	
                    }

                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22());
                      	
                    }

                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23());
                      	
                    }

                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24());
                      	
                    }

                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25());
                      	
                    }

                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26());
                      	
                    }

                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27());
                      	
                    }

                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28());
                      	
                    }

                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29());
                      	
                    }

                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30());
                      	
                    }

                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31());
                      	
                    }

                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32());
                      	
                    }

                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33());
                      	
                    }

                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34());
                      	
                    }

                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35());
                      	
                    }

                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36());
                      	
                    }

                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token PromisifyKeyword_16=null;
        Token AwaitKeyword_17=null;
        Token AsyncKeyword_18=null;
        Token ImplementsKeyword_19=null;
        Token InterfaceKeyword_20=null;
        Token PrivateKeyword_21=null;
        Token ProtectedKeyword_22=null;
        Token PublicKeyword_23=null;
        Token OutKeyword_24=null;



        try {
            {
            int alt600=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt600=1;
                }
                break;
            case Set:
                {
                alt600=2;
                }
                break;
            case Let:
                {
                alt600=3;
                }
                break;
            case Project:
                {
                alt600=4;
                }
                break;
            case External:
                {
                alt600=5;
                }
                break;
            case Abstract:
                {
                alt600=6;
                }
                break;
            case Static:
                {
                alt600=7;
                }
                break;
            case As:
                {
                alt600=8;
                }
                break;
            case From:
                {
                alt600=9;
                }
                break;
            case Constructor:
                {
                alt600=10;
                }
                break;
            case Of:
                {
                alt600=11;
                }
                break;
            case Target:
                {
                alt600=12;
                }
                break;
            case Type:
                {
                alt600=13;
                }
                break;
            case Union:
                {
                alt600=14;
                }
                break;
            case Intersection:
                {
                alt600=15;
                }
                break;
            case This:
                {
                alt600=16;
                }
                break;
            case Promisify:
                {
                alt600=17;
                }
                break;
            case Await:
                {
                alt600=18;
                }
                break;
            case Async:
                {
                alt600=19;
                }
                break;
            case Implements:
                {
                alt600=20;
                }
                break;
            case Interface:
                {
                alt600=21;
                }
                break;
            case Private:
                {
                alt600=22;
                }
                break;
            case Protected:
                {
                alt600=23;
                }
                break;
            case Public:
                {
                alt600=24;
                }
                break;
            case Out:
                {
                alt600=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 600, 0, input);

                throw nvae;
            }

            switch (alt600) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0());
                      	
                    }

                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1());
                      	
                    }

                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2());
                      	
                    }

                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3());
                      	
                    }

                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4());
                      	
                    }

                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5());
                      	
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6());
                      	
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7());
                      	
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8());
                      	
                    }

                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9());
                      	
                    }

                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10());
                      	
                    }

                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11());
                      	
                    }

                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12());
                      	
                    }

                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13());
                      	
                    }

                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14());
                      	
                    }

                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15());
                      	
                    }

                    }
                    break;
                case 17 :
                    {
                    PromisifyKeyword_16=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(PromisifyKeyword_16, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_16());
                      	
                    }

                    }
                    break;
                case 18 :
                    {
                    AwaitKeyword_17=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AwaitKeyword_17, grammarAccess.getN4KeywordAccess().getAwaitKeyword_17());
                      	
                    }

                    }
                    break;
                case 19 :
                    {
                    AsyncKeyword_18=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(AsyncKeyword_18, grammarAccess.getN4KeywordAccess().getAsyncKeyword_18());
                      	
                    }

                    }
                    break;
                case 20 :
                    {
                    ImplementsKeyword_19=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ImplementsKeyword_19, grammarAccess.getN4KeywordAccess().getImplementsKeyword_19());
                      	
                    }

                    }
                    break;
                case 21 :
                    {
                    InterfaceKeyword_20=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(InterfaceKeyword_20, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_20());
                      	
                    }

                    }
                    break;
                case 22 :
                    {
                    PrivateKeyword_21=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(PrivateKeyword_21, grammarAccess.getN4KeywordAccess().getPrivateKeyword_21());
                      	
                    }

                    }
                    break;
                case 23 :
                    {
                    ProtectedKeyword_22=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(ProtectedKeyword_22, grammarAccess.getN4KeywordAccess().getProtectedKeyword_22());
                      	
                    }

                    }
                    break;
                case 24 :
                    {
                    PublicKeyword_23=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(PublicKeyword_23, grammarAccess.getN4KeywordAccess().getPublicKeyword_23());
                      	
                    }

                    }
                    break;
                case 25 :
                    {
                    OutKeyword_24=(Token)match(input,Out,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      		announce(OutKeyword_24, grammarAccess.getN4KeywordAccess().getOutKeyword_24());
                      	
                    }

                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;

        try {
            {
            int alt601=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt601=1;
                }
                break;
            case Const:
                {
                alt601=2;
                }
                break;
            case Let:
                {
                alt601=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 601, 0, input);

                throw nvae;
            }

            switch (alt601) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt602=2;
            int LA602_0 = input.LA(1);

            if ( (LA602_0==PlusSignPlusSign) ) {
                alt602=1;
            }
            else if ( (LA602_0==HyphenMinusHyphenMinus) ) {
                alt602=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);

                throw nvae;
            }
            switch (alt602) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;

        try {
            {
            int alt603=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt603=1;
                }
                break;
            case Void:
                {
                alt603=2;
                }
                break;
            case Typeof:
                {
                alt603=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt603=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt603=5;
                }
                break;
            case PlusSign:
                {
                alt603=6;
                }
                break;
            case HyphenMinus:
                {
                alt603=7;
                }
                break;
            case Tilde:
                {
                alt603=8;
                }
                break;
            case ExclamationMark:
                {
                alt603=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);

                throw nvae;
            }

            switch (alt603) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3());
                      		
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4());
                      		
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5());
                      		
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6());
                      		
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7());
                      		
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;

        try {
            {
            int alt604=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt604=1;
                }
                break;
            case Solidus:
                {
                alt604=2;
                }
                break;
            case PercentSign:
                {
                alt604=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 604, 0, input);

                throw nvae;
            }

            switch (alt604) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt605=2;
            int LA605_0 = input.LA(1);

            if ( (LA605_0==PlusSign) ) {
                alt605=1;
            }
            else if ( (LA605_0==HyphenMinus) ) {
                alt605=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);

                throw nvae;
            }
            switch (alt605) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;

        try {
            {
            int alt606=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt606=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt606=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt606=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt606=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 606, 0, input);

                throw nvae;
            }

            switch (alt606) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;

        try {
            {
            int alt607=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt607=1;
                }
                break;
            case Project:
                {
                alt607=2;
                }
                break;
            case Protected:
                {
                alt607=3;
                }
                break;
            case Public:
                {
                alt607=4;
                }
                break;
            case External:
                {
                alt607=5;
                }
                break;
            case Abstract:
                {
                alt607=6;
                }
                break;
            case Static:
                {
                alt607=7;
                }
                break;
            case Const:
                {
                alt607=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 607, 0, input);

                throw nvae;
            }

            switch (alt607) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0());
                      		
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1());
                      		
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2());
                      		
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3());
                      		
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4());
                      		
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5());
                      		
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6());
                      		
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {

                      			announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7());
                      		
                    }

                    }


                    }
                    break;

            }


            }

        }

            catch (RecognitionException re) {
                recover(input,re);
            }
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop608:
        do {
            int alt608=2;
            int LA608_0 = input.LA(1);

            if ( ((LA608_0>=Protected && LA608_0<=Abstract)||LA608_0==External||(LA608_0>=Private && LA608_0<=Project)||LA608_0==Public||LA608_0==Static||LA608_0==Const) ) {
                alt608=1;
            }


            switch (alt608) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop608;
            }
        } while (true);

        match(input,Class,FOLLOW_177); if (state.failed) return ;
        int alt609=2;
        int LA609_0 = input.LA(1);

        if ( (LA609_0==Tilde) ) {
            alt609=1;
        }
        switch (alt609) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_178);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt610=2;
        int LA610_0 = input.LA(1);

        if ( ((LA610_0>=Intersection && LA610_0<=Implements)||(LA610_0>=Promisify && LA610_0<=Abstract)||LA610_0==External||(LA610_0>=Private && LA610_0<=Project)||LA610_0==Public||LA610_0==Static||LA610_0==Target||(LA610_0>=Async && LA610_0<=Await)||LA610_0==Union||(LA610_0>=Yield && LA610_0<=This)||LA610_0==From||LA610_0==Type||(LA610_0>=Get && LA610_0<=Let)||(LA610_0>=Out && LA610_0<=Set)||LA610_0==As||LA610_0==Of||LA610_0==RULE_IDENTIFIER) ) {
            alt610=1;
        }
        switch (alt610) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop611:
        do {
            int alt611=2;
            int LA611_0 = input.LA(1);

            if ( ((LA611_0>=Protected && LA611_0<=Abstract)||LA611_0==External||(LA611_0>=Private && LA611_0<=Project)||LA611_0==Public||LA611_0==Static||LA611_0==Const) ) {
                alt611=1;
            }


            switch (alt611) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop611;
            }
        } while (true);

        match(input,Interface,FOLLOW_177); if (state.failed) return ;
        int alt612=2;
        int LA612_0 = input.LA(1);

        if ( (LA612_0==Tilde) ) {
            alt612=1;
        }
        switch (alt612) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_178);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt613=2;
        int LA613_0 = input.LA(1);

        if ( ((LA613_0>=Intersection && LA613_0<=Implements)||(LA613_0>=Promisify && LA613_0<=Abstract)||LA613_0==External||(LA613_0>=Private && LA613_0<=Project)||LA613_0==Public||LA613_0==Static||LA613_0==Target||(LA613_0>=Async && LA613_0<=Await)||LA613_0==Union||(LA613_0>=Yield && LA613_0<=This)||LA613_0==From||LA613_0==Type||(LA613_0>=Get && LA613_0<=Let)||(LA613_0>=Out && LA613_0<=Set)||LA613_0==As||LA613_0==Of||LA613_0==RULE_IDENTIFIER) ) {
            alt613=1;
        }
        switch (alt613) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop614:
        do {
            int alt614=2;
            int LA614_0 = input.LA(1);

            if ( ((LA614_0>=Protected && LA614_0<=Abstract)||LA614_0==External||(LA614_0>=Private && LA614_0<=Project)||LA614_0==Public||LA614_0==Static||LA614_0==Const) ) {
                alt614=1;
            }


            switch (alt614) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop614;
            }
        } while (true);

        match(input,Enum,FOLLOW_178); if (state.failed) return ;
        int alt615=2;
        int LA615_0 = input.LA(1);

        if ( ((LA615_0>=Intersection && LA615_0<=Implements)||(LA615_0>=Promisify && LA615_0<=Abstract)||LA615_0==External||(LA615_0>=Private && LA615_0<=Project)||LA615_0==Public||LA615_0==Static||LA615_0==Target||(LA615_0>=Async && LA615_0<=Await)||LA615_0==Union||(LA615_0>=Yield && LA615_0<=This)||LA615_0==From||LA615_0==Type||(LA615_0>=Get && LA615_0<=Let)||(LA615_0>=Out && LA615_0<=Set)||LA615_0==As||LA615_0==Of||LA615_0==RULE_IDENTIFIER) ) {
            alt615=1;
        }
        switch (alt615) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred6_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop616:
        do {
            int alt616=2;
            int LA616_0 = input.LA(1);

            if ( ((LA616_0>=Protected && LA616_0<=Abstract)||LA616_0==External||(LA616_0>=Private && LA616_0<=Project)||LA616_0==Public||LA616_0==Static||LA616_0==Const) ) {
                alt616=1;
            }


            switch (alt616) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop616;
            }
        } while (true);

        pushFollow(FOLLOW_46);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred8_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred9_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop617:
        do {
            int alt617=2;
            int LA617_0 = input.LA(1);

            if ( ((LA617_0>=Protected && LA617_0<=Abstract)||LA617_0==External||(LA617_0>=Private && LA617_0<=Project)||LA617_0==Public||LA617_0==Static||LA617_0==Const) ) {
                alt617=1;
            }


            switch (alt617) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop617;
            }
        } while (true);

        match(input,Class,FOLLOW_177); if (state.failed) return ;
        int alt618=2;
        int LA618_0 = input.LA(1);

        if ( (LA618_0==Tilde) ) {
            alt618=1;
        }
        switch (alt618) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_178);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt619=2;
        int LA619_0 = input.LA(1);

        if ( ((LA619_0>=Intersection && LA619_0<=Implements)||(LA619_0>=Promisify && LA619_0<=Abstract)||LA619_0==External||(LA619_0>=Private && LA619_0<=Project)||LA619_0==Public||LA619_0==Static||LA619_0==Target||(LA619_0>=Async && LA619_0<=Await)||LA619_0==Union||(LA619_0>=Yield && LA619_0<=This)||LA619_0==From||LA619_0==Type||(LA619_0>=Get && LA619_0<=Let)||(LA619_0>=Out && LA619_0<=Set)||LA619_0==As||LA619_0==Of||LA619_0==RULE_IDENTIFIER) ) {
            alt619=1;
        }
        switch (alt619) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop620:
        do {
            int alt620=2;
            int LA620_0 = input.LA(1);

            if ( ((LA620_0>=Protected && LA620_0<=Abstract)||LA620_0==External||(LA620_0>=Private && LA620_0<=Project)||LA620_0==Public||LA620_0==Static||LA620_0==Const) ) {
                alt620=1;
            }


            switch (alt620) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop620;
            }
        } while (true);

        match(input,Interface,FOLLOW_177); if (state.failed) return ;
        int alt621=2;
        int LA621_0 = input.LA(1);

        if ( (LA621_0==Tilde) ) {
            alt621=1;
        }
        switch (alt621) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_178);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt622=2;
        int LA622_0 = input.LA(1);

        if ( ((LA622_0>=Intersection && LA622_0<=Implements)||(LA622_0>=Promisify && LA622_0<=Abstract)||LA622_0==External||(LA622_0>=Private && LA622_0<=Project)||LA622_0==Public||LA622_0==Static||LA622_0==Target||(LA622_0>=Async && LA622_0<=Await)||LA622_0==Union||(LA622_0>=Yield && LA622_0<=This)||LA622_0==From||LA622_0==Type||(LA622_0>=Get && LA622_0<=Let)||(LA622_0>=Out && LA622_0<=Set)||LA622_0==As||LA622_0==Of||LA622_0==RULE_IDENTIFIER) ) {
            alt622=1;
        }
        switch (alt622) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop623:
        do {
            int alt623=2;
            int LA623_0 = input.LA(1);

            if ( ((LA623_0>=Protected && LA623_0<=Abstract)||LA623_0==External||(LA623_0>=Private && LA623_0<=Project)||LA623_0==Public||LA623_0==Static||LA623_0==Const) ) {
                alt623=1;
            }


            switch (alt623) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop623;
            }
        } while (true);

        match(input,Enum,FOLLOW_178); if (state.failed) return ;
        int alt624=2;
        int LA624_0 = input.LA(1);

        if ( ((LA624_0>=Intersection && LA624_0<=Implements)||(LA624_0>=Promisify && LA624_0<=Abstract)||LA624_0==External||(LA624_0>=Private && LA624_0<=Project)||LA624_0==Public||LA624_0==Static||LA624_0==Target||(LA624_0>=Async && LA624_0<=Await)||LA624_0==Union||(LA624_0>=Yield && LA624_0<=This)||LA624_0==From||LA624_0==Type||(LA624_0>=Get && LA624_0<=Let)||(LA624_0>=Out && LA624_0<=Set)||LA624_0==As||LA624_0==Of||LA624_0==RULE_IDENTIFIER) ) {
            alt624=1;
        }
        switch (alt624) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred17_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred20_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred21_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred35_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred36_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred39_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred40_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred43_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred44_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred47_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred48_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred49_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred50_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred53_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred54_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop656:
        do {
            int alt656=2;
            int LA656_0 = input.LA(1);

            if ( ((LA656_0>=Protected && LA656_0<=Abstract)||LA656_0==External||(LA656_0>=Private && LA656_0<=Project)||LA656_0==Public||LA656_0==Static||LA656_0==Const) ) {
                alt656=1;
            }


            switch (alt656) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop656;
            }
        } while (true);

        pushFollow(FOLLOW_46);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred55_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred56_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_85);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred58_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop657:
        do {
            int alt657=2;
            int LA657_0 = input.LA(1);

            if ( ((LA657_0>=Protected && LA657_0<=Abstract)||LA657_0==External||(LA657_0>=Private && LA657_0<=Project)||LA657_0==Public||LA657_0==Static||LA657_0==Const) ) {
                alt657=1;
            }


            switch (alt657) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop657;
            }
        } while (true);

        pushFollow(FOLLOW_46);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred59_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred60_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_85);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred61_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_132); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred79_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred80_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred81_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred82_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred83_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt658=2;
        int LA658_0 = input.LA(1);

        if ( (LA658_0==Colon) ) {
            alt658=1;
        }
        switch (alt658) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred84_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt659=2;
        int LA659_0 = input.LA(1);

        if ( (LA659_0==Colon) ) {
            alt659=1;
        }
        switch (alt659) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred85_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt660=2;
        int LA660_0 = input.LA(1);

        if ( (LA660_0==Colon) ) {
            alt660=1;
        }
        switch (alt660) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred86_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_43);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt661=2;
        int LA661_0 = input.LA(1);

        if ( (LA661_0==Colon) ) {
            alt661=1;
        }
        switch (alt661) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred87_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_73);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_54); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_68);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_74);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt662=2;
        int LA662_0 = input.LA(1);

        if ( (LA662_0==In) ) {
            alt662=1;
        }
        else if ( (LA662_0==Of) ) {
            alt662=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 662, 0, input);

            throw nvae;
        }
        switch (alt662) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_125); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_125); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt663=2;
        int LA663_0 = input.LA(1);

        if ( ((LA663_0>=Intersection && LA663_0<=Implements)||(LA663_0>=Promisify && LA663_0<=Abstract)||(LA663_0>=External && LA663_0<=Function)||(LA663_0>=Private && LA663_0<=Delete)||LA663_0==Public||LA663_0==Static||(LA663_0>=Target && LA663_0<=Await)||LA663_0==Class||(LA663_0>=False && LA663_0<=Super)||LA663_0==Union||(LA663_0>=Yield && LA663_0<=This)||(LA663_0>=From && LA663_0<=Void)||(LA663_0>=Get && LA663_0<=Set)||LA663_0==PlusSignPlusSign||LA663_0==HyphenMinusHyphenMinus||LA663_0==SolidusEqualsSign||LA663_0==As||LA663_0==Of||LA663_0==ExclamationMark||LA663_0==LeftParenthesis||LA663_0==PlusSign||LA663_0==HyphenMinus||LA663_0==Solidus||LA663_0==LessThanSign||(LA663_0>=CommercialAt && LA663_0<=LeftSquareBracket)||LA663_0==LeftCurlyBracket||LA663_0==Tilde||LA663_0==RULE_DOUBLE||(LA663_0>=RULE_HEX_INT && LA663_0<=RULE_LEGACY_OCTAL_INT)||LA663_0==RULE_SCIENTIFIC_INT||LA663_0==RULE_IDENTIFIER||LA663_0==RULE_STRING||(LA663_0>=RULE_TEMPLATE_HEAD && LA663_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA663_0==RULE_INT) ) {
            alt663=1;
        }
        switch (alt663) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred98_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred99_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_73);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_54); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_68);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_74);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt664=2;
        int LA664_0 = input.LA(1);

        if ( (LA664_0==In) ) {
            alt664=1;
        }
        else if ( (LA664_0==Of) ) {
            alt664=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 664, 0, input);

            throw nvae;
        }
        switch (alt664) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_125); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_125); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt665=2;
        int LA665_0 = input.LA(1);

        if ( ((LA665_0>=Intersection && LA665_0<=Implements)||(LA665_0>=Promisify && LA665_0<=Abstract)||(LA665_0>=External && LA665_0<=Function)||(LA665_0>=Private && LA665_0<=Delete)||LA665_0==Public||LA665_0==Static||(LA665_0>=Target && LA665_0<=Await)||LA665_0==Class||(LA665_0>=False && LA665_0<=Super)||LA665_0==Union||(LA665_0>=Yield && LA665_0<=This)||(LA665_0>=From && LA665_0<=Void)||(LA665_0>=Get && LA665_0<=Set)||LA665_0==PlusSignPlusSign||LA665_0==HyphenMinusHyphenMinus||LA665_0==SolidusEqualsSign||LA665_0==As||LA665_0==Of||LA665_0==ExclamationMark||LA665_0==LeftParenthesis||LA665_0==PlusSign||LA665_0==HyphenMinus||LA665_0==Solidus||LA665_0==LessThanSign||(LA665_0>=CommercialAt && LA665_0<=LeftSquareBracket)||LA665_0==LeftCurlyBracket||LA665_0==Tilde||LA665_0==RULE_DOUBLE||(LA665_0>=RULE_HEX_INT && LA665_0<=RULE_LEGACY_OCTAL_INT)||LA665_0==RULE_SCIENTIFIC_INT||LA665_0==RULE_IDENTIFIER||LA665_0==RULE_STRING||(LA665_0>=RULE_TEMPLATE_HEAD && LA665_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA665_0==RULE_INT) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_85);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred112_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred113_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_85);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred117_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_45); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_45); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred119_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt666=2;
        alt666 = dfa666.predict(input);
        switch (alt666) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_85);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred120_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred122_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt667=2;
        int LA667_0 = input.LA(1);

        if ( (LA667_0==LessThanSign) ) {
            alt667=1;
        }
        switch (alt667) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt668=2;
        alt668 = dfa668.predict(input);
        switch (alt668) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_96);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt669=2;
        int LA669_0 = input.LA(1);

        if ( (LA669_0==Asterisk) ) {
            alt669=1;
        }
        else if ( ((LA669_0>=Intersection && LA669_0<=With)||(LA669_0>=For && LA669_0<=Var)||(LA669_0>=As && LA669_0<=Of)||LA669_0==LeftSquareBracket||LA669_0==RULE_DOUBLE||LA669_0==RULE_HEX_INT||LA669_0==RULE_OCTAL_INT||LA669_0==RULE_SCIENTIFIC_INT||LA669_0==RULE_IDENTIFIER||LA669_0==RULE_STRING||LA669_0==RULE_INT) ) {
            alt669=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 669, 0, input);

            throw nvae;
        }
        switch (alt669) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred123_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt670=2;
        alt670 = dfa670.predict(input);
        switch (alt670) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_85);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred124_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred125_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt671=2;
        int LA671_0 = input.LA(1);

        if ( (LA671_0==LessThanSign) ) {
            alt671=1;
        }
        switch (alt671) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt672=2;
        alt672 = dfa672.predict(input);
        switch (alt672) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_96);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt673=2;
        int LA673_0 = input.LA(1);

        if ( (LA673_0==Asterisk) ) {
            alt673=1;
        }
        else if ( ((LA673_0>=Intersection && LA673_0<=With)||(LA673_0>=For && LA673_0<=Var)||(LA673_0>=As && LA673_0<=Of)||LA673_0==LeftSquareBracket||LA673_0==RULE_DOUBLE||LA673_0==RULE_HEX_INT||LA673_0==RULE_OCTAL_INT||LA673_0==RULE_SCIENTIFIC_INT||LA673_0==RULE_IDENTIFIER||LA673_0==RULE_STRING||LA673_0==RULE_INT) ) {
            alt673=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 673, 0, input);

            throw nvae;
        }
        switch (alt673) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt674=2;
        alt674 = dfa674.predict(input);
        switch (alt674) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_85);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt675=2;
        int LA675_0 = input.LA(1);

        if ( (LA675_0==LessThanSign) ) {
            alt675=1;
        }
        switch (alt675) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt676=2;
        alt676 = dfa676.predict(input);
        switch (alt676) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_96);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt677=2;
        int LA677_0 = input.LA(1);

        if ( (LA677_0==Asterisk) ) {
            alt677=1;
        }
        else if ( ((LA677_0>=Intersection && LA677_0<=With)||(LA677_0>=For && LA677_0<=Var)||(LA677_0>=As && LA677_0<=Of)||LA677_0==LeftSquareBracket||LA677_0==RULE_DOUBLE||LA677_0==RULE_HEX_INT||LA677_0==RULE_OCTAL_INT||LA677_0==RULE_SCIENTIFIC_INT||LA677_0==RULE_IDENTIFIER||LA677_0==RULE_STRING||LA677_0==RULE_INT) ) {
            alt677=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 677, 0, input);

            throw nvae;
        }
        switch (alt677) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt678=2;
        alt678 = dfa678.predict(input);
        switch (alt678) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_85);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt679=2;
        int LA679_0 = input.LA(1);

        if ( (LA679_0==LessThanSign) ) {
            alt679=1;
        }
        switch (alt679) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt680=2;
        alt680 = dfa680.predict(input);
        switch (alt680) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_96);
                ruleTypeRefWithModifiers();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt681=2;
        int LA681_0 = input.LA(1);

        if ( (LA681_0==Asterisk) ) {
            alt681=1;
        }
        else if ( ((LA681_0>=Intersection && LA681_0<=With)||(LA681_0>=For && LA681_0<=Var)||(LA681_0>=As && LA681_0<=Of)||LA681_0==LeftSquareBracket||LA681_0==RULE_DOUBLE||LA681_0==RULE_HEX_INT||LA681_0==RULE_OCTAL_INT||LA681_0==RULE_SCIENTIFIC_INT||LA681_0==RULE_IDENTIFIER||LA681_0==RULE_STRING||LA681_0==RULE_INT) ) {
            alt681=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 681, 0, input);

            throw nvae;
        }
        switch (alt681) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred163_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred164_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred165_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_102); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred166_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred167_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred168_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred169_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_102); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred170_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred171_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred172_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred173_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred174_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred175_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred176_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred177_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred178_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_54);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_180);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_180);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred191_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred193_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred195_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred197_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred199_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt696=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt696=1;
            }
            break;
        case Async:
            {
            int LA696_2 = input.LA(2);

            if ( (LA696_2==RULE_NO_LINE_TERMINATOR) && (synpred221_InternalN4JSParser())) {
                alt696=2;
            }
            else if ( (LA696_2==LeftParenthesis) && (synpred221_InternalN4JSParser())) {
                alt696=2;
            }
            else if ( (LA696_2==EqualsSignGreaterThanSign) ) {
                alt696=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 696, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt696=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 696, 0, input);

            throw nvae;
        }

        switch (alt696) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;
                int alt691=2;
                int LA691_0 = input.LA(1);

                if ( ((LA691_0>=Intersection && LA691_0<=Implements)||(LA691_0>=Promisify && LA691_0<=Abstract)||LA691_0==External||(LA691_0>=Private && LA691_0<=Project)||LA691_0==Public||LA691_0==Static||LA691_0==Target||(LA691_0>=Async && LA691_0<=Await)||LA691_0==Union||(LA691_0>=Yield && LA691_0<=This)||LA691_0==From||LA691_0==This_1||(LA691_0>=Type && LA691_0<=Void)||LA691_0==FullStopFullStopFullStop||(LA691_0>=Get && LA691_0<=Let)||(LA691_0>=Out && LA691_0<=Set)||LA691_0==As||LA691_0==Of||(LA691_0>=QuestionMark && LA691_0<=LeftSquareBracket)||LA691_0==LeftCurlyBracket||LA691_0==Tilde||LA691_0==RULE_IDENTIFIER) ) {
                    alt691=1;
                }
                switch (alt691) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop690:
                        do {
                            int alt690=2;
                            int LA690_0 = input.LA(1);

                            if ( (LA690_0==Comma) ) {
                                alt690=1;
                            }


                            switch (alt690) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop690;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt692=2;
                int LA692_0 = input.LA(1);

                if ( (LA692_0==Colon) ) {
                    alt692=1;
                }
                switch (alt692) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt694=2;
                int LA694_0 = input.LA(1);

                if ( ((LA694_0>=Intersection && LA694_0<=Implements)||(LA694_0>=Promisify && LA694_0<=Abstract)||LA694_0==External||(LA694_0>=Private && LA694_0<=Project)||LA694_0==Public||LA694_0==Static||LA694_0==Target||(LA694_0>=Async && LA694_0<=Await)||LA694_0==Union||(LA694_0>=Yield && LA694_0<=This)||LA694_0==From||LA694_0==This_1||(LA694_0>=Type && LA694_0<=Void)||LA694_0==FullStopFullStopFullStop||(LA694_0>=Get && LA694_0<=Let)||(LA694_0>=Out && LA694_0<=Set)||LA694_0==As||LA694_0==Of||(LA694_0>=QuestionMark && LA694_0<=LeftSquareBracket)||LA694_0==LeftCurlyBracket||LA694_0==Tilde||LA694_0==RULE_IDENTIFIER) ) {
                    alt694=1;
                }
                switch (alt694) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop693:
                        do {
                            int alt693=2;
                            int LA693_0 = input.LA(1);

                            if ( (LA693_0==Comma) ) {
                                alt693=1;
                            }


                            switch (alt693) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop693;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt695=2;
                int LA695_0 = input.LA(1);

                if ( (LA695_0==Colon) ) {
                    alt695=1;
                }
                switch (alt695) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt703=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt703=1;
            }
            break;
        case Async:
            {
            int LA703_2 = input.LA(2);

            if ( (LA703_2==EqualsSignGreaterThanSign) ) {
                alt703=3;
            }
            else if ( (LA703_2==RULE_NO_LINE_TERMINATOR) && (synpred226_InternalN4JSParser())) {
                alt703=2;
            }
            else if ( (LA703_2==LeftParenthesis) && (synpred226_InternalN4JSParser())) {
                alt703=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 703, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt703=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 703, 0, input);

            throw nvae;
        }

        switch (alt703) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;
                int alt698=2;
                int LA698_0 = input.LA(1);

                if ( ((LA698_0>=Intersection && LA698_0<=Implements)||(LA698_0>=Promisify && LA698_0<=Abstract)||LA698_0==External||(LA698_0>=Private && LA698_0<=Project)||LA698_0==Public||LA698_0==Static||LA698_0==Target||(LA698_0>=Async && LA698_0<=Await)||LA698_0==Union||(LA698_0>=Yield && LA698_0<=This)||LA698_0==From||LA698_0==This_1||(LA698_0>=Type && LA698_0<=Void)||LA698_0==FullStopFullStopFullStop||(LA698_0>=Get && LA698_0<=Let)||(LA698_0>=Out && LA698_0<=Set)||LA698_0==As||LA698_0==Of||(LA698_0>=QuestionMark && LA698_0<=LeftSquareBracket)||LA698_0==LeftCurlyBracket||LA698_0==Tilde||LA698_0==RULE_IDENTIFIER) ) {
                    alt698=1;
                }
                switch (alt698) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop697:
                        do {
                            int alt697=2;
                            int LA697_0 = input.LA(1);

                            if ( (LA697_0==Comma) ) {
                                alt697=1;
                            }


                            switch (alt697) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop697;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt699=2;
                int LA699_0 = input.LA(1);

                if ( (LA699_0==Colon) ) {
                    alt699=1;
                }
                switch (alt699) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt701=2;
                int LA701_0 = input.LA(1);

                if ( ((LA701_0>=Intersection && LA701_0<=Implements)||(LA701_0>=Promisify && LA701_0<=Abstract)||LA701_0==External||(LA701_0>=Private && LA701_0<=Project)||LA701_0==Public||LA701_0==Static||LA701_0==Target||(LA701_0>=Async && LA701_0<=Await)||LA701_0==Union||(LA701_0>=Yield && LA701_0<=This)||LA701_0==From||LA701_0==This_1||(LA701_0>=Type && LA701_0<=Void)||LA701_0==FullStopFullStopFullStop||(LA701_0>=Get && LA701_0<=Let)||(LA701_0>=Out && LA701_0<=Set)||LA701_0==As||LA701_0==Of||(LA701_0>=QuestionMark && LA701_0<=LeftSquareBracket)||LA701_0==LeftCurlyBracket||LA701_0==Tilde||LA701_0==RULE_IDENTIFIER) ) {
                    alt701=1;
                }
                switch (alt701) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop700:
                        do {
                            int alt700=2;
                            int LA700_0 = input.LA(1);

                            if ( (LA700_0==Comma) ) {
                                alt700=1;
                            }


                            switch (alt700) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop700;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt702=2;
                int LA702_0 = input.LA(1);

                if ( (LA702_0==Colon) ) {
                    alt702=1;
                }
                switch (alt702) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt710=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt710=1;
            }
            break;
        case Async:
            {
            int LA710_2 = input.LA(2);

            if ( (LA710_2==RULE_NO_LINE_TERMINATOR) && (synpred231_InternalN4JSParser())) {
                alt710=2;
            }
            else if ( (LA710_2==LeftParenthesis) && (synpred231_InternalN4JSParser())) {
                alt710=2;
            }
            else if ( (LA710_2==EqualsSignGreaterThanSign) ) {
                alt710=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 710, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt710=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 710, 0, input);

            throw nvae;
        }

        switch (alt710) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;
                int alt705=2;
                int LA705_0 = input.LA(1);

                if ( ((LA705_0>=Intersection && LA705_0<=Implements)||(LA705_0>=Promisify && LA705_0<=Abstract)||LA705_0==External||(LA705_0>=Private && LA705_0<=Project)||LA705_0==Public||LA705_0==Static||LA705_0==Target||(LA705_0>=Async && LA705_0<=Await)||LA705_0==Union||LA705_0==This||LA705_0==From||LA705_0==This_1||(LA705_0>=Type && LA705_0<=Void)||LA705_0==FullStopFullStopFullStop||(LA705_0>=Get && LA705_0<=Let)||(LA705_0>=Out && LA705_0<=Set)||LA705_0==As||LA705_0==Of||(LA705_0>=QuestionMark && LA705_0<=LeftSquareBracket)||LA705_0==LeftCurlyBracket||LA705_0==Tilde||LA705_0==RULE_IDENTIFIER) ) {
                    alt705=1;
                }
                switch (alt705) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop704:
                        do {
                            int alt704=2;
                            int LA704_0 = input.LA(1);

                            if ( (LA704_0==Comma) ) {
                                alt704=1;
                            }


                            switch (alt704) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop704;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt706=2;
                int LA706_0 = input.LA(1);

                if ( (LA706_0==Colon) ) {
                    alt706=1;
                }
                switch (alt706) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt708=2;
                int LA708_0 = input.LA(1);

                if ( ((LA708_0>=Intersection && LA708_0<=Implements)||(LA708_0>=Promisify && LA708_0<=Abstract)||LA708_0==External||(LA708_0>=Private && LA708_0<=Project)||LA708_0==Public||LA708_0==Static||LA708_0==Target||(LA708_0>=Async && LA708_0<=Await)||LA708_0==Union||LA708_0==This||LA708_0==From||LA708_0==This_1||(LA708_0>=Type && LA708_0<=Void)||LA708_0==FullStopFullStopFullStop||(LA708_0>=Get && LA708_0<=Let)||(LA708_0>=Out && LA708_0<=Set)||LA708_0==As||LA708_0==Of||(LA708_0>=QuestionMark && LA708_0<=LeftSquareBracket)||LA708_0==LeftCurlyBracket||LA708_0==Tilde||LA708_0==RULE_IDENTIFIER) ) {
                    alt708=1;
                }
                switch (alt708) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop707:
                        do {
                            int alt707=2;
                            int LA707_0 = input.LA(1);

                            if ( (LA707_0==Comma) ) {
                                alt707=1;
                            }


                            switch (alt707) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop707;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt709=2;
                int LA709_0 = input.LA(1);

                if ( (LA709_0==Colon) ) {
                    alt709=1;
                }
                switch (alt709) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_128); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_52); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_53);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt717=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt717=1;
            }
            break;
        case Async:
            {
            int LA717_2 = input.LA(2);

            if ( (LA717_2==EqualsSignGreaterThanSign) ) {
                alt717=3;
            }
            else if ( (LA717_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSParser())) {
                alt717=2;
            }
            else if ( (LA717_2==LeftParenthesis) && (synpred236_InternalN4JSParser())) {
                alt717=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 717, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Out:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt717=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 717, 0, input);

            throw nvae;
        }

        switch (alt717) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;
                int alt712=2;
                int LA712_0 = input.LA(1);

                if ( ((LA712_0>=Intersection && LA712_0<=Implements)||(LA712_0>=Promisify && LA712_0<=Abstract)||LA712_0==External||(LA712_0>=Private && LA712_0<=Project)||LA712_0==Public||LA712_0==Static||LA712_0==Target||(LA712_0>=Async && LA712_0<=Await)||LA712_0==Union||LA712_0==This||LA712_0==From||LA712_0==This_1||(LA712_0>=Type && LA712_0<=Void)||LA712_0==FullStopFullStopFullStop||(LA712_0>=Get && LA712_0<=Let)||(LA712_0>=Out && LA712_0<=Set)||LA712_0==As||LA712_0==Of||(LA712_0>=QuestionMark && LA712_0<=LeftSquareBracket)||LA712_0==LeftCurlyBracket||LA712_0==Tilde||LA712_0==RULE_IDENTIFIER) ) {
                    alt712=1;
                }
                switch (alt712) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop711:
                        do {
                            int alt711=2;
                            int LA711_0 = input.LA(1);

                            if ( (LA711_0==Comma) ) {
                                alt711=1;
                            }


                            switch (alt711) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop711;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt713=2;
                int LA713_0 = input.LA(1);

                if ( (LA713_0==Colon) ) {
                    alt713=1;
                }
                switch (alt713) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_52); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_53);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return ;

                }


                }
                int alt715=2;
                int LA715_0 = input.LA(1);

                if ( ((LA715_0>=Intersection && LA715_0<=Implements)||(LA715_0>=Promisify && LA715_0<=Abstract)||LA715_0==External||(LA715_0>=Private && LA715_0<=Project)||LA715_0==Public||LA715_0==Static||LA715_0==Target||(LA715_0>=Async && LA715_0<=Await)||LA715_0==Union||LA715_0==This||LA715_0==From||LA715_0==This_1||(LA715_0>=Type && LA715_0<=Void)||LA715_0==FullStopFullStopFullStop||(LA715_0>=Get && LA715_0<=Let)||(LA715_0>=Out && LA715_0<=Set)||LA715_0==As||LA715_0==Of||(LA715_0>=QuestionMark && LA715_0<=LeftSquareBracket)||LA715_0==LeftCurlyBracket||LA715_0==Tilde||LA715_0==RULE_IDENTIFIER) ) {
                    alt715=1;
                }
                switch (alt715) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_48);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop714:
                        do {
                            int alt714=2;
                            int LA714_0 = input.LA(1);

                            if ( (LA714_0==Comma) ) {
                                alt714=1;
                            }


                            switch (alt714) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_49); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_48);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop714;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_50); if (state.failed) return ;
                int alt716=2;
                int LA716_0 = input.LA(1);

                if ( (LA716_0==Colon) ) {
                    alt716=1;
                }
                switch (alt716) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_44); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_51);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_51);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred255_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop726:
        do {
            int alt726=2;
            int LA726_0 = input.LA(1);

            if ( ((LA726_0>=Protected && LA726_0<=Abstract)||LA726_0==External||(LA726_0>=Private && LA726_0<=Project)||LA726_0==Public||LA726_0==Static||LA726_0==Const) ) {
                alt726=1;
            }


            switch (alt726) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop726;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop727:
        do {
            int alt727=2;
            int LA727_0 = input.LA(1);

            if ( ((LA727_0>=Protected && LA727_0<=Abstract)||LA727_0==External||(LA727_0>=Private && LA727_0<=Project)||LA727_0==Public||LA727_0==Static||LA727_0==Const) ) {
                alt727=1;
            }


            switch (alt727) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_147);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop727;
            }
        } while (true);

        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop728:
        do {
            int alt728=2;
            alt728 = dfa728.predict(input);
            switch (alt728) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop728;
            }
        } while (true);
        int alt729=2;
        int LA729_0 = input.LA(1);

        if ( (LA729_0==LessThanSign) ) {
            alt729=1;
        }
        switch (alt729) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt730=2;
        alt730 = dfa730.predict(input);
        switch (alt730) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt731=2;
        int LA731_0 = input.LA(1);

        if ( (LA731_0==Asterisk) ) {
            alt731=1;
        }
        else if ( ((LA731_0>=Intersection && LA731_0<=With)||(LA731_0>=For && LA731_0<=Var)||(LA731_0>=As && LA731_0<=Of)||LA731_0==LeftSquareBracket||LA731_0==RULE_DOUBLE||LA731_0==RULE_HEX_INT||LA731_0==RULE_OCTAL_INT||LA731_0==RULE_SCIENTIFIC_INT||LA731_0==RULE_IDENTIFIER||LA731_0==RULE_STRING||LA731_0==RULE_INT) ) {
            alt731=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 731, 0, input);

            throw nvae;
        }
        switch (alt731) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred262_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop732:
        do {
            int alt732=2;
            int LA732_0 = input.LA(1);

            if ( ((LA732_0>=Protected && LA732_0<=Abstract)||LA732_0==External||(LA732_0>=Private && LA732_0<=Project)||LA732_0==Public||LA732_0==Static||LA732_0==Const) ) {
                alt732=1;
            }


            switch (alt732) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop732;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred263_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop733:
        do {
            int alt733=2;
            int LA733_0 = input.LA(1);

            if ( ((LA733_0>=Protected && LA733_0<=Abstract)||LA733_0==External||(LA733_0>=Private && LA733_0<=Project)||LA733_0==Public||LA733_0==Static||LA733_0==Const) ) {
                alt733=1;
            }


            switch (alt733) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_147);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop733;
            }
        } while (true);

        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred264_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop734:
        do {
            int alt734=2;
            alt734 = dfa734.predict(input);
            switch (alt734) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop734;
            }
        } while (true);
        int alt735=2;
        int LA735_0 = input.LA(1);

        if ( (LA735_0==LessThanSign) ) {
            alt735=1;
        }
        switch (alt735) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt736=2;
        alt736 = dfa736.predict(input);
        switch (alt736) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt737=2;
        int LA737_0 = input.LA(1);

        if ( (LA737_0==Asterisk) ) {
            alt737=1;
        }
        else if ( ((LA737_0>=Intersection && LA737_0<=With)||(LA737_0>=For && LA737_0<=Var)||(LA737_0>=As && LA737_0<=Of)||LA737_0==LeftSquareBracket||LA737_0==RULE_DOUBLE||LA737_0==RULE_HEX_INT||LA737_0==RULE_OCTAL_INT||LA737_0==RULE_SCIENTIFIC_INT||LA737_0==RULE_IDENTIFIER||LA737_0==RULE_STRING||LA737_0==RULE_INT) ) {
            alt737=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 737, 0, input);

            throw nvae;
        }
        switch (alt737) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred265_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop738:
        do {
            int alt738=2;
            int LA738_0 = input.LA(1);

            if ( ((LA738_0>=Protected && LA738_0<=Abstract)||LA738_0==External||(LA738_0>=Private && LA738_0<=Project)||LA738_0==Public||LA738_0==Static||LA738_0==Const) ) {
                alt738=1;
            }


            switch (alt738) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop738;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred266_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred267_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop739:
        do {
            int alt739=2;
            int LA739_0 = input.LA(1);

            if ( ((LA739_0>=Protected && LA739_0<=Abstract)||LA739_0==External||(LA739_0>=Private && LA739_0<=Project)||LA739_0==Public||LA739_0==Static||LA739_0==Const) ) {
                alt739=1;
            }


            switch (alt739) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_147);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop739;
            }
        } while (true);

        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred269_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred270_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop740:
        do {
            int alt740=2;
            alt740 = dfa740.predict(input);
            switch (alt740) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop740;
            }
        } while (true);
        int alt741=2;
        int LA741_0 = input.LA(1);

        if ( (LA741_0==LessThanSign) ) {
            alt741=1;
        }
        switch (alt741) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt742=2;
        alt742 = dfa742.predict(input);
        switch (alt742) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt743=2;
        int LA743_0 = input.LA(1);

        if ( (LA743_0==Asterisk) ) {
            alt743=1;
        }
        else if ( ((LA743_0>=Intersection && LA743_0<=With)||(LA743_0>=For && LA743_0<=Var)||(LA743_0>=As && LA743_0<=Of)||LA743_0==LeftSquareBracket||LA743_0==RULE_DOUBLE||LA743_0==RULE_HEX_INT||LA743_0==RULE_OCTAL_INT||LA743_0==RULE_SCIENTIFIC_INT||LA743_0==RULE_IDENTIFIER||LA743_0==RULE_STRING||LA743_0==RULE_INT) ) {
            alt743=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 743, 0, input);

            throw nvae;
        }
        switch (alt743) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred273_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop744:
        do {
            int alt744=2;
            int LA744_0 = input.LA(1);

            if ( ((LA744_0>=Protected && LA744_0<=Abstract)||LA744_0==External||(LA744_0>=Private && LA744_0<=Project)||LA744_0==Public||LA744_0==Static||LA744_0==Const) ) {
                alt744=1;
            }


            switch (alt744) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_145);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop744;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred274_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop745:
        do {
            int alt745=2;
            int LA745_0 = input.LA(1);

            if ( ((LA745_0>=Protected && LA745_0<=Abstract)||LA745_0==External||(LA745_0>=Private && LA745_0<=Project)||LA745_0==Public||LA745_0==Static||LA745_0==Const) ) {
                alt745=1;
            }


            switch (alt745) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_147);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop745;
            }
        } while (true);

        match(input,Set,FOLLOW_179); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred277_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop746:
        do {
            int alt746=2;
            alt746 = dfa746.predict(input);
            switch (alt746) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_144);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop746;
            }
        } while (true);
        int alt747=2;
        int LA747_0 = input.LA(1);

        if ( (LA747_0==LessThanSign) ) {
            alt747=1;
        }
        switch (alt747) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt748=2;
        alt748 = dfa748.predict(input);
        switch (alt748) {
            case 1 :
                {
                pushFollow(FOLLOW_96);
                ruleBogusTypeRefFragment();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt749=2;
        int LA749_0 = input.LA(1);

        if ( (LA749_0==Asterisk) ) {
            alt749=1;
        }
        else if ( ((LA749_0>=Intersection && LA749_0<=With)||(LA749_0>=For && LA749_0<=Var)||(LA749_0>=As && LA749_0<=Of)||LA749_0==LeftSquareBracket||LA749_0==RULE_DOUBLE||LA749_0==RULE_HEX_INT||LA749_0==RULE_OCTAL_INT||LA749_0==RULE_SCIENTIFIC_INT||LA749_0==RULE_IDENTIFIER||LA749_0==RULE_STRING||LA749_0==RULE_INT) ) {
            alt749=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 749, 0, input);

            throw nvae;
        }
        switch (alt749) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_95); if (state.failed) return ;

                }


                }
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_95);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_53);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;

                }


                }

                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred287_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred288_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred290_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred292_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred299_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred302_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred303_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_85);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred304_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_85);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred305_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred306_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred308_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_157); if (state.failed) return ;
        pushFollow(FOLLOW_68);
        ruleTAnonymousFormalParameterList();

        state._fsp--;
        if (state.failed) return ;
        match(input,RightParenthesis,FOLLOW_51); if (state.failed) return ;
        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred310_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleUndefModifierToken();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred314_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred315_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred316_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_27); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred317_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_27); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred318_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt763=2;
        int LA763_0 = input.LA(1);

        if ( (LA763_0==LessThanSign) ) {
            alt763=1;
        }
        switch (alt763) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_16); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_17);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                loop762:
                do {
                    int alt762=2;
                    int LA762_0 = input.LA(1);

                    if ( (LA762_0==Comma) ) {
                        alt762=1;
                    }


                    switch (alt762) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_16); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_17);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop762;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_27); if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_53);
        ruleIdentifierName();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred322_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred166_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred302_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred302_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred303_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred303_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred318_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred318_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred287_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred287_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred299_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred299_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred288_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred288_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA81 dfa81 = new DFA81(this);
    protected DFA89 dfa89 = new DFA89(this);
    protected DFA97 dfa97 = new DFA97(this);
    protected DFA105 dfa105 = new DFA105(this);
    protected DFA125 dfa125 = new DFA125(this);
    protected DFA122 dfa122 = new DFA122(this);
    protected DFA131 dfa131 = new DFA131(this);
    protected DFA128 dfa128 = new DFA128(this);
    protected DFA135 dfa135 = new DFA135(this);
    protected DFA136 dfa136 = new DFA136(this);
    protected DFA137 dfa137 = new DFA137(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA153 dfa153 = new DFA153(this);
    protected DFA155 dfa155 = new DFA155(this);
    protected DFA157 dfa157 = new DFA157(this);
    protected DFA159 dfa159 = new DFA159(this);
    protected DFA161 dfa161 = new DFA161(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA179 dfa179 = new DFA179(this);
    protected DFA198 dfa198 = new DFA198(this);
    protected DFA197 dfa197 = new DFA197(this);
    protected DFA189 dfa189 = new DFA189(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA216 dfa216 = new DFA216(this);
    protected DFA215 dfa215 = new DFA215(this);
    protected DFA207 dfa207 = new DFA207(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA238 dfa238 = new DFA238(this);
    protected DFA237 dfa237 = new DFA237(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA239 dfa239 = new DFA239(this);
    protected DFA241 dfa241 = new DFA241(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA245 dfa245 = new DFA245(this);
    protected DFA251 dfa251 = new DFA251(this);
    protected DFA263 dfa263 = new DFA263(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA272 dfa272 = new DFA272(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA267 dfa267 = new DFA267(this);
    protected DFA270 dfa270 = new DFA270(this);
    protected DFA280 dfa280 = new DFA280(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA275 dfa275 = new DFA275(this);
    protected DFA278 dfa278 = new DFA278(this);
    protected DFA282 dfa282 = new DFA282(this);
    protected DFA286 dfa286 = new DFA286(this);
    protected DFA289 dfa289 = new DFA289(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA293 dfa293 = new DFA293(this);
    protected DFA311 dfa311 = new DFA311(this);
    protected DFA317 dfa317 = new DFA317(this);
    protected DFA330 dfa330 = new DFA330(this);
    protected DFA331 dfa331 = new DFA331(this);
    protected DFA334 dfa334 = new DFA334(this);
    protected DFA335 dfa335 = new DFA335(this);
    protected DFA336 dfa336 = new DFA336(this);
    protected DFA337 dfa337 = new DFA337(this);
    protected DFA369 dfa369 = new DFA369(this);
    protected DFA368 dfa368 = new DFA368(this);
    protected DFA371 dfa371 = new DFA371(this);
    protected DFA370 dfa370 = new DFA370(this);
    protected DFA373 dfa373 = new DFA373(this);
    protected DFA372 dfa372 = new DFA372(this);
    protected DFA375 dfa375 = new DFA375(this);
    protected DFA374 dfa374 = new DFA374(this);
    protected DFA377 dfa377 = new DFA377(this);
    protected DFA379 dfa379 = new DFA379(this);
    protected DFA410 dfa410 = new DFA410(this);
    protected DFA452 dfa452 = new DFA452(this);
    protected DFA453 dfa453 = new DFA453(this);
    protected DFA465 dfa465 = new DFA465(this);
    protected DFA455 dfa455 = new DFA455(this);
    protected DFA458 dfa458 = new DFA458(this);
    protected DFA460 dfa460 = new DFA460(this);
    protected DFA462 dfa462 = new DFA462(this);
    protected DFA477 dfa477 = new DFA477(this);
    protected DFA467 dfa467 = new DFA467(this);
    protected DFA470 dfa470 = new DFA470(this);
    protected DFA472 dfa472 = new DFA472(this);
    protected DFA474 dfa474 = new DFA474(this);
    protected DFA478 dfa478 = new DFA478(this);
    protected DFA479 dfa479 = new DFA479(this);
    protected DFA482 dfa482 = new DFA482(this);
    protected DFA483 dfa483 = new DFA483(this);
    protected DFA486 dfa486 = new DFA486(this);
    protected DFA488 dfa488 = new DFA488(this);
    protected DFA491 dfa491 = new DFA491(this);
    protected DFA493 dfa493 = new DFA493(this);
    protected DFA501 dfa501 = new DFA501(this);
    protected DFA503 dfa503 = new DFA503(this);
    protected DFA505 dfa505 = new DFA505(this);
    protected DFA508 dfa508 = new DFA508(this);
    protected DFA515 dfa515 = new DFA515(this);
    protected DFA518 dfa518 = new DFA518(this);
    protected DFA528 dfa528 = new DFA528(this);
    protected DFA534 dfa534 = new DFA534(this);
    protected DFA538 dfa538 = new DFA538(this);
    protected DFA539 dfa539 = new DFA539(this);
    protected DFA556 dfa556 = new DFA556(this);
    protected DFA560 dfa560 = new DFA560(this);
    protected DFA563 dfa563 = new DFA563(this);
    protected DFA574 dfa574 = new DFA574(this);
    protected DFA579 dfa579 = new DFA579(this);
    protected DFA581 dfa581 = new DFA581(this);
    protected DFA585 dfa585 = new DFA585(this);
    protected DFA666 dfa666 = new DFA666(this);
    protected DFA668 dfa668 = new DFA668(this);
    protected DFA670 dfa670 = new DFA670(this);
    protected DFA672 dfa672 = new DFA672(this);
    protected DFA674 dfa674 = new DFA674(this);
    protected DFA676 dfa676 = new DFA676(this);
    protected DFA678 dfa678 = new DFA678(this);
    protected DFA680 dfa680 = new DFA680(this);
    protected DFA728 dfa728 = new DFA728(this);
    protected DFA730 dfa730 = new DFA730(this);
    protected DFA734 dfa734 = new DFA734(this);
    protected DFA736 dfa736 = new DFA736(this);
    protected DFA740 dfa740 = new DFA740(this);
    protected DFA742 dfa742 = new DFA742(this);
    protected DFA746 dfa746 = new DFA746(this);
    protected DFA748 dfa748 = new DFA748(this);
    static final String dfa_1s = "\123\uffff";
    static final String dfa_2s = "\1\4\13\0\107\uffff";
    static final String dfa_3s = "\1\u0095\13\0\107\uffff";
    static final String dfa_4s = "\14\uffff\1\4\1\5\1\6\1\7\100\uffff\1\1\1\2\1\3";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\107\uffff}>";
    static final String[] dfa_6s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\6\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\10\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "85:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ImportDeclarationParserRuleCall_4= ruleImportDeclaration | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);

                         
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA3_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}

                        else if ( (LA3_0==Import) ) {s = 13;}

                        else if ( (LA3_0==Export) ) {s = 14;}

                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||LA3_0==HyphenMinusHyphenMinus||LA3_0==SolidusEqualsSign||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_HEX_INT && LA3_0<=RULE_LEGACY_OCTAL_INT)||LA3_0==RULE_SCIENTIFIC_INT||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);

                         
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);

                         
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);

                         
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);

                         
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);

                         
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);

                         
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\17\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_9s = "\1\55\2\uffff\10\55\4\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_11s = "\1\4\2\uffff\1\2\1\5\1\7\1\0\1\3\1\6\1\10\1\1\4\uffff}>";
    static final String[] dfa_12s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\3\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "198:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_4_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_7= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_6==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_6==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_6==Private) ) {s = 3;}

                        else if ( (LA16_6==Project) ) {s = 4;}

                        else if ( (LA16_6==Protected) ) {s = 5;}

                        else if ( (LA16_6==Public) ) {s = 6;}

                        else if ( (LA16_6==External) ) {s = 7;}

                        else if ( (LA16_6==Abstract) ) {s = 8;}

                        else if ( (LA16_6==Static) ) {s = 9;}

                        else if ( (LA16_6==Const) ) {s = 10;}

                        else if ( (LA16_6==Interface||LA16_6==Class) ) {s = 13;}

                        else if ( (LA16_6==Enum) ) {s = 14;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_10==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_10==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_10==Private) ) {s = 3;}

                        else if ( (LA16_10==Project) ) {s = 4;}

                        else if ( (LA16_10==Protected) ) {s = 5;}

                        else if ( (LA16_10==Public) ) {s = 6;}

                        else if ( (LA16_10==External) ) {s = 7;}

                        else if ( (LA16_10==Abstract) ) {s = 8;}

                        else if ( (LA16_10==Static) ) {s = 9;}

                        else if ( (LA16_10==Const) ) {s = 10;}

                        else if ( (LA16_10==Interface||LA16_10==Class) ) {s = 13;}

                        else if ( (LA16_10==Enum) ) {s = 14;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_3==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_3==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_3==Private) ) {s = 3;}

                        else if ( (LA16_3==Project) ) {s = 4;}

                        else if ( (LA16_3==Protected) ) {s = 5;}

                        else if ( (LA16_3==Public) ) {s = 6;}

                        else if ( (LA16_3==External) ) {s = 7;}

                        else if ( (LA16_3==Abstract) ) {s = 8;}

                        else if ( (LA16_3==Static) ) {s = 9;}

                        else if ( (LA16_3==Const) ) {s = 10;}

                        else if ( (LA16_3==Interface||LA16_3==Class) ) {s = 13;}

                        else if ( (LA16_3==Enum) ) {s = 14;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_7==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_7==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_7==Private) ) {s = 3;}

                        else if ( (LA16_7==Project) ) {s = 4;}

                        else if ( (LA16_7==Protected) ) {s = 5;}

                        else if ( (LA16_7==Public) ) {s = 6;}

                        else if ( (LA16_7==External) ) {s = 7;}

                        else if ( (LA16_7==Abstract) ) {s = 8;}

                        else if ( (LA16_7==Static) ) {s = 9;}

                        else if ( (LA16_7==Const) ) {s = 10;}

                        else if ( (LA16_7==Interface||LA16_7==Class) ) {s = 13;}

                        else if ( (LA16_7==Enum) ) {s = 14;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_0 = input.LA(1);

                         
                        int index16_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA16_0>=10 && LA16_0<=35 && (s=T2S.M_1[LA16_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA16_0==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_0==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_0==Interface||LA16_0==Class) ) {s = 13;}

                        else if ( (LA16_0==Enum) ) {s = 14;}

                         
                        input.seek(index16_0);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_4==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_4==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_4==Private) ) {s = 3;}

                        else if ( (LA16_4==Project) ) {s = 4;}

                        else if ( (LA16_4==Protected) ) {s = 5;}

                        else if ( (LA16_4==Public) ) {s = 6;}

                        else if ( (LA16_4==External) ) {s = 7;}

                        else if ( (LA16_4==Abstract) ) {s = 8;}

                        else if ( (LA16_4==Static) ) {s = 9;}

                        else if ( (LA16_4==Const) ) {s = 10;}

                        else if ( (LA16_4==Interface||LA16_4==Class) ) {s = 13;}

                        else if ( (LA16_4==Enum) ) {s = 14;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_8==Enum) ) {s = 14;}

                        else if ( (LA16_8==Private) ) {s = 3;}

                        else if ( (LA16_8==Project) ) {s = 4;}

                        else if ( (LA16_8==Protected) ) {s = 5;}

                        else if ( (LA16_8==Public) ) {s = 6;}

                        else if ( (LA16_8==External) ) {s = 7;}

                        else if ( (LA16_8==Abstract) ) {s = 8;}

                        else if ( (LA16_8==Static) ) {s = 9;}

                        else if ( (LA16_8==Const) ) {s = 10;}

                        else if ( (LA16_8==Interface||LA16_8==Class) ) {s = 13;}

                        else if ( (LA16_8==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_8==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_5==Enum) ) {s = 14;}

                        else if ( (LA16_5==Private) ) {s = 3;}

                        else if ( (LA16_5==Project) ) {s = 4;}

                        else if ( (LA16_5==Protected) ) {s = 5;}

                        else if ( (LA16_5==Public) ) {s = 6;}

                        else if ( (LA16_5==External) ) {s = 7;}

                        else if ( (LA16_5==Abstract) ) {s = 8;}

                        else if ( (LA16_5==Static) ) {s = 9;}

                        else if ( (LA16_5==Const) ) {s = 10;}

                        else if ( (LA16_5==Interface||LA16_5==Class) ) {s = 13;}

                        else if ( (LA16_5==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_5==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_9==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_9==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_9==Private) ) {s = 3;}

                        else if ( (LA16_9==Project) ) {s = 4;}

                        else if ( (LA16_9==Protected) ) {s = 5;}

                        else if ( (LA16_9==Public) ) {s = 6;}

                        else if ( (LA16_9==External) ) {s = 7;}

                        else if ( (LA16_9==Abstract) ) {s = 8;}

                        else if ( (LA16_9==Static) ) {s = 9;}

                        else if ( (LA16_9==Const) ) {s = 10;}

                        else if ( (LA16_9==Interface||LA16_9==Class) ) {s = 13;}

                        else if ( (LA16_9==Enum) ) {s = 14;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\43\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\7\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "236:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_19s = "\101\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_21s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\60\uffff}>";
    static final String[] dfa_24s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\2\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\3\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "457:4: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_0 = input.LA(1);

                         
                        int index19_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA19_0==CommercialAt) ) {s = 1;}

                        else if ( (LA19_0==Private) ) {s = 2;}

                        else if ( (LA19_0==Project) ) {s = 3;}

                        else if ( (LA19_0==Protected) ) {s = 4;}

                        else if ( (LA19_0==Public) ) {s = 5;}

                        else if ( (LA19_0==External) ) {s = 6;}

                        else if ( (LA19_0==Abstract) ) {s = 7;}

                        else if ( (LA19_0==Static) ) {s = 8;}

                        else if ( (LA19_0==Const) && (synpred9_InternalN4JSParser())) {s = 9;}

                        else if ( (LA19_0==Class) ) {s = 10;}

                        else if ( (LA19_0==Interface) ) {s = 11;}

                        else if ( (LA19_0==Enum) && (synpred9_InternalN4JSParser())) {s = 12;}

                        else if ( (LA19_0==Async) ) {s = 13;}

                        else if ( (LA19_0==Function) ) {s = 14;}

                        else if ( (LA19_0==Var) && (synpred9_InternalN4JSParser())) {s = 15;}

                        else if ( (LA19_0==Let) ) {s = 16;}

                        else if ( ((LA19_0>=Intersection && LA19_0<=Implements)||LA19_0==Promisify||LA19_0==Delete||(LA19_0>=Target && LA19_0<=Typeof)||LA19_0==Await||(LA19_0>=False && LA19_0<=Super)||LA19_0==Union||(LA19_0>=Yield && LA19_0<=This)||(LA19_0>=From && LA19_0<=Void)||LA19_0==Get||(LA19_0>=New && LA19_0<=Set)||LA19_0==PlusSignPlusSign||LA19_0==HyphenMinusHyphenMinus||LA19_0==SolidusEqualsSign||LA19_0==As||LA19_0==Of||LA19_0==ExclamationMark||LA19_0==LeftParenthesis||LA19_0==PlusSign||LA19_0==HyphenMinus||LA19_0==Solidus||LA19_0==LessThanSign||LA19_0==LeftSquareBracket||LA19_0==LeftCurlyBracket||LA19_0==Tilde||LA19_0==RULE_DOUBLE||(LA19_0>=RULE_HEX_INT && LA19_0<=RULE_LEGACY_OCTAL_INT)||LA19_0==RULE_SCIENTIFIC_INT||LA19_0==RULE_IDENTIFIER||LA19_0==RULE_STRING||(LA19_0>=RULE_TEMPLATE_HEAD && LA19_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA19_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index19_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_16 = input.LA(1);

                         
                        int index19_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\67\uffff";
    static final String dfa_26s = "\17\uffff\11\16\37\uffff";
    static final String dfa_27s = "\1\11\1\uffff\7\11\1\4\5\uffff\7\11\1\4\1\17\37\uffff";
    static final String dfa_28s = "\1\152\1\uffff\7\100\1\176\5\uffff\11\u0099\37\uffff";
    static final String dfa_29s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\11\uffff\37\3";
    static final String dfa_30s = "\1\13\1\uffff\1\2\1\6\1\20\1\12\1\14\1\4\1\10\1\11\5\uffff\1\7\1\0\1\15\1\1\1\17\1\16\1\3\1\5\40\uffff}>";
    static final String[] dfa_31s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16",
            "\3\16\1\uffff\1\16\1\26\1\21\1\24\2\uffff\1\23\1\15\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\16\1\uffff\1\27\1\16\2\uffff\1\12\1\11\3\uffff\1\16\1\uffff\2\16\2\uffff\1\14\1\16\3\uffff\1\16\7\uffff\2\16\1\uffff\2\16\1\uffff\1\16\21\uffff\1\16\3\uffff\1\16\23\uffff\2\16\2\uffff\1\16\17\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\3\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\4\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\51\1\44\1\56\1\uffff\1\53\1\57\1\61\1\40\2\uffff\1\37\2\uffff\1\65\1\uffff\1\60\1\36\3\uffff\1\62\1\uffff\1\41\1\uffff\1\46\1\uffff\1\55\1\54\7\uffff\1\50\1\uffff\1\32\1\52\3\uffff\1\43\3\uffff\1\47\7\uffff\1\33\1\35\1\uffff\1\63\1\34\23\uffff\1\42\3\uffff\1\45\11\uffff\1\16\3\uffff\2\16\1\64\1\16\6\uffff\1\66\1\uffff\1\16\1\30\14\uffff\1\31\30\uffff\1\16\1\uffff\1\16",
            "\1\15\120\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\40\uffff\1\15\5\uffff\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "608:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_16 = input.LA(1);

                         
                        int index25_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_16==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_16==Private) ) {s = 2;}

                        else if ( (LA25_16==Project) ) {s = 3;}

                        else if ( (LA25_16==Protected) ) {s = 4;}

                        else if ( (LA25_16==Public) ) {s = 5;}

                        else if ( (LA25_16==External) ) {s = 6;}

                        else if ( (LA25_16==Abstract) ) {s = 7;}

                        else if ( (LA25_16==Static) ) {s = 8;}

                        else if ( (LA25_16==Const) ) {s = 9;}

                        else if ( (LA25_16==EOF||LA25_16==Let||LA25_16==Var||LA25_16==Comma||(LA25_16>=Colon && LA25_16<=Semicolon)||LA25_16==EqualsSign||LA25_16==RightCurlyBracket||LA25_16==RULE_ML_COMMENT||LA25_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_16==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_16==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_16==Function||LA25_16==Async) ) {s = 13;}

                         
                        input.seek(index25_16);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_18 = input.LA(1);

                         
                        int index25_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_18==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_18==Private) ) {s = 2;}

                        else if ( (LA25_18==Project) ) {s = 3;}

                        else if ( (LA25_18==Protected) ) {s = 4;}

                        else if ( (LA25_18==Public) ) {s = 5;}

                        else if ( (LA25_18==External) ) {s = 6;}

                        else if ( (LA25_18==Abstract) ) {s = 7;}

                        else if ( (LA25_18==Static) ) {s = 8;}

                        else if ( (LA25_18==Const) ) {s = 9;}

                        else if ( (LA25_18==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_18==Function||LA25_18==Async) ) {s = 13;}

                        else if ( (LA25_18==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_18==EOF||LA25_18==Let||LA25_18==Var||LA25_18==Comma||(LA25_18>=Colon && LA25_18<=Semicolon)||LA25_18==EqualsSign||LA25_18==RightCurlyBracket||LA25_18==RULE_ML_COMMENT||LA25_18==RULE_EOL) ) {s = 14;}

                         
                        input.seek(index25_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_2==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_2==Private) ) {s = 2;}

                        else if ( (LA25_2==Project) ) {s = 3;}

                        else if ( (LA25_2==Protected) ) {s = 4;}

                        else if ( (LA25_2==Public) ) {s = 5;}

                        else if ( (LA25_2==External) ) {s = 6;}

                        else if ( (LA25_2==Abstract) ) {s = 7;}

                        else if ( (LA25_2==Static) ) {s = 8;}

                        else if ( (LA25_2==Const) ) {s = 9;}

                        else if ( (LA25_2==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_2==Function||LA25_2==Async) ) {s = 13;}

                        else if ( (LA25_2==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_2==Let||LA25_2==Var) ) {s = 14;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_21 = input.LA(1);

                         
                        int index25_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_21==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_21==Private) ) {s = 2;}

                        else if ( (LA25_21==Project) ) {s = 3;}

                        else if ( (LA25_21==Protected) ) {s = 4;}

                        else if ( (LA25_21==Public) ) {s = 5;}

                        else if ( (LA25_21==External) ) {s = 6;}

                        else if ( (LA25_21==Abstract) ) {s = 7;}

                        else if ( (LA25_21==Static) ) {s = 8;}

                        else if ( (LA25_21==Const) ) {s = 9;}

                        else if ( (LA25_21==Function||LA25_21==Async) ) {s = 13;}

                        else if ( (LA25_21==EOF||LA25_21==Let||LA25_21==Var||LA25_21==Comma||(LA25_21>=Colon && LA25_21<=Semicolon)||LA25_21==EqualsSign||LA25_21==RightCurlyBracket||LA25_21==RULE_ML_COMMENT||LA25_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_21==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_21==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index25_21);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_7==Function||LA25_7==Async) ) {s = 13;}

                        else if ( (LA25_7==Private) ) {s = 2;}

                        else if ( (LA25_7==Project) ) {s = 3;}

                        else if ( (LA25_7==Protected) ) {s = 4;}

                        else if ( (LA25_7==Public) ) {s = 5;}

                        else if ( (LA25_7==External) ) {s = 6;}

                        else if ( (LA25_7==Abstract) ) {s = 7;}

                        else if ( (LA25_7==Static) ) {s = 8;}

                        else if ( (LA25_7==Const) ) {s = 9;}

                        else if ( (LA25_7==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_7==Let||LA25_7==Var) ) {s = 14;}

                        else if ( (LA25_7==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_7==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_22 = input.LA(1);

                         
                        int index25_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_22==EOF||LA25_22==Comma||(LA25_22>=Colon && LA25_22<=Semicolon)||LA25_22==EqualsSign||LA25_22==RightCurlyBracket||LA25_22==RULE_ML_COMMENT||LA25_22==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_22==Tilde) && (synpred12_InternalN4JSParser())) {s = 24;}

                        else if ( (LA25_22==RULE_IDENTIFIER) && (synpred12_InternalN4JSParser())) {s = 25;}

                        else if ( (LA25_22==Yield) && (synpred12_InternalN4JSParser())) {s = 26;}

                        else if ( (LA25_22==Get) && (synpred12_InternalN4JSParser())) {s = 27;}

                        else if ( (LA25_22==Set) && (synpred12_InternalN4JSParser())) {s = 28;}

                        else if ( (LA25_22==Let) && (synpred12_InternalN4JSParser())) {s = 29;}

                        else if ( (LA25_22==Project) && (synpred12_InternalN4JSParser())) {s = 30;}

                        else if ( (LA25_22==External) && (synpred12_InternalN4JSParser())) {s = 31;}

                        else if ( (LA25_22==Abstract) && (synpred12_InternalN4JSParser())) {s = 32;}

                        else if ( (LA25_22==Static) && (synpred12_InternalN4JSParser())) {s = 33;}

                        else if ( (LA25_22==As) && (synpred12_InternalN4JSParser())) {s = 34;}

                        else if ( (LA25_22==From) && (synpred12_InternalN4JSParser())) {s = 35;}

                        else if ( (LA25_22==Constructor) && (synpred12_InternalN4JSParser())) {s = 36;}

                        else if ( (LA25_22==Of) && (synpred12_InternalN4JSParser())) {s = 37;}

                        else if ( (LA25_22==Target) && (synpred12_InternalN4JSParser())) {s = 38;}

                        else if ( (LA25_22==Type) && (synpred12_InternalN4JSParser())) {s = 39;}

                        else if ( (LA25_22==Union) && (synpred12_InternalN4JSParser())) {s = 40;}

                        else if ( (LA25_22==Intersection) && (synpred12_InternalN4JSParser())) {s = 41;}

                        else if ( (LA25_22==This) && (synpred12_InternalN4JSParser())) {s = 42;}

                        else if ( (LA25_22==Promisify) && (synpred12_InternalN4JSParser())) {s = 43;}

                        else if ( (LA25_22==Await) && (synpred12_InternalN4JSParser())) {s = 44;}

                        else if ( (LA25_22==Async) && (synpred12_InternalN4JSParser())) {s = 45;}

                        else if ( (LA25_22==Implements) && (synpred12_InternalN4JSParser())) {s = 46;}

                        else if ( (LA25_22==Interface) && (synpred12_InternalN4JSParser())) {s = 47;}

                        else if ( (LA25_22==Private) && (synpred12_InternalN4JSParser())) {s = 48;}

                        else if ( (LA25_22==Protected) && (synpred12_InternalN4JSParser())) {s = 49;}

                        else if ( (LA25_22==Public) && (synpred12_InternalN4JSParser())) {s = 50;}

                        else if ( (LA25_22==Out) && (synpred12_InternalN4JSParser())) {s = 51;}

                        else if ( (LA25_22==LessThanSign) && (synpred12_InternalN4JSParser())) {s = 52;}

                        else if ( (LA25_22==Extends) && (synpred12_InternalN4JSParser())) {s = 53;}

                        else if ( (LA25_22==LeftCurlyBracket) && (synpred12_InternalN4JSParser())) {s = 54;}

                         
                        input.seek(index25_22);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_3==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_3==Private) ) {s = 2;}

                        else if ( (LA25_3==Project) ) {s = 3;}

                        else if ( (LA25_3==Protected) ) {s = 4;}

                        else if ( (LA25_3==Public) ) {s = 5;}

                        else if ( (LA25_3==External) ) {s = 6;}

                        else if ( (LA25_3==Abstract) ) {s = 7;}

                        else if ( (LA25_3==Static) ) {s = 8;}

                        else if ( (LA25_3==Const) ) {s = 9;}

                        else if ( (LA25_3==Let||LA25_3==Var) ) {s = 14;}

                        else if ( (LA25_3==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_3==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_3==Function||LA25_3==Async) ) {s = 13;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_15==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_15==Private) ) {s = 2;}

                        else if ( (LA25_15==Project) ) {s = 3;}

                        else if ( (LA25_15==Protected) ) {s = 4;}

                        else if ( (LA25_15==Public) ) {s = 5;}

                        else if ( (LA25_15==External) ) {s = 6;}

                        else if ( (LA25_15==Abstract) ) {s = 7;}

                        else if ( (LA25_15==Static) ) {s = 8;}

                        else if ( (LA25_15==Const) ) {s = 9;}

                        else if ( (LA25_15==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_15==EOF||LA25_15==Let||LA25_15==Var||LA25_15==Comma||(LA25_15>=Colon && LA25_15<=Semicolon)||LA25_15==EqualsSign||LA25_15==RightCurlyBracket||LA25_15==RULE_ML_COMMENT||LA25_15==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_15==Function||LA25_15==Async) ) {s = 13;}

                        else if ( (LA25_15==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_8==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_8==Private) ) {s = 2;}

                        else if ( (LA25_8==Project) ) {s = 3;}

                        else if ( (LA25_8==Protected) ) {s = 4;}

                        else if ( (LA25_8==Public) ) {s = 5;}

                        else if ( (LA25_8==External) ) {s = 6;}

                        else if ( (LA25_8==Abstract) ) {s = 7;}

                        else if ( (LA25_8==Static) ) {s = 8;}

                        else if ( (LA25_8==Const) ) {s = 9;}

                        else if ( (LA25_8==Function||LA25_8==Async) ) {s = 13;}

                        else if ( (LA25_8==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_8==Let||LA25_8==Var) ) {s = 14;}

                        else if ( (LA25_8==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_9==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        
                        else if ((LA25_9>=9 && LA25_9<=35 && (s=T2S.M_2[LA25_9-(9)])>=0)) { /* 12 cases */ }
                        else if ( (LA25_9==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( ((LA25_9>=Intersection && LA25_9<=Implements)||LA25_9==Promisify||LA25_9==Target||LA25_9==Await||LA25_9==Union||(LA25_9>=Yield && LA25_9<=This)||LA25_9==From||LA25_9==Type||(LA25_9>=Get && LA25_9<=Let)||(LA25_9>=Out && LA25_9<=Set)||LA25_9==Var||LA25_9==As||LA25_9==Of||(LA25_9>=CommercialAt && LA25_9<=LeftSquareBracket)||LA25_9==LeftCurlyBracket||LA25_9==RULE_IDENTIFIER) ) {s = 14;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA25_5 = input.LA(1);

                         
                        int index25_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_5==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_5==Private) ) {s = 2;}

                        else if ( (LA25_5==Project) ) {s = 3;}

                        else if ( (LA25_5==Protected) ) {s = 4;}

                        else if ( (LA25_5==Public) ) {s = 5;}

                        else if ( (LA25_5==External) ) {s = 6;}

                        else if ( (LA25_5==Abstract) ) {s = 7;}

                        else if ( (LA25_5==Static) ) {s = 8;}

                        else if ( (LA25_5==Const) ) {s = 9;}

                        else if ( (LA25_5==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_5==Function||LA25_5==Async) ) {s = 13;}

                        else if ( (LA25_5==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_5==Let||LA25_5==Var) ) {s = 14;}

                         
                        input.seek(index25_5);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA25_0 = input.LA(1);

                         
                        int index25_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_0==CommercialAt) && (synpred10_InternalN4JSParser())) {s = 1;}

                        else if ( (LA25_0==Private) ) {s = 2;}

                        else if ( (LA25_0==Project) ) {s = 3;}

                        else if ( (LA25_0==Protected) ) {s = 4;}

                        else if ( (LA25_0==Public) ) {s = 5;}

                        else if ( (LA25_0==External) ) {s = 6;}

                        else if ( (LA25_0==Abstract) ) {s = 7;}

                        else if ( (LA25_0==Static) ) {s = 8;}

                        else if ( (LA25_0==Const) ) {s = 9;}

                        else if ( (LA25_0==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_0==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_0==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_0==Function||LA25_0==Async) ) {s = 13;}

                        else if ( (LA25_0==Let||LA25_0==Var) ) {s = 14;}

                         
                        input.seek(index25_0);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_6==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_6==Private) ) {s = 2;}

                        else if ( (LA25_6==Project) ) {s = 3;}

                        else if ( (LA25_6==Protected) ) {s = 4;}

                        else if ( (LA25_6==Public) ) {s = 5;}

                        else if ( (LA25_6==External) ) {s = 6;}

                        else if ( (LA25_6==Abstract) ) {s = 7;}

                        else if ( (LA25_6==Static) ) {s = 8;}

                        else if ( (LA25_6==Const) ) {s = 9;}

                        else if ( (LA25_6==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_6==Function||LA25_6==Async) ) {s = 13;}

                        else if ( (LA25_6==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_6==Let||LA25_6==Var) ) {s = 14;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA25_17 = input.LA(1);

                         
                        int index25_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_17==Function||LA25_17==Async) ) {s = 13;}

                        else if ( (LA25_17==Private) ) {s = 2;}

                        else if ( (LA25_17==Project) ) {s = 3;}

                        else if ( (LA25_17==Protected) ) {s = 4;}

                        else if ( (LA25_17==Public) ) {s = 5;}

                        else if ( (LA25_17==External) ) {s = 6;}

                        else if ( (LA25_17==Abstract) ) {s = 7;}

                        else if ( (LA25_17==Static) ) {s = 8;}

                        else if ( (LA25_17==Const) ) {s = 9;}

                        else if ( (LA25_17==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_17==EOF||LA25_17==Let||LA25_17==Var||LA25_17==Comma||(LA25_17>=Colon && LA25_17<=Semicolon)||LA25_17==EqualsSign||LA25_17==RightCurlyBracket||LA25_17==RULE_ML_COMMENT||LA25_17==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_17==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_17==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_17);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA25_20 = input.LA(1);

                         
                        int index25_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_20==Function||LA25_20==Async) ) {s = 13;}

                        else if ( (LA25_20==Private) ) {s = 2;}

                        else if ( (LA25_20==Project) ) {s = 3;}

                        else if ( (LA25_20==Protected) ) {s = 4;}

                        else if ( (LA25_20==Public) ) {s = 5;}

                        else if ( (LA25_20==External) ) {s = 6;}

                        else if ( (LA25_20==Abstract) ) {s = 7;}

                        else if ( (LA25_20==Static) ) {s = 8;}

                        else if ( (LA25_20==Const) ) {s = 9;}

                        else if ( (LA25_20==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_20==EOF||LA25_20==Let||LA25_20==Var||LA25_20==Comma||(LA25_20>=Colon && LA25_20<=Semicolon)||LA25_20==EqualsSign||LA25_20==RightCurlyBracket||LA25_20==RULE_ML_COMMENT||LA25_20==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_20==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_20==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_20);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA25_19 = input.LA(1);

                         
                        int index25_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_19==EOF||LA25_19==Let||LA25_19==Var||LA25_19==Comma||(LA25_19>=Colon && LA25_19<=Semicolon)||LA25_19==EqualsSign||LA25_19==RightCurlyBracket||LA25_19==RULE_ML_COMMENT||LA25_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_19==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_19==Private) ) {s = 2;}

                        else if ( (LA25_19==Project) ) {s = 3;}

                        else if ( (LA25_19==Protected) ) {s = 4;}

                        else if ( (LA25_19==Public) ) {s = 5;}

                        else if ( (LA25_19==External) ) {s = 6;}

                        else if ( (LA25_19==Abstract) ) {s = 7;}

                        else if ( (LA25_19==Static) ) {s = 8;}

                        else if ( (LA25_19==Const) ) {s = 9;}

                        else if ( (LA25_19==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_19==Function||LA25_19==Async) ) {s = 13;}

                        else if ( (LA25_19==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index25_19);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_4==Function||LA25_4==Async) ) {s = 13;}

                        else if ( (LA25_4==Private) ) {s = 2;}

                        else if ( (LA25_4==Project) ) {s = 3;}

                        else if ( (LA25_4==Protected) ) {s = 4;}

                        else if ( (LA25_4==Public) ) {s = 5;}

                        else if ( (LA25_4==External) ) {s = 6;}

                        else if ( (LA25_4==Abstract) ) {s = 7;}

                        else if ( (LA25_4==Static) ) {s = 8;}

                        else if ( (LA25_4==Const) ) {s = 9;}

                        else if ( (LA25_4==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_4==Let||LA25_4==Var) ) {s = 14;}

                        else if ( (LA25_4==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_4==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\26\uffff";
    static final String dfa_33s = "\15\uffff\11\12";
    static final String dfa_34s = "\10\11\1\4\4\uffff\1\17\7\11\1\4";
    static final String dfa_35s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_37s = "\26\uffff}>";
    static final String[] dfa_38s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12",
            "\3\12\1\uffff\1\12\1\25\1\20\1\23\2\uffff\1\22\1\11\3\uffff\1\16\1\17\3\uffff\1\21\1\uffff\1\24\1\uffff\1\12\1\uffff\1\15\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\2\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\3\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\4\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\2\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "719:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_39s = "\14\uffff";
    static final String dfa_40s = "\4\uffff\10\1";
    static final String dfa_41s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_42s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_43s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_44s = "\14\uffff}>";
    static final String[] dfa_45s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\2\27\uffff\1\1\4\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\2\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\2\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\10\uffff\1\3\27\uffff\1\3\4\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 731:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "765:4: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_46s = "\36\uffff";
    static final String dfa_47s = "\1\uffff\33\35\2\uffff";
    static final String dfa_48s = "\1\4\33\122\2\uffff";
    static final String dfa_49s = "\1\176\33\160\2\uffff";
    static final String dfa_50s = "\34\uffff\1\2\1\1";
    static final String dfa_51s = "\36\uffff}>";
    static final String[] dfa_52s = {
            "\1\21\1\14\1\26\1\34\1\23\1\27\1\31\1\10\2\34\1\7\4\34\1\30\1\6\3\34\1\32\1\34\1\11\1\34\1\16\1\34\1\25\1\24\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\33\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "1022:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_53s = "\134\uffff";
    static final String dfa_54s = "\1\2\1\uffff\1\7\4\uffff\1\133\124\uffff";
    static final String dfa_55s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_56s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_57s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\124\1";
    static final String dfa_58s = "\1\0\1\2\1\3\2\uffff\1\4\1\uffff\1\1\124\uffff}>";
    static final String[] dfa_59s = {
            "\3\6\1\uffff\11\6\2\uffff\16\6\1\uffff\23\6\4\uffff\10\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\10\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\47\1\42\1\53\1\uffff\1\51\1\22\1\13\1\16\1\117\1\126\1\15\1\30\1\131\2\uffff\1\11\1\12\1\102\1\25\1\24\1\14\1\121\1\17\1\123\1\44\1\104\1\27\1\52\1\120\1\uffff\1\21\1\20\1\72\1\60\1\124\1\46\1\115\1\35\1\50\1\132\1\130\1\23\1\41\1\74\1\57\1\71\1\45\1\103\1\122\4\uffff\1\116\1\36\1\32\1\56\1\54\1\37\1\125\1\31\5\uffff\1\105\1\uffff\1\106\1\uffff\1\76\7\uffff\1\40\1\114\1\113\1\uffff\1\43\2\uffff\1\112\2\uffff\1\55\2\uffff\1\107\1\uffff\1\110\1\uffff\1\75\1\uffff\1\33\1\61\3\uffff\1\10\1\77\2\uffff\1\26\1\uffff\1\127\1\111\3\uffff\1\62\1\uffff\1\67\1\64\1\65\1\66\1\uffff\1\70\1\uffff\1\34\2\uffff\1\73\11\uffff\1\101\1\100\10\uffff\1\63",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "1160:2: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_0 = input.LA(1);

                         
                        int index51_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_0==Semicolon) ) {s = 1;}

                        else if ( (LA51_0==EOF) ) {s = 2;}

                        else if ( (LA51_0==RULE_EOL) && (synpred17_InternalN4JSParser())) {s = 3;}

                        else if ( (LA51_0==RULE_ML_COMMENT) && (synpred17_InternalN4JSParser())) {s = 4;}

                        else if ( (LA51_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA51_0>=Intersection && LA51_0<=Implements)||(LA51_0>=Promisify && LA51_0<=Default)||(LA51_0>=Private && LA51_0<=Break)||(LA51_0>=Class && LA51_0<=With)||(LA51_0>=For && LA51_0<=Var)||LA51_0==PlusSignPlusSign||LA51_0==HyphenMinusHyphenMinus||LA51_0==SolidusEqualsSign||(LA51_0>=As && LA51_0<=If)||LA51_0==Of||LA51_0==ExclamationMark||LA51_0==LeftParenthesis||LA51_0==PlusSign||LA51_0==HyphenMinus||LA51_0==Solidus||LA51_0==LessThanSign||(LA51_0>=CommercialAt && LA51_0<=LeftSquareBracket)||LA51_0==LeftCurlyBracket||LA51_0==Tilde||LA51_0==RULE_DOUBLE||(LA51_0>=RULE_HEX_INT && LA51_0<=RULE_LEGACY_OCTAL_INT)||LA51_0==RULE_SCIENTIFIC_INT||LA51_0==RULE_IDENTIFIER||LA51_0==RULE_STRING||(LA51_0>=RULE_TEMPLATE_HEAD && LA51_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA51_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index51_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_7 = input.LA(1);

                         
                        int index51_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_7==EOF) && (synpred17_InternalN4JSParser())) {s = 91;}

                         
                        input.seek(index51_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_1 = input.LA(1);

                         
                        int index51_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index51_1);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_2 = input.LA(1);

                         
                        int index51_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_2==EOF) ) {s = 7;}

                        
                        else if ((LA51_2>=-1 && LA51_2<=149 && (s=T2S.M_3[LA51_2-(-1)])>=0) && (synpred17_InternalN4JSParser())) { /* 84 cases */ }
                        input.seek(index51_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_5 = input.LA(1);

                         
                        int index51_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalN4JSParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index51_5);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\130\uffff";
    static final String dfa_61s = "\1\2\127\uffff";
    static final String dfa_62s = "\1\4\1\0\126\uffff";
    static final String dfa_63s = "\1\u0099\1\0\126\uffff";
    static final String dfa_64s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_65s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_66s = {
            "\3\2\1\uffff\11\2\2\uffff\16\2\1\uffff\23\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1472:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_InternalN4JSParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index70_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1490:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\77\uffff";
    static final String dfa_68s = "\1\4\1\0\75\uffff";
    static final String dfa_69s = "\1\u0095\1\0\75\uffff";
    static final String dfa_70s = "\2\uffff\1\2\73\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\75\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\5\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);

    class DFA81 extends DFA {

        public DFA81(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 81;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1925:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA81_1 = input.LA(1);

                         
                        int index81_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index81_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 81, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA89 extends DFA {

        public DFA89(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 89;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "2186:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA89_1 = input.LA(1);

                         
                        int index89_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index89_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 89, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA97 extends DFA {

        public DFA97(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 97;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "2447:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA97_1 = input.LA(1);

                         
                        int index97_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index97_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 97, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA105 extends DFA {

        public DFA105(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 105;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "2708:2: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA105_1 = input.LA(1);

                         
                        int index105_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index105_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 105, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\44\uffff";
    static final String dfa_74s = "\1\4\1\0\42\uffff";
    static final String dfa_75s = "\1\176\1\0\42\uffff";
    static final String dfa_76s = "\2\uffff\1\1\1\2\40\uffff";
    static final String dfa_77s = "\1\0\1\1\42\uffff}>";
    static final String[] dfa_78s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA125 extends DFA {

        public DFA125(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 125;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "3132:2: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= ruleBindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= ruleBindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA125_0 = input.LA(1);

                         
                        int index125_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA125_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA125_0==LeftSquareBracket) && (synpred49_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA125_0>=Intersection && LA125_0<=Implements)||(LA125_0>=Promisify && LA125_0<=Abstract)||LA125_0==External||(LA125_0>=Private && LA125_0<=Project)||LA125_0==Public||LA125_0==Static||LA125_0==Target||(LA125_0>=Async && LA125_0<=Await)||LA125_0==Union||(LA125_0>=Yield && LA125_0<=This)||LA125_0==From||LA125_0==This_1||(LA125_0>=Type && LA125_0<=Void)||LA125_0==FullStopFullStopFullStop||(LA125_0>=Get && LA125_0<=Let)||(LA125_0>=Out && LA125_0<=Set)||LA125_0==As||LA125_0==Of||(LA125_0>=QuestionMark && LA125_0<=CommercialAt)||LA125_0==Tilde||LA125_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index125_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA125_1 = input.LA(1);

                         
                        int index125_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred49_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index125_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 125, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\2\uffff\11\13\1\uffff";
    static final String dfa_80s = "\1\4\1\uffff\5\4\4\135\1\uffff";
    static final String dfa_81s = "\1\176\1\uffff\5\176\4\156\1\uffff";
    static final String dfa_82s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_83s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[] dfa_79 = DFA.unpackEncodedString(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final char[] dfa_81 = DFA.unpackEncodedStringToUnsignedChars(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA122 extends DFA {

        public DFA122(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 122;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "3153:4: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_84s = "\43\uffff";
    static final String dfa_85s = "\1\4\1\0\41\uffff";
    static final String dfa_86s = "\1\176\1\0\41\uffff";
    static final String dfa_87s = "\2\uffff\1\1\1\2\37\uffff";
    static final String dfa_88s = "\1\0\1\1\41\uffff}>";
    static final String[] dfa_89s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\2\3\7\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\uffff\1\3\1\uffff\2\3\2\uffff\1\3\3\uffff\2\3\1\uffff\2\3\23\uffff\1\3\3\uffff\1\3\22\uffff\2\3\1\2\2\uffff\1\1\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA131 extends DFA {

        public DFA131(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 131;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "3198:2: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0_0= norm1_BindingPattern ) ) | ( ( (AnnotationsAnnotationParserRuleCall_0_1_0_0= ruleAnnotation ) )* (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )? ( (VariadicFullStopFullStopFullStopKeyword_0_1_2_0= FullStopFullStopFullStop ) )? ( (NameBindingIdentifierParserRuleCall_0_1_3_0= norm1_BindingIdentifier ) ) (ColonSepTypeRefParserRuleCall_0_1_4= ruleColonSepTypeRef )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA131_0 = input.LA(1);

                         
                        int index131_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA131_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA131_0==LeftSquareBracket) && (synpred50_InternalN4JSParser())) {s = 2;}

                        else if ( ((LA131_0>=Intersection && LA131_0<=Implements)||(LA131_0>=Promisify && LA131_0<=Abstract)||LA131_0==External||(LA131_0>=Private && LA131_0<=Project)||LA131_0==Public||LA131_0==Static||LA131_0==Target||(LA131_0>=Async && LA131_0<=Await)||LA131_0==Union||LA131_0==This||LA131_0==From||LA131_0==This_1||(LA131_0>=Type && LA131_0<=Void)||LA131_0==FullStopFullStopFullStop||(LA131_0>=Get && LA131_0<=Let)||(LA131_0>=Out && LA131_0<=Set)||LA131_0==As||LA131_0==Of||(LA131_0>=QuestionMark && LA131_0<=CommercialAt)||LA131_0==Tilde||LA131_0==RULE_IDENTIFIER) ) {s = 3;}

                         
                        input.seek(index131_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA131_1 = input.LA(1);

                         
                        int index131_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred50_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 3;}

                         
                        input.seek(index131_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 131, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_90s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\2\uffff\1\13\3\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\3\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\1\1\3\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\1\uffff\1\13\1\uffff\1\1\1\13\1\uffff\1\1\24\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            "\1\13\2\uffff\1\13\3\uffff\1\13\2\uffff\1\13\6\uffff\1\1",
            ""
    };
    static final short[][] dfa_90 = unpackEncodedStringArray(dfa_90s);

    class DFA128 extends DFA {

        public DFA128(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 128;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_90;
        }
        public String getDescription() {
            return "3219:4: (BogusTypeRefFragmentParserRuleCall_0_1_1= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_91s = "\120\uffff";
    static final String dfa_92s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_93s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_94s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\37\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_95s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\57\uffff}>";
    static final String[] dfa_96s = {
            "\1\32\1\25\1\36\1\uffff\1\34\1\37\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\107\1\10\1\111\1\27\1\41\1\12\1\35\1\106\1\uffff\1\41\1\11\2\41\1\112\1\31\1\102\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\110\4\uffff\1\102\1\21\1\15\1\41\1\40\1\22\1\113\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\102\1\101\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_91 = DFA.unpackEncodedString(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final char[] dfa_93 = DFA.unpackEncodedStringToUnsignedChars(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[] dfa_95 = DFA.unpackEncodedString(dfa_95s);
    static final short[][] dfa_96 = unpackEncodedStringArray(dfa_96s);

    class DFA135 extends DFA {

        public DFA135(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 135;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_92;
            this.max = dfa_93;
            this.accept = dfa_94;
            this.special = dfa_95;
            this.transition = dfa_96;
        }
        public String getDescription() {
            return "3371:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA135_0 = input.LA(1);

                         
                        int index135_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA135_0>=10 && LA135_0<=110 && (s=T2S.M_4[LA135_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA135_0==Var) && (synpred55_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA135_0>=4 && LA135_0<=126 && (s=T2S.M_5[LA135_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA135_0==Delete||LA135_0==Typeof||LA135_0==Class||(LA135_0>=False && LA135_0<=Super)||(LA135_0>=Null && LA135_0<=True)||LA135_0==Void||LA135_0==New||LA135_0==PlusSignPlusSign||LA135_0==HyphenMinusHyphenMinus||LA135_0==SolidusEqualsSign||LA135_0==ExclamationMark||LA135_0==LeftParenthesis||LA135_0==PlusSign||LA135_0==HyphenMinus||LA135_0==Solidus||LA135_0==LessThanSign||(LA135_0>=CommercialAt && LA135_0<=LeftSquareBracket)||LA135_0==Tilde||LA135_0==RULE_DOUBLE||(LA135_0>=RULE_HEX_INT && LA135_0<=RULE_LEGACY_OCTAL_INT)||LA135_0==RULE_SCIENTIFIC_INT||LA135_0==RULE_STRING||(LA135_0>=RULE_TEMPLATE_HEAD && LA135_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA135_0==RULE_INT) ) {s = 33;}

                        else if ( (LA135_0==If) ) {s = 65;}

                        else if ( (LA135_0==While||LA135_0==For||LA135_0==Do) ) {s = 66;}

                        else if ( (LA135_0==Continue) ) {s = 69;}

                        else if ( (LA135_0==Break) ) {s = 70;}

                        else if ( (LA135_0==Return) ) {s = 71;}

                        else if ( (LA135_0==With) ) {s = 72;}

                        else if ( (LA135_0==Switch) ) {s = 73;}

                        else if ( (LA135_0==Throw) ) {s = 74;}

                        else if ( (LA135_0==Try) ) {s = 75;}

                        else if ( (LA135_0==Debugger) ) {s = 76;}

                         
                        input.seek(index135_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA135_1 = input.LA(1);

                         
                        int index135_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA135_2 = input.LA(1);

                         
                        int index135_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA135_3 = input.LA(1);

                         
                        int index135_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA135_4 = input.LA(1);

                         
                        int index135_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA135_5 = input.LA(1);

                         
                        int index135_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA135_6 = input.LA(1);

                         
                        int index135_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA135_7 = input.LA(1);

                         
                        int index135_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA135_8 = input.LA(1);

                         
                        int index135_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA135_9 = input.LA(1);

                         
                        int index135_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred55_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index135_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA135_10 = input.LA(1);

                         
                        int index135_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA135_11 = input.LA(1);

                         
                        int index135_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA135_13 = input.LA(1);

                         
                        int index135_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA135_15 = input.LA(1);

                         
                        int index135_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA135_16 = input.LA(1);

                         
                        int index135_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA135_17 = input.LA(1);

                         
                        int index135_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA135_18 = input.LA(1);

                         
                        int index135_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA135_19 = input.LA(1);

                         
                        int index135_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA135_20 = input.LA(1);

                         
                        int index135_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA135_21 = input.LA(1);

                         
                        int index135_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA135_22 = input.LA(1);

                         
                        int index135_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA135_23 = input.LA(1);

                         
                        int index135_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA135_24 = input.LA(1);

                         
                        int index135_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA135_25 = input.LA(1);

                         
                        int index135_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA135_26 = input.LA(1);

                         
                        int index135_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA135_27 = input.LA(1);

                         
                        int index135_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA135_28 = input.LA(1);

                         
                        int index135_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA135_29 = input.LA(1);

                         
                        int index135_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA135_30 = input.LA(1);

                         
                        int index135_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA135_31 = input.LA(1);

                         
                        int index135_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA135_32 = input.LA(1);

                         
                        int index135_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index135_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 135, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_97s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_98s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_99s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_100s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\60\uffff}>";
    static final String[] dfa_101s = {
            "\1\31\1\24\1\35\1\uffff\1\33\1\36\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\107\1\10\1\111\1\26\1\40\1\12\1\34\1\106\1\uffff\1\40\1\11\2\40\1\112\1\30\1\102\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\110\4\uffff\1\102\1\20\1\15\1\40\1\37\1\21\1\113\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\102\1\101\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA136 extends DFA {

        public DFA136(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 136;
            this.eot = dfa_91;
            this.eof = dfa_91;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "3450:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA136_0 = input.LA(1);

                         
                        int index136_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA136_0>=10 && LA136_0<=110 && (s=T2S.M_4[LA136_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA136_0==Var) && (synpred59_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA136_0>=4 && LA136_0<=126 && (s=T2S.M_7[LA136_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA136_0==Delete||LA136_0==Typeof||LA136_0==Class||(LA136_0>=False && LA136_0<=Super)||LA136_0==Yield||(LA136_0>=Null && LA136_0<=True)||LA136_0==Void||LA136_0==New||LA136_0==PlusSignPlusSign||LA136_0==HyphenMinusHyphenMinus||LA136_0==SolidusEqualsSign||LA136_0==ExclamationMark||LA136_0==LeftParenthesis||LA136_0==PlusSign||LA136_0==HyphenMinus||LA136_0==Solidus||LA136_0==LessThanSign||(LA136_0>=CommercialAt && LA136_0<=LeftSquareBracket)||LA136_0==Tilde||LA136_0==RULE_DOUBLE||(LA136_0>=RULE_HEX_INT && LA136_0<=RULE_LEGACY_OCTAL_INT)||LA136_0==RULE_SCIENTIFIC_INT||LA136_0==RULE_STRING||(LA136_0>=RULE_TEMPLATE_HEAD && LA136_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA136_0==RULE_INT) ) {s = 32;}

                        else if ( (LA136_0==If) ) {s = 65;}

                        else if ( (LA136_0==While||LA136_0==For||LA136_0==Do) ) {s = 66;}

                        else if ( (LA136_0==Continue) ) {s = 69;}

                        else if ( (LA136_0==Break) ) {s = 70;}

                        else if ( (LA136_0==Return) ) {s = 71;}

                        else if ( (LA136_0==With) ) {s = 72;}

                        else if ( (LA136_0==Switch) ) {s = 73;}

                        else if ( (LA136_0==Throw) ) {s = 74;}

                        else if ( (LA136_0==Try) ) {s = 75;}

                        else if ( (LA136_0==Debugger) ) {s = 76;}

                         
                        input.seek(index136_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA136_1 = input.LA(1);

                         
                        int index136_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA136_2 = input.LA(1);

                         
                        int index136_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA136_3 = input.LA(1);

                         
                        int index136_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA136_4 = input.LA(1);

                         
                        int index136_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA136_5 = input.LA(1);

                         
                        int index136_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA136_6 = input.LA(1);

                         
                        int index136_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA136_7 = input.LA(1);

                         
                        int index136_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA136_8 = input.LA(1);

                         
                        int index136_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA136_9 = input.LA(1);

                         
                        int index136_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred59_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index136_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA136_10 = input.LA(1);

                         
                        int index136_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA136_11 = input.LA(1);

                         
                        int index136_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA136_13 = input.LA(1);

                         
                        int index136_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA136_15 = input.LA(1);

                         
                        int index136_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA136_16 = input.LA(1);

                         
                        int index136_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA136_17 = input.LA(1);

                         
                        int index136_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA136_18 = input.LA(1);

                         
                        int index136_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA136_19 = input.LA(1);

                         
                        int index136_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA136_20 = input.LA(1);

                         
                        int index136_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA136_21 = input.LA(1);

                         
                        int index136_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA136_22 = input.LA(1);

                         
                        int index136_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA136_23 = input.LA(1);

                         
                        int index136_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA136_24 = input.LA(1);

                         
                        int index136_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA136_25 = input.LA(1);

                         
                        int index136_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA136_26 = input.LA(1);

                         
                        int index136_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA136_27 = input.LA(1);

                         
                        int index136_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA136_28 = input.LA(1);

                         
                        int index136_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA136_29 = input.LA(1);

                         
                        int index136_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA136_30 = input.LA(1);

                         
                        int index136_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA136_31 = input.LA(1);

                         
                        int index136_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index136_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 136, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\116\uffff";
    static final String dfa_103s = "\1\4\1\0\114\uffff";
    static final String dfa_104s = "\1\u0095\1\0\114\uffff";
    static final String dfa_105s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_106s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_107s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\11\2\1\uffff\11\2\3\uffff\7\2\4\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);
    static final char[] dfa_103 = DFA.unpackEncodedStringToUnsignedChars(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final short[] dfa_105 = DFA.unpackEncodedString(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[][] dfa_107 = unpackEncodedStringArray(dfa_107s);

    class DFA137 extends DFA {

        public DFA137(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 137;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "3534:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA137_1 = input.LA(1);

                         
                        int index137_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index137_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 137, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = dfa_102;
            this.eof = dfa_102;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_107;
        }
        public String getDescription() {
            return "3559:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_1 = input.LA(1);

                         
                        int index138_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index138_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 3684:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_108s = "\35\uffff";
    static final String dfa_109s = "\1\4\34\uffff";
    static final String dfa_110s = "\1\176\34\uffff";
    static final String dfa_111s = "\1\uffff\33\2\1\1";
    static final String dfa_112s = "\1\0\34\uffff}>";
    static final String[] dfa_113s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_108 = DFA.unpackEncodedString(dfa_108s);
    static final char[] dfa_109 = DFA.unpackEncodedStringToUnsignedChars(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[][] dfa_113 = unpackEncodedStringArray(dfa_113s);

    class DFA153 extends DFA {

        public DFA153(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 153;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 4166:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA153_0 = input.LA(1);

                         
                        int index153_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA153_0>=4 && LA153_0<=126 && (s=T2S.M_8[LA153_0-(4)])>=0) && (synpred79_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA153_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index153_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 153, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA155 extends DFA {

        public DFA155(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 155;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 4212:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA155_0 = input.LA(1);

                         
                        int index155_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA155_0>=4 && LA155_0<=126 && (s=T2S.M_8[LA155_0-(4)])>=0) && (synpred80_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA155_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index155_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 155, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_114s = "\34\uffff";
    static final String dfa_115s = "\1\4\33\uffff";
    static final String dfa_116s = "\1\176\33\uffff";
    static final String dfa_117s = "\1\uffff\32\2\1\1";
    static final String dfa_118s = "\1\0\33\uffff}>";
    static final String[] dfa_119s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[][] dfa_119 = unpackEncodedStringArray(dfa_119s);

    class DFA157 extends DFA {

        public DFA157(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 157;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 4258:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA157_0 = input.LA(1);

                         
                        int index157_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA157_0>=4 && LA157_0<=126 && (s=T2S.M_10[LA157_0-(4)])>=0) && (synpred81_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA157_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index157_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 157, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA159 extends DFA {

        public DFA159(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 159;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 4304:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA159_0 = input.LA(1);

                         
                        int index159_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA159_0>=4 && LA159_0<=126 && (s=T2S.M_10[LA159_0-(4)])>=0) && (synpred82_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA159_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index159_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 159, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA161 extends DFA {

        public DFA161(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 161;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 4350:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA161_0 = input.LA(1);

                         
                        int index161_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA161_0>=4 && LA161_0<=126 && (s=T2S.M_8[LA161_0-(4)])>=0) && (synpred83_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA161_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index161_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 161, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = dfa_108;
            this.eof = dfa_108;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "()* loopback of 4406:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_0 = input.LA(1);

                         
                        int index164_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA164_0>=4 && LA164_0<=126 && (s=T2S.M_8[LA164_0-(4)])>=0) && (synpred84_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA164_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index164_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 4462:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_0 = input.LA(1);

                         
                        int index167_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA167_0>=4 && LA167_0<=126 && (s=T2S.M_10[LA167_0-(4)])>=0) && (synpred85_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA167_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index167_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "()* loopback of 4518:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_0 = input.LA(1);

                         
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA170_0>=4 && LA170_0<=126 && (s=T2S.M_10[LA170_0-(4)])>=0) && (synpred86_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA170_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_120s = "\1\4\1\1\1\0\2\uffff\1\2\1\uffff\1\3\124\uffff}>";
    static final short[] dfa_120 = DFA.unpackEncodedString(dfa_120s);

    class DFA179 extends DFA {

        public DFA179(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 179;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_120;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "4941:2: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA179_2 = input.LA(1);

                         
                        int index179_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA179_2==EOF) ) {s = 7;}

                        
                        else if ((LA179_2>=-1 && LA179_2<=149 && (s=T2S.M_3[LA179_2-(-1)])>=0) && (synpred93_InternalN4JSParser())) { /* 84 cases */ }
                        input.seek(index179_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA179_1 = input.LA(1);

                         
                        int index179_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index179_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA179_5 = input.LA(1);

                         
                        int index179_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalN4JSParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index179_5);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA179_7 = input.LA(1);

                         
                        int index179_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA179_7==EOF) && (synpred93_InternalN4JSParser())) {s = 91;}

                         
                        input.seek(index179_7);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA179_0 = input.LA(1);

                         
                        int index179_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA179_0==Semicolon) ) {s = 1;}

                        else if ( (LA179_0==EOF) ) {s = 2;}

                        else if ( (LA179_0==RULE_EOL) && (synpred93_InternalN4JSParser())) {s = 3;}

                        else if ( (LA179_0==RULE_ML_COMMENT) && (synpred93_InternalN4JSParser())) {s = 4;}

                        else if ( (LA179_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA179_0>=Intersection && LA179_0<=Implements)||(LA179_0>=Promisify && LA179_0<=Default)||(LA179_0>=Private && LA179_0<=Break)||(LA179_0>=Class && LA179_0<=With)||(LA179_0>=For && LA179_0<=Var)||LA179_0==PlusSignPlusSign||LA179_0==HyphenMinusHyphenMinus||LA179_0==SolidusEqualsSign||(LA179_0>=As && LA179_0<=If)||LA179_0==Of||LA179_0==ExclamationMark||LA179_0==LeftParenthesis||LA179_0==PlusSign||LA179_0==HyphenMinus||LA179_0==Solidus||LA179_0==LessThanSign||(LA179_0>=CommercialAt && LA179_0<=LeftSquareBracket)||LA179_0==LeftCurlyBracket||LA179_0==Tilde||LA179_0==RULE_DOUBLE||(LA179_0>=RULE_HEX_INT && LA179_0<=RULE_LEGACY_OCTAL_INT)||LA179_0==RULE_SCIENTIFIC_INT||LA179_0==RULE_IDENTIFIER||LA179_0==RULE_STRING||(LA179_0>=RULE_TEMPLATE_HEAD && LA179_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA179_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index179_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 179, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_121s = "\102\uffff";
    static final String dfa_122s = "\1\4\1\0\100\uffff";
    static final String dfa_123s = "\1\u0095\1\0\100\uffff";
    static final String dfa_124s = "\2\uffff\1\2\76\uffff\1\1";
    static final String dfa_125s = "\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_126s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\4\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\3\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_121 = DFA.unpackEncodedString(dfa_121s);
    static final char[] dfa_122 = DFA.unpackEncodedStringToUnsignedChars(dfa_122s);
    static final char[] dfa_123 = DFA.unpackEncodedStringToUnsignedChars(dfa_123s);
    static final short[] dfa_124 = DFA.unpackEncodedString(dfa_124s);
    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final short[][] dfa_126 = unpackEncodedStringArray(dfa_126s);

    class DFA198 extends DFA {

        public DFA198(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 198;
            this.eot = dfa_121;
            this.eof = dfa_121;
            this.min = dfa_122;
            this.max = dfa_123;
            this.accept = dfa_124;
            this.special = dfa_125;
            this.transition = dfa_126;
        }
        public String getDescription() {
            return "5085:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA198_1 = input.LA(1);

                         
                        int index198_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index198_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 198, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_127s = "\1\4\2\uffff\1\0\75\uffff";
    static final String dfa_128s = "\1\u0095\2\uffff\1\0\75\uffff";
    static final String dfa_129s = "\1\uffff\2\1\1\uffff\1\2\73\uffff\1\3";
    static final String dfa_130s = "\1\0\2\uffff\1\1\75\uffff}>";
    static final String[] dfa_131s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\3\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\100\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final char[] dfa_128 = DFA.unpackEncodedStringToUnsignedChars(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[] dfa_130 = DFA.unpackEncodedString(dfa_130s);
    static final short[][] dfa_131 = unpackEncodedStringArray(dfa_131s);

    class DFA197 extends DFA {

        public DFA197(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 197;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "5137:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA197_0 = input.LA(1);

                         
                        int index197_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA197_0==Var) && (synpred96_InternalN4JSParser())) {s = 1;}

                        else if ( (LA197_0==Const) && (synpred96_InternalN4JSParser())) {s = 2;}

                        else if ( (LA197_0==Let) ) {s = 3;}

                        else if ( ((LA197_0>=Intersection && LA197_0<=Implements)||(LA197_0>=Promisify && LA197_0<=Abstract)||(LA197_0>=External && LA197_0<=Function)||(LA197_0>=Private && LA197_0<=Delete)||LA197_0==Public||LA197_0==Static||(LA197_0>=Target && LA197_0<=Await)||LA197_0==Class||(LA197_0>=False && LA197_0<=Super)||LA197_0==Union||(LA197_0>=Yield && LA197_0<=This)||(LA197_0>=From && LA197_0<=Void)||LA197_0==Get||(LA197_0>=New && LA197_0<=Set)||LA197_0==PlusSignPlusSign||LA197_0==HyphenMinusHyphenMinus||LA197_0==SolidusEqualsSign||LA197_0==As||LA197_0==Of||LA197_0==ExclamationMark||LA197_0==LeftParenthesis||LA197_0==PlusSign||LA197_0==HyphenMinus||LA197_0==Solidus||LA197_0==LessThanSign||(LA197_0>=CommercialAt && LA197_0<=LeftSquareBracket)||LA197_0==LeftCurlyBracket||LA197_0==Tilde||LA197_0==RULE_DOUBLE||(LA197_0>=RULE_HEX_INT && LA197_0<=RULE_LEGACY_OCTAL_INT)||LA197_0==RULE_SCIENTIFIC_INT||LA197_0==RULE_IDENTIFIER||LA197_0==RULE_STRING||(LA197_0>=RULE_TEMPLATE_HEAD && LA197_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA197_0==RULE_INT) ) {s = 4;}

                        else if ( (LA197_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index197_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA197_3 = input.LA(1);

                         
                        int index197_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index197_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 197, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_132s = "\40\uffff";
    static final String dfa_133s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_134s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_135s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_136s = "\35\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_137s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final short[] dfa_135 = DFA.unpackEncodedString(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[][] dfa_137 = unpackEncodedStringArray(dfa_137s);

    class DFA189 extends DFA {

        public DFA189(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 189;
            this.eot = dfa_132;
            this.eof = dfa_132;
            this.min = dfa_133;
            this.max = dfa_134;
            this.accept = dfa_135;
            this.special = dfa_136;
            this.transition = dfa_137;
        }
        public String getDescription() {
            return "5148:6: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA189_29 = input.LA(1);

                         
                        int index189_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index189_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA189_30 = input.LA(1);

                         
                        int index189_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index189_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 189, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_138s = "\1\4\76\uffff";
    static final String dfa_139s = "\1\u0095\76\uffff";
    static final String dfa_140s = "\1\uffff\75\1\1\2";
    static final String dfa_141s = "\1\0\76\uffff}>";
    static final String[] dfa_142s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\61\3\uffff\1\32\1\12\1\65\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\54\1\37\1\51\1\23\1\66\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\16\3\uffff\1\21\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "5321:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA182_0 = input.LA(1);

                         
                        int index182_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA182_0>=4 && LA182_0<=149 && (s=T2S.M_17[LA182_0-(4)])>=0) && (synpred98_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA182_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index182_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA216 extends DFA {

        public DFA216(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 216;
            this.eot = dfa_121;
            this.eof = dfa_121;
            this.min = dfa_122;
            this.max = dfa_123;
            this.accept = dfa_124;
            this.special = dfa_125;
            this.transition = dfa_126;
        }
        public String getDescription() {
            return "5596:2: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA216_1 = input.LA(1);

                         
                        int index216_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index216_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 216, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA215 extends DFA {

        public DFA215(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 215;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_127;
            this.max = dfa_128;
            this.accept = dfa_129;
            this.special = dfa_130;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "5648:4: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA215_0 = input.LA(1);

                         
                        int index215_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA215_0==Var) && (synpred100_InternalN4JSParser())) {s = 1;}

                        else if ( (LA215_0==Const) && (synpred100_InternalN4JSParser())) {s = 2;}

                        else if ( (LA215_0==Let) ) {s = 3;}

                        else if ( ((LA215_0>=Intersection && LA215_0<=Implements)||(LA215_0>=Promisify && LA215_0<=Abstract)||(LA215_0>=External && LA215_0<=Function)||(LA215_0>=Private && LA215_0<=Delete)||LA215_0==Public||LA215_0==Static||(LA215_0>=Target && LA215_0<=Await)||LA215_0==Class||(LA215_0>=False && LA215_0<=Super)||LA215_0==Union||(LA215_0>=Yield && LA215_0<=This)||(LA215_0>=From && LA215_0<=Void)||LA215_0==Get||(LA215_0>=New && LA215_0<=Set)||LA215_0==PlusSignPlusSign||LA215_0==HyphenMinusHyphenMinus||LA215_0==SolidusEqualsSign||LA215_0==As||LA215_0==Of||LA215_0==ExclamationMark||LA215_0==LeftParenthesis||LA215_0==PlusSign||LA215_0==HyphenMinus||LA215_0==Solidus||LA215_0==LessThanSign||(LA215_0>=CommercialAt && LA215_0<=LeftSquareBracket)||LA215_0==LeftCurlyBracket||LA215_0==Tilde||LA215_0==RULE_DOUBLE||(LA215_0>=RULE_HEX_INT && LA215_0<=RULE_LEGACY_OCTAL_INT)||LA215_0==RULE_SCIENTIFIC_INT||LA215_0==RULE_IDENTIFIER||LA215_0==RULE_STRING||(LA215_0>=RULE_TEMPLATE_HEAD && LA215_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA215_0==RULE_INT) ) {s = 4;}

                        else if ( (LA215_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index215_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA215_3 = input.LA(1);

                         
                        int index215_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index215_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 215, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_143s = "\37\uffff";
    static final String dfa_144s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_145s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_146s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_147s = "\34\uffff\1\1\1\0\1\uffff}>";
    static final String[] dfa_148s = {
            "\1\20\1\13\1\25\1\uffff\1\22\1\26\1\30\1\7\2\uffff\1\6\4\uffff\1\27\1\5\3\uffff\1\31\1\uffff\1\10\1\uffff\1\15\1\uffff\1\24\1\23\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\32\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final char[] dfa_144 = DFA.unpackEncodedStringToUnsignedChars(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final short[] dfa_146 = DFA.unpackEncodedString(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[][] dfa_148 = unpackEncodedStringArray(dfa_148s);

    class DFA207 extends DFA {

        public DFA207(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 207;
            this.eot = dfa_143;
            this.eof = dfa_143;
            this.min = dfa_144;
            this.max = dfa_145;
            this.accept = dfa_146;
            this.special = dfa_147;
            this.transition = dfa_148;
        }
        public String getDescription() {
            return "5659:6: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA207_29 = input.LA(1);

                         
                        int index207_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index207_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA207_28 = input.LA(1);

                         
                        int index207_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index207_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 207, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_149s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\15\3\uffff\1\20\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "5832:9: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_0 = input.LA(1);

                         
                        int index200_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA200_0>=4 && LA200_0<=149 && (s=T2S.M_18[LA200_0-(4)])>=0) && (synpred102_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA200_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index200_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_150s = "\1\4\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_151s = "\1\176\1\0\1\uffff\33\0\5\uffff";
    static final String dfa_152s = "\2\uffff\1\1\33\uffff\1\3\3\uffff\1\2";
    static final String dfa_153s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\5\uffff}>";
    static final String[] dfa_154s = {
            "\1\23\1\16\1\30\1\uffff\1\25\1\31\1\33\1\12\2\uffff\1\11\4\uffff\1\32\1\10\3\uffff\1\34\1\uffff\1\13\1\uffff\1\20\1\uffff\1\27\1\26\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\1\uffff\1\36\1\uffff\1\21\1\36\6\uffff\1\5\1\7\1\uffff\1\35\1\6\23\uffff\1\14\3\uffff\1\17\22\uffff\1\36\1\uffff\1\2\2\uffff\1\1\2\uffff\1\36\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_150 = DFA.unpackEncodedStringToUnsignedChars(dfa_150s);
    static final char[] dfa_151 = DFA.unpackEncodedStringToUnsignedChars(dfa_151s);
    static final short[] dfa_152 = DFA.unpackEncodedString(dfa_152s);
    static final short[] dfa_153 = DFA.unpackEncodedString(dfa_153s);
    static final short[][] dfa_154 = unpackEncodedStringArray(dfa_154s);

    class DFA238 extends DFA {

        public DFA238(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 238;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_150;
            this.max = dfa_151;
            this.accept = dfa_152;
            this.special = dfa_153;
            this.transition = dfa_154;
        }
        public String getDescription() {
            return "6958:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= ruleBindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA238_0 = input.LA(1);

                         
                        int index238_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA238_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA238_0==LeftSquareBracket) && (synpred109_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA238_0>=4 && LA238_0<=126 && (s=T2S.M_19[LA238_0-(4)])>=0)) { /* 27 cases */ }
                        else if ( (LA238_0==This_1||LA238_0==Void||LA238_0==QuestionMark||LA238_0==Tilde) ) {s = 30;}

                         
                        input.seek(index238_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA238_1 = input.LA(1);

                         
                        int index238_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred109_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA238_3 = input.LA(1);

                         
                        int index238_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA238_4 = input.LA(1);

                         
                        int index238_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA238_5 = input.LA(1);

                         
                        int index238_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA238_6 = input.LA(1);

                         
                        int index238_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA238_7 = input.LA(1);

                         
                        int index238_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA238_8 = input.LA(1);

                         
                        int index238_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA238_9 = input.LA(1);

                         
                        int index238_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA238_10 = input.LA(1);

                         
                        int index238_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA238_11 = input.LA(1);

                         
                        int index238_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA238_12 = input.LA(1);

                         
                        int index238_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA238_13 = input.LA(1);

                         
                        int index238_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA238_14 = input.LA(1);

                         
                        int index238_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA238_15 = input.LA(1);

                         
                        int index238_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA238_16 = input.LA(1);

                         
                        int index238_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA238_17 = input.LA(1);

                         
                        int index238_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA238_18 = input.LA(1);

                         
                        int index238_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA238_19 = input.LA(1);

                         
                        int index238_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA238_20 = input.LA(1);

                         
                        int index238_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA238_21 = input.LA(1);

                         
                        int index238_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA238_22 = input.LA(1);

                         
                        int index238_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA238_23 = input.LA(1);

                         
                        int index238_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA238_24 = input.LA(1);

                         
                        int index238_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA238_25 = input.LA(1);

                         
                        int index238_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA238_26 = input.LA(1);

                         
                        int index238_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA238_27 = input.LA(1);

                         
                        int index238_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA238_28 = input.LA(1);

                         
                        int index238_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA238_29 = input.LA(1);

                         
                        int index238_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred110_InternalN4JSParser()) ) {s = 34;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index238_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 238, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_155s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_155 = unpackEncodedStringArray(dfa_155s);

    class DFA237 extends DFA {

        public DFA237(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 237;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_155;
        }
        public String getDescription() {
            return "6998:3: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_156s = "\42\uffff";
    static final String dfa_157s = "\1\4\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_158s = "\1\176\1\0\1\uffff\32\0\5\uffff";
    static final String dfa_159s = "\2\uffff\1\1\32\uffff\1\3\3\uffff\1\2";
    static final String dfa_160s = "\1\0\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\5\uffff}>";
    static final String[] dfa_161s = {
            "\1\22\1\15\1\27\1\uffff\1\24\1\30\1\32\1\11\2\uffff\1\10\4\uffff\1\31\1\7\3\uffff\1\33\1\uffff\1\12\1\uffff\1\17\1\uffff\1\26\1\25\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\1\uffff\1\35\1\uffff\1\20\1\35\6\uffff\1\4\1\6\1\uffff\1\34\1\5\23\uffff\1\13\3\uffff\1\16\22\uffff\1\35\1\uffff\1\2\2\uffff\1\1\2\uffff\1\35\14\uffff\1\3",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_156 = DFA.unpackEncodedString(dfa_156s);
    static final char[] dfa_157 = DFA.unpackEncodedStringToUnsignedChars(dfa_157s);
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final short[] dfa_159 = DFA.unpackEncodedString(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[][] dfa_161 = unpackEncodedStringArray(dfa_161s);

    class DFA240 extends DFA {

        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = dfa_156;
            this.eof = dfa_156;
            this.min = dfa_157;
            this.max = dfa_158;
            this.accept = dfa_159;
            this.special = dfa_160;
            this.transition = dfa_161;
        }
        public String getDescription() {
            return "7017:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )? ( (NameBindingIdentifierParserRuleCall_2_1_0= norm1_BindingIdentifier ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA240_0 = input.LA(1);

                         
                        int index240_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_0==LeftCurlyBracket) ) {s = 1;}

                        else if ( (LA240_0==LeftSquareBracket) && (synpred112_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA240_0>=4 && LA240_0<=126 && (s=T2S.M_20[LA240_0-(4)])>=0)) { /* 26 cases */ }
                        else if ( (LA240_0==This_1||LA240_0==Void||LA240_0==QuestionMark||LA240_0==Tilde) ) {s = 29;}

                         
                        input.seek(index240_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA240_1 = input.LA(1);

                         
                        int index240_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred112_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA240_3 = input.LA(1);

                         
                        int index240_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA240_4 = input.LA(1);

                         
                        int index240_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA240_5 = input.LA(1);

                         
                        int index240_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA240_6 = input.LA(1);

                         
                        int index240_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA240_7 = input.LA(1);

                         
                        int index240_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA240_8 = input.LA(1);

                         
                        int index240_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA240_9 = input.LA(1);

                         
                        int index240_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA240_10 = input.LA(1);

                         
                        int index240_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA240_11 = input.LA(1);

                         
                        int index240_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA240_12 = input.LA(1);

                         
                        int index240_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA240_13 = input.LA(1);

                         
                        int index240_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA240_14 = input.LA(1);

                         
                        int index240_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA240_15 = input.LA(1);

                         
                        int index240_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA240_16 = input.LA(1);

                         
                        int index240_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA240_17 = input.LA(1);

                         
                        int index240_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA240_18 = input.LA(1);

                         
                        int index240_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA240_19 = input.LA(1);

                         
                        int index240_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA240_20 = input.LA(1);

                         
                        int index240_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA240_21 = input.LA(1);

                         
                        int index240_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA240_22 = input.LA(1);

                         
                        int index240_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA240_23 = input.LA(1);

                         
                        int index240_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA240_24 = input.LA(1);

                         
                        int index240_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA240_25 = input.LA(1);

                         
                        int index240_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA240_26 = input.LA(1);

                         
                        int index240_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA240_27 = input.LA(1);

                         
                        int index240_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA240_28 = input.LA(1);

                         
                        int index240_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred113_InternalN4JSParser()) ) {s = 33;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index240_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 240, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_162s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\6\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\6\uffff\1\13\1\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\24\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            "\1\13\20\uffff\1\1",
            ""
    };
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);

    class DFA239 extends DFA {

        public DFA239(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 239;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_80;
            this.max = dfa_81;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "7057:3: (BogusTypeRefFragmentParserRuleCall_2_0= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_163s = "\20\uffff";
    static final String dfa_164s = "\4\uffff\1\3\13\uffff";
    static final String dfa_165s = "\1\4\3\uffff\1\7\13\uffff";
    static final String dfa_166s = "\1\u0095\3\uffff\1\u0099\13\uffff";
    static final String dfa_167s = "\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\14\1\15\2\13";
    static final String dfa_168s = "\4\uffff\1\0\13\uffff}>";
    static final String[] dfa_169s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final short[] dfa_164 = DFA.unpackEncodedString(dfa_164s);
    static final char[] dfa_165 = DFA.unpackEncodedStringToUnsignedChars(dfa_165s);
    static final char[] dfa_166 = DFA.unpackEncodedStringToUnsignedChars(dfa_166s);
    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final short[] dfa_168 = DFA.unpackEncodedString(dfa_168s);
    static final short[][] dfa_169 = unpackEncodedStringArray(dfa_169s);

    class DFA241 extends DFA {

        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = dfa_163;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_169;
        }
        public String getDescription() {
            return "7153:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | ParameterizedCallExpressionParserRuleCall_3= ruleParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= ruleArrayLiteral | ObjectLiteralParserRuleCall_6= ruleObjectLiteral | ParenExpressionParserRuleCall_7= ruleParenExpression | AnnotatedExpressionParserRuleCall_8= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= ruleN4ClassExpression | TemplateLiteralParserRuleCall_12= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA241_4 = input.LA(1);

                         
                        int index241_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_4==RULE_NO_LINE_TERMINATOR) && (synpred117_InternalN4JSParser())) {s = 14;}

                        else if ( (LA241_4==Function) && (synpred117_InternalN4JSParser())) {s = 15;}

                        else if ( (LA241_4==EOF||LA241_4==Instanceof||LA241_4==ExclamationMarkEqualsSignEqualsSign||(LA241_4>=LessThanSignLessThanSignEqualsSign && LA241_4<=EqualsSignEqualsSignEqualsSign)||(LA241_4>=ExclamationMarkEqualsSign && LA241_4<=EqualsSignEqualsSign)||LA241_4==GreaterThanSignEqualsSign||(LA241_4>=CircumflexAccentEqualsSign && LA241_4<=As)||(LA241_4>=In && LA241_4<=VerticalLineVerticalLine)||(LA241_4>=PercentSign && LA241_4<=QuestionMark)||(LA241_4>=LeftSquareBracket && LA241_4<=RightCurlyBracket)||(LA241_4>=RULE_TEMPLATE_HEAD && LA241_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA241_4==RULE_ML_COMMENT||LA241_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index241_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 241, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_170s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\2\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\45\uffff\1\3\1\uffff\2\3\10\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_170 = unpackEncodedStringArray(dfa_170s);

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = dfa_163;
            this.eof = dfa_164;
            this.min = dfa_165;
            this.max = dfa_166;
            this.accept = dfa_167;
            this.special = dfa_168;
            this.transition = dfa_170;
        }
        public String getDescription() {
            return "7199:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | ParameterizedCallExpressionParserRuleCall_3= norm1_ParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_6= norm1_ObjectLiteral | ParenExpressionParserRuleCall_7= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_8= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_12= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA242_4 = input.LA(1);

                         
                        int index242_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA242_4==EOF||LA242_4==Instanceof||LA242_4==ExclamationMarkEqualsSignEqualsSign||(LA242_4>=LessThanSignLessThanSignEqualsSign && LA242_4<=EqualsSignEqualsSignEqualsSign)||(LA242_4>=ExclamationMarkEqualsSign && LA242_4<=EqualsSignEqualsSign)||LA242_4==GreaterThanSignEqualsSign||(LA242_4>=CircumflexAccentEqualsSign && LA242_4<=As)||(LA242_4>=In && LA242_4<=VerticalLineVerticalLine)||(LA242_4>=PercentSign && LA242_4<=QuestionMark)||(LA242_4>=LeftSquareBracket && LA242_4<=RightCurlyBracket)||(LA242_4>=RULE_TEMPLATE_HEAD && LA242_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA242_4==RULE_ML_COMMENT||LA242_4==RULE_EOL) ) {s = 3;}

                        else if ( (LA242_4==RULE_NO_LINE_TERMINATOR) && (synpred118_InternalN4JSParser())) {s = 14;}

                        else if ( (LA242_4==Function) && (synpred118_InternalN4JSParser())) {s = 15;}

                         
                        input.seek(index242_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 242, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_171s = "\5\uffff";
    static final String dfa_172s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_173s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_174s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_175s = "\5\uffff}>";
    static final String[] dfa_176s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\4\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\5\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_171 = DFA.unpackEncodedString(dfa_171s);
    static final char[] dfa_172 = DFA.unpackEncodedStringToUnsignedChars(dfa_172s);
    static final char[] dfa_173 = DFA.unpackEncodedStringToUnsignedChars(dfa_173s);
    static final short[] dfa_174 = DFA.unpackEncodedString(dfa_174s);
    static final short[] dfa_175 = DFA.unpackEncodedString(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA245 extends DFA {

        public DFA245(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 245;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 7392:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA251 extends DFA {

        public DFA251(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 251;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_173;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "()* loopback of 7462:3: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_177s = "\115\uffff";
    static final String dfa_178s = "\1\4\1\uffff\105\0\6\uffff";
    static final String dfa_179s = "\1\u0095\1\uffff\105\0\6\uffff";
    static final String dfa_180s = "\1\uffff\1\1\105\uffff\2\5\1\6\1\2\1\3\1\4";
    static final String dfa_181s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_182s = {
            "\1\16\1\13\1\76\1\43\1\5\1\77\1\101\1\70\1\25\1\26\1\67\1\37\1\27\1\34\1\35\1\100\1\66\1\30\1\33\1\41\1\102\1\45\1\71\1\47\1\6\1\52\1\75\1\4\1\20\1\22\1\23\1\24\1\61\1\46\1\50\1\15\1\54\1\56\1\3\1\21\1\32\1\62\1\73\1\57\1\11\1\60\1\12\1\2\1\55\4\uffff\1\36\1\63\1\65\1\44\1\103\1\64\1\51\1\53\21\uffff\1\72\1\31\1\40\1\42\1\74\5\uffff\1\111\1\uffff\1\110\7\uffff\1\107\2\uffff\1\17\1\1\1\106\2\uffff\1\14\2\uffff\1\10\3\uffff\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1\7\2\uffff\1\104\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[] dfa_181 = DFA.unpackEncodedString(dfa_181s);
    static final short[][] dfa_182 = unpackEncodedStringArray(dfa_182s);

    class DFA263 extends DFA {

        public DFA263(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 263;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "7683:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA263_0 = input.LA(1);

                         
                        int index263_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA263_0>=4 && LA263_0<=129 && (s=T2S.M_21[LA263_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA263_0==RULE_DOUBLE||LA263_0==RULE_HEX_INT||LA263_0==RULE_OCTAL_INT||LA263_0==RULE_SCIENTIFIC_INT||LA263_0==RULE_INT) ) {s = 69;}

                        else if ( (LA263_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA263_0==LessThanSign) && (synpred122_InternalN4JSParser())) {s = 71;}

                        else if ( (LA263_0==Asterisk) && (synpred122_InternalN4JSParser())) {s = 72;}

                        else if ( (LA263_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index263_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA263_2 = input.LA(1);

                         
                        int index263_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA263_3 = input.LA(1);

                         
                        int index263_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA263_4 = input.LA(1);

                         
                        int index263_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA263_5 = input.LA(1);

                         
                        int index263_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA263_6 = input.LA(1);

                         
                        int index263_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA263_7 = input.LA(1);

                         
                        int index263_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA263_8 = input.LA(1);

                         
                        int index263_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA263_9 = input.LA(1);

                         
                        int index263_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA263_10 = input.LA(1);

                         
                        int index263_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA263_11 = input.LA(1);

                         
                        int index263_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA263_12 = input.LA(1);

                         
                        int index263_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA263_13 = input.LA(1);

                         
                        int index263_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA263_14 = input.LA(1);

                         
                        int index263_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA263_15 = input.LA(1);

                         
                        int index263_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA263_16 = input.LA(1);

                         
                        int index263_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA263_17 = input.LA(1);

                         
                        int index263_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA263_18 = input.LA(1);

                         
                        int index263_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA263_19 = input.LA(1);

                         
                        int index263_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA263_20 = input.LA(1);

                         
                        int index263_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA263_21 = input.LA(1);

                         
                        int index263_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA263_22 = input.LA(1);

                         
                        int index263_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA263_23 = input.LA(1);

                         
                        int index263_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA263_24 = input.LA(1);

                         
                        int index263_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA263_25 = input.LA(1);

                         
                        int index263_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA263_26 = input.LA(1);

                         
                        int index263_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA263_27 = input.LA(1);

                         
                        int index263_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA263_28 = input.LA(1);

                         
                        int index263_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA263_29 = input.LA(1);

                         
                        int index263_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA263_30 = input.LA(1);

                         
                        int index263_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA263_31 = input.LA(1);

                         
                        int index263_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA263_32 = input.LA(1);

                         
                        int index263_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA263_33 = input.LA(1);

                         
                        int index263_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA263_34 = input.LA(1);

                         
                        int index263_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA263_35 = input.LA(1);

                         
                        int index263_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA263_36 = input.LA(1);

                         
                        int index263_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA263_37 = input.LA(1);

                         
                        int index263_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA263_38 = input.LA(1);

                         
                        int index263_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA263_39 = input.LA(1);

                         
                        int index263_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA263_40 = input.LA(1);

                         
                        int index263_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA263_41 = input.LA(1);

                         
                        int index263_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA263_42 = input.LA(1);

                         
                        int index263_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA263_43 = input.LA(1);

                         
                        int index263_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA263_44 = input.LA(1);

                         
                        int index263_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA263_45 = input.LA(1);

                         
                        int index263_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA263_46 = input.LA(1);

                         
                        int index263_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA263_47 = input.LA(1);

                         
                        int index263_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA263_48 = input.LA(1);

                         
                        int index263_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA263_49 = input.LA(1);

                         
                        int index263_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA263_50 = input.LA(1);

                         
                        int index263_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA263_51 = input.LA(1);

                         
                        int index263_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA263_52 = input.LA(1);

                         
                        int index263_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA263_53 = input.LA(1);

                         
                        int index263_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA263_54 = input.LA(1);

                         
                        int index263_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA263_55 = input.LA(1);

                         
                        int index263_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA263_56 = input.LA(1);

                         
                        int index263_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA263_57 = input.LA(1);

                         
                        int index263_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA263_58 = input.LA(1);

                         
                        int index263_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA263_59 = input.LA(1);

                         
                        int index263_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA263_60 = input.LA(1);

                         
                        int index263_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA263_61 = input.LA(1);

                         
                        int index263_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA263_62 = input.LA(1);

                         
                        int index263_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA263_63 = input.LA(1);

                         
                        int index263_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA263_64 = input.LA(1);

                         
                        int index263_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA263_65 = input.LA(1);

                         
                        int index263_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA263_66 = input.LA(1);

                         
                        int index263_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA263_67 = input.LA(1);

                         
                        int index263_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA263_68 = input.LA(1);

                         
                        int index263_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA263_69 = input.LA(1);

                         
                        int index263_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index263_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA263_70 = input.LA(1);

                         
                        int index263_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index263_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 263, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA264 extends DFA {

        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_181;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "7909:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA264_0 = input.LA(1);

                         
                        int index264_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA264_0>=4 && LA264_0<=129 && (s=T2S.M_21[LA264_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA264_0==RULE_DOUBLE||LA264_0==RULE_HEX_INT||LA264_0==RULE_OCTAL_INT||LA264_0==RULE_SCIENTIFIC_INT||LA264_0==RULE_INT) ) {s = 69;}

                        else if ( (LA264_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA264_0==LessThanSign) && (synpred126_InternalN4JSParser())) {s = 71;}

                        else if ( (LA264_0==Asterisk) && (synpred126_InternalN4JSParser())) {s = 72;}

                        else if ( (LA264_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index264_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA264_2 = input.LA(1);

                         
                        int index264_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA264_3 = input.LA(1);

                         
                        int index264_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA264_4 = input.LA(1);

                         
                        int index264_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA264_5 = input.LA(1);

                         
                        int index264_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA264_6 = input.LA(1);

                         
                        int index264_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA264_7 = input.LA(1);

                         
                        int index264_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA264_8 = input.LA(1);

                         
                        int index264_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA264_9 = input.LA(1);

                         
                        int index264_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA264_10 = input.LA(1);

                         
                        int index264_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA264_11 = input.LA(1);

                         
                        int index264_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA264_12 = input.LA(1);

                         
                        int index264_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA264_13 = input.LA(1);

                         
                        int index264_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA264_14 = input.LA(1);

                         
                        int index264_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA264_15 = input.LA(1);

                         
                        int index264_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA264_16 = input.LA(1);

                         
                        int index264_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA264_17 = input.LA(1);

                         
                        int index264_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA264_18 = input.LA(1);

                         
                        int index264_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA264_19 = input.LA(1);

                         
                        int index264_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA264_20 = input.LA(1);

                         
                        int index264_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA264_21 = input.LA(1);

                         
                        int index264_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA264_22 = input.LA(1);

                         
                        int index264_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA264_23 = input.LA(1);

                         
                        int index264_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA264_24 = input.LA(1);

                         
                        int index264_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA264_25 = input.LA(1);

                         
                        int index264_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA264_26 = input.LA(1);

                         
                        int index264_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA264_27 = input.LA(1);

                         
                        int index264_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA264_28 = input.LA(1);

                         
                        int index264_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA264_29 = input.LA(1);

                         
                        int index264_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA264_30 = input.LA(1);

                         
                        int index264_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA264_31 = input.LA(1);

                         
                        int index264_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA264_32 = input.LA(1);

                         
                        int index264_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA264_33 = input.LA(1);

                         
                        int index264_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA264_34 = input.LA(1);

                         
                        int index264_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA264_35 = input.LA(1);

                         
                        int index264_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA264_36 = input.LA(1);

                         
                        int index264_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA264_37 = input.LA(1);

                         
                        int index264_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA264_38 = input.LA(1);

                         
                        int index264_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA264_39 = input.LA(1);

                         
                        int index264_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA264_40 = input.LA(1);

                         
                        int index264_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA264_41 = input.LA(1);

                         
                        int index264_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA264_42 = input.LA(1);

                         
                        int index264_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA264_43 = input.LA(1);

                         
                        int index264_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA264_44 = input.LA(1);

                         
                        int index264_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA264_45 = input.LA(1);

                         
                        int index264_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA264_46 = input.LA(1);

                         
                        int index264_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA264_47 = input.LA(1);

                         
                        int index264_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA264_48 = input.LA(1);

                         
                        int index264_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA264_49 = input.LA(1);

                         
                        int index264_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA264_50 = input.LA(1);

                         
                        int index264_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA264_51 = input.LA(1);

                         
                        int index264_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA264_52 = input.LA(1);

                         
                        int index264_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA264_53 = input.LA(1);

                         
                        int index264_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA264_54 = input.LA(1);

                         
                        int index264_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA264_55 = input.LA(1);

                         
                        int index264_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA264_56 = input.LA(1);

                         
                        int index264_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA264_57 = input.LA(1);

                         
                        int index264_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA264_58 = input.LA(1);

                         
                        int index264_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA264_59 = input.LA(1);

                         
                        int index264_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA264_60 = input.LA(1);

                         
                        int index264_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA264_61 = input.LA(1);

                         
                        int index264_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA264_62 = input.LA(1);

                         
                        int index264_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA264_63 = input.LA(1);

                         
                        int index264_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA264_64 = input.LA(1);

                         
                        int index264_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA264_65 = input.LA(1);

                         
                        int index264_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA264_66 = input.LA(1);

                         
                        int index264_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA264_67 = input.LA(1);

                         
                        int index264_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA264_68 = input.LA(1);

                         
                        int index264_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA264_69 = input.LA(1);

                         
                        int index264_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA264_70 = input.LA(1);

                         
                        int index264_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index264_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 264, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_183s = "\114\uffff";
    static final String dfa_184s = "\1\4\105\0\6\uffff";
    static final String dfa_185s = "\1\u0095\105\0\6\uffff";
    static final String dfa_186s = "\106\uffff\2\4\1\5\1\1\1\2\1\3";
    static final String dfa_187s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_188s = {
            "\1\15\1\12\1\75\1\42\1\4\1\76\1\100\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\77\1\65\1\27\1\32\1\40\1\101\1\44\1\70\1\46\1\5\1\51\1\74\1\3\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\14\1\53\1\55\1\2\1\20\1\31\1\61\1\72\1\56\1\10\1\57\1\11\1\1\1\54\4\uffff\1\35\1\62\1\64\1\43\1\102\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\5\uffff\1\110\1\uffff\1\107\7\uffff\1\106\2\uffff\1\16\1\uffff\1\105\2\uffff\1\13\2\uffff\1\7\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\6\2\uffff\1\103\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA272 extends DFA {

        public DFA272(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 272;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "8142:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA272_0 = input.LA(1);

                         
                        int index272_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA272_0>=4 && LA272_0<=129 && (s=T2S.M_23[LA272_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA272_0==RULE_DOUBLE||LA272_0==RULE_HEX_INT||LA272_0==RULE_OCTAL_INT||LA272_0==RULE_SCIENTIFIC_INT||LA272_0==RULE_INT) ) {s = 68;}

                        else if ( (LA272_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA272_0==LessThanSign) && (synpred133_InternalN4JSParser())) {s = 70;}

                        else if ( (LA272_0==Asterisk) && (synpred133_InternalN4JSParser())) {s = 71;}

                        else if ( (LA272_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index272_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA272_1 = input.LA(1);

                         
                        int index272_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA272_2 = input.LA(1);

                         
                        int index272_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA272_3 = input.LA(1);

                         
                        int index272_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA272_4 = input.LA(1);

                         
                        int index272_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA272_5 = input.LA(1);

                         
                        int index272_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA272_6 = input.LA(1);

                         
                        int index272_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA272_7 = input.LA(1);

                         
                        int index272_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA272_8 = input.LA(1);

                         
                        int index272_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA272_9 = input.LA(1);

                         
                        int index272_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA272_10 = input.LA(1);

                         
                        int index272_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA272_11 = input.LA(1);

                         
                        int index272_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA272_12 = input.LA(1);

                         
                        int index272_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA272_13 = input.LA(1);

                         
                        int index272_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA272_14 = input.LA(1);

                         
                        int index272_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA272_15 = input.LA(1);

                         
                        int index272_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA272_16 = input.LA(1);

                         
                        int index272_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA272_17 = input.LA(1);

                         
                        int index272_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA272_18 = input.LA(1);

                         
                        int index272_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA272_19 = input.LA(1);

                         
                        int index272_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA272_20 = input.LA(1);

                         
                        int index272_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA272_21 = input.LA(1);

                         
                        int index272_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA272_22 = input.LA(1);

                         
                        int index272_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA272_23 = input.LA(1);

                         
                        int index272_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA272_24 = input.LA(1);

                         
                        int index272_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA272_25 = input.LA(1);

                         
                        int index272_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA272_26 = input.LA(1);

                         
                        int index272_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA272_27 = input.LA(1);

                         
                        int index272_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA272_28 = input.LA(1);

                         
                        int index272_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA272_29 = input.LA(1);

                         
                        int index272_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA272_30 = input.LA(1);

                         
                        int index272_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA272_31 = input.LA(1);

                         
                        int index272_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA272_32 = input.LA(1);

                         
                        int index272_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA272_33 = input.LA(1);

                         
                        int index272_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA272_34 = input.LA(1);

                         
                        int index272_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA272_35 = input.LA(1);

                         
                        int index272_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA272_36 = input.LA(1);

                         
                        int index272_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA272_37 = input.LA(1);

                         
                        int index272_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA272_38 = input.LA(1);

                         
                        int index272_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA272_39 = input.LA(1);

                         
                        int index272_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA272_40 = input.LA(1);

                         
                        int index272_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA272_41 = input.LA(1);

                         
                        int index272_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA272_42 = input.LA(1);

                         
                        int index272_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA272_43 = input.LA(1);

                         
                        int index272_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA272_44 = input.LA(1);

                         
                        int index272_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA272_45 = input.LA(1);

                         
                        int index272_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA272_46 = input.LA(1);

                         
                        int index272_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA272_47 = input.LA(1);

                         
                        int index272_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA272_48 = input.LA(1);

                         
                        int index272_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA272_49 = input.LA(1);

                         
                        int index272_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA272_50 = input.LA(1);

                         
                        int index272_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA272_51 = input.LA(1);

                         
                        int index272_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA272_52 = input.LA(1);

                         
                        int index272_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA272_53 = input.LA(1);

                         
                        int index272_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA272_54 = input.LA(1);

                         
                        int index272_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA272_55 = input.LA(1);

                         
                        int index272_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA272_56 = input.LA(1);

                         
                        int index272_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA272_57 = input.LA(1);

                         
                        int index272_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA272_58 = input.LA(1);

                         
                        int index272_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA272_59 = input.LA(1);

                         
                        int index272_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA272_60 = input.LA(1);

                         
                        int index272_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA272_61 = input.LA(1);

                         
                        int index272_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA272_62 = input.LA(1);

                         
                        int index272_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA272_63 = input.LA(1);

                         
                        int index272_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA272_64 = input.LA(1);

                         
                        int index272_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA272_65 = input.LA(1);

                         
                        int index272_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA272_66 = input.LA(1);

                         
                        int index272_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA272_67 = input.LA(1);

                         
                        int index272_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA272_68 = input.LA(1);

                         
                        int index272_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index272_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA272_69 = input.LA(1);

                         
                        int index272_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index272_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 272, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_189s = "\16\uffff";
    static final String dfa_190s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_191s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_192s = "\7\uffff\1\1\5\uffff\1\2";
    static final String dfa_193s = "\16\uffff}>";
    static final String[] dfa_194s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };

    static final short[] dfa_189 = DFA.unpackEncodedString(dfa_189s);
    static final char[] dfa_190 = DFA.unpackEncodedStringToUnsignedChars(dfa_190s);
    static final char[] dfa_191 = DFA.unpackEncodedStringToUnsignedChars(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final short[] dfa_193 = DFA.unpackEncodedString(dfa_193s);
    static final short[][] dfa_194 = unpackEncodedStringArray(dfa_194s);

    class DFA265 extends DFA {

        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8160:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_195s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_196s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\7\uffff\1\15\12\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_195 = DFA.unpackEncodedStringToUnsignedChars(dfa_195s);
    static final short[][] dfa_196 = unpackEncodedStringArray(dfa_196s);

    class DFA267 extends DFA {

        public DFA267(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 267;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8506:6: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String dfa_197s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_198s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String[] dfa_199s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final char[] dfa_198 = DFA.unpackEncodedStringToUnsignedChars(dfa_198s);
    static final short[][] dfa_199 = unpackEncodedStringArray(dfa_199s);

    class DFA270 extends DFA {

        public DFA270(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 270;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "8563:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA280 extends DFA {

        public DFA280(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 280;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "8602:2: ( ( ( ( ( ( ( ruleTypeRefWithModifiers ) )? ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )? ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRefWithModifiers ) )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA280_0 = input.LA(1);

                         
                        int index280_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA280_0>=4 && LA280_0<=129 && (s=T2S.M_23[LA280_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA280_0==RULE_DOUBLE||LA280_0==RULE_HEX_INT||LA280_0==RULE_OCTAL_INT||LA280_0==RULE_SCIENTIFIC_INT||LA280_0==RULE_INT) ) {s = 68;}

                        else if ( (LA280_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA280_0==LessThanSign) && (synpred142_InternalN4JSParser())) {s = 70;}

                        else if ( (LA280_0==Asterisk) && (synpred142_InternalN4JSParser())) {s = 71;}

                        else if ( (LA280_0==LeftParenthesis) ) {s = 72;}

                         
                        input.seek(index280_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA280_1 = input.LA(1);

                         
                        int index280_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA280_2 = input.LA(1);

                         
                        int index280_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA280_3 = input.LA(1);

                         
                        int index280_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA280_4 = input.LA(1);

                         
                        int index280_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA280_5 = input.LA(1);

                         
                        int index280_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA280_6 = input.LA(1);

                         
                        int index280_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA280_7 = input.LA(1);

                         
                        int index280_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA280_8 = input.LA(1);

                         
                        int index280_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA280_9 = input.LA(1);

                         
                        int index280_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA280_10 = input.LA(1);

                         
                        int index280_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA280_11 = input.LA(1);

                         
                        int index280_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA280_12 = input.LA(1);

                         
                        int index280_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA280_13 = input.LA(1);

                         
                        int index280_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA280_14 = input.LA(1);

                         
                        int index280_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA280_15 = input.LA(1);

                         
                        int index280_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA280_16 = input.LA(1);

                         
                        int index280_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA280_17 = input.LA(1);

                         
                        int index280_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA280_18 = input.LA(1);

                         
                        int index280_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA280_19 = input.LA(1);

                         
                        int index280_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA280_20 = input.LA(1);

                         
                        int index280_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA280_21 = input.LA(1);

                         
                        int index280_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA280_22 = input.LA(1);

                         
                        int index280_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA280_23 = input.LA(1);

                         
                        int index280_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA280_24 = input.LA(1);

                         
                        int index280_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA280_25 = input.LA(1);

                         
                        int index280_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA280_26 = input.LA(1);

                         
                        int index280_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA280_27 = input.LA(1);

                         
                        int index280_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA280_28 = input.LA(1);

                         
                        int index280_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA280_29 = input.LA(1);

                         
                        int index280_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA280_30 = input.LA(1);

                         
                        int index280_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA280_31 = input.LA(1);

                         
                        int index280_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA280_32 = input.LA(1);

                         
                        int index280_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA280_33 = input.LA(1);

                         
                        int index280_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA280_34 = input.LA(1);

                         
                        int index280_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA280_35 = input.LA(1);

                         
                        int index280_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA280_36 = input.LA(1);

                         
                        int index280_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA280_37 = input.LA(1);

                         
                        int index280_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA280_38 = input.LA(1);

                         
                        int index280_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA280_39 = input.LA(1);

                         
                        int index280_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA280_40 = input.LA(1);

                         
                        int index280_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA280_41 = input.LA(1);

                         
                        int index280_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA280_42 = input.LA(1);

                         
                        int index280_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA280_43 = input.LA(1);

                         
                        int index280_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA280_44 = input.LA(1);

                         
                        int index280_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA280_45 = input.LA(1);

                         
                        int index280_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA280_46 = input.LA(1);

                         
                        int index280_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA280_47 = input.LA(1);

                         
                        int index280_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA280_48 = input.LA(1);

                         
                        int index280_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA280_49 = input.LA(1);

                         
                        int index280_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA280_50 = input.LA(1);

                         
                        int index280_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA280_51 = input.LA(1);

                         
                        int index280_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred139_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA280_52 = input.LA(1);

                         
                        int index280_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA280_53 = input.LA(1);

                         
                        int index280_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA280_54 = input.LA(1);

                         
                        int index280_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA280_55 = input.LA(1);

                         
                        int index280_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA280_56 = input.LA(1);

                         
                        int index280_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA280_57 = input.LA(1);

                         
                        int index280_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA280_58 = input.LA(1);

                         
                        int index280_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA280_59 = input.LA(1);

                         
                        int index280_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA280_60 = input.LA(1);

                         
                        int index280_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA280_61 = input.LA(1);

                         
                        int index280_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA280_62 = input.LA(1);

                         
                        int index280_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA280_63 = input.LA(1);

                         
                        int index280_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA280_64 = input.LA(1);

                         
                        int index280_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA280_65 = input.LA(1);

                         
                        int index280_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA280_66 = input.LA(1);

                         
                        int index280_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA280_67 = input.LA(1);

                         
                        int index280_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA280_68 = input.LA(1);

                         
                        int index280_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index280_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA280_69 = input.LA(1);

                         
                        int index280_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 72;}

                         
                        input.seek(index280_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 280, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA273 extends DFA {

        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8620:6: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_1_0_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA275 extends DFA {

        public DFA275(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 275;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8966:6: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_1_3_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }
    static final String[] dfa_200s = {
            "\1\12\1\10\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\1\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\7\1\1\6\uffff\2\13\1\uffff\2\13\23\uffff\1\13\3\uffff\1\13\5\uffff\1\1\14\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\2\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\2\1\23\uffff\1\1\3\uffff\1\1\4\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\5\uffff\1\1\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_200 = unpackEncodedStringArray(dfa_200s);

    class DFA278 extends DFA {

        public DFA278(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 278;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "9023:4: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA282 extends DFA {

        public DFA282(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 282;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "9106:4: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA286 extends DFA {

        public DFA286(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 286;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "9209:4: ( (ReturnTypeRefTypeRefWithModifiersParserRuleCall_0_0_2_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA289 extends DFA {

        public DFA289(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 289;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "9293:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA290 extends DFA {

        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "9345:4: ( (DeclaredTypeRefTypeRefWithModifiersParserRuleCall_0_0_1_0= ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA291 extends DFA {

        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_39;
            this.eof = dfa_79;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_199;
        }
        public String getDescription() {
            return "9386:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA293 extends DFA {

        public DFA293(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 293;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_197;
            this.max = dfa_198;
            this.accept = dfa_82;
            this.special = dfa_44;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "9422:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_201s = "\70\uffff";
    static final String dfa_202s = "\2\4\66\uffff";
    static final String dfa_203s = "\2\u0095\66\uffff";
    static final String dfa_204s = "\2\uffff\1\3\64\2\1\1";
    static final String dfa_205s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_206s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\5\1\uffff\1\25\1\uffff\1\7\1\27\3\uffff\1\20\1\54\1\4\1\51\1\24\7\uffff\1\10\1\12\1\3\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\67\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\6\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_201 = DFA.unpackEncodedString(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final char[] dfa_203 = DFA.unpackEncodedStringToUnsignedChars(dfa_203s);
    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final short[][] dfa_206 = unpackEncodedStringArray(dfa_206s);

    class DFA311 extends DFA {

        public DFA311(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 311;
            this.eot = dfa_201;
            this.eof = dfa_201;
            this.min = dfa_202;
            this.max = dfa_203;
            this.accept = dfa_204;
            this.special = dfa_205;
            this.transition = dfa_206;
        }
        public String getDescription() {
            return "10360:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA311_1 = input.LA(1);

                         
                        int index311_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA311_1>=4 && LA311_1<=149 && (s=T2S.M_25[LA311_1-(4)])>=0) && (synpred166_InternalN4JSParser())) { /* 52 cases */ }
                        else if ( (LA311_1==FullStop) && (synpred165_InternalN4JSParser())) {s = 55;}

                         
                        input.seek(index311_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 311, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_207s = "\2\4\65\uffff";
    static final String dfa_208s = "\2\u0095\65\uffff";
    static final String dfa_209s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_210s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_211s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\2\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\33\1\uffff\1\30\1\34\1\36\1\15\2\uffff\1\14\1\63\3\uffff\1\35\1\13\3\uffff\1\37\1\uffff\1\16\1\uffff\1\23\1\uffff\1\32\1\31\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\40\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_207 = DFA.unpackEncodedStringToUnsignedChars(dfa_207s);
    static final char[] dfa_208 = DFA.unpackEncodedStringToUnsignedChars(dfa_208s);
    static final short[] dfa_209 = DFA.unpackEncodedString(dfa_209s);
    static final short[] dfa_210 = DFA.unpackEncodedString(dfa_210s);
    static final short[][] dfa_211 = unpackEncodedStringArray(dfa_211s);

    class DFA317 extends DFA {

        public DFA317(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 317;
            this.eot = dfa_25;
            this.eof = dfa_25;
            this.min = dfa_207;
            this.max = dfa_208;
            this.accept = dfa_209;
            this.special = dfa_210;
            this.transition = dfa_211;
        }
        public String getDescription() {
            return "10482:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA317_1 = input.LA(1);

                         
                        int index317_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA317_1==FullStop) && (synpred169_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA317_1>=4 && LA317_1<=149 && (s=T2S.M_26[LA317_1-(4)])>=0) && (synpred170_InternalN4JSParser())) { /* 52 cases */ }
                        input.seek(index317_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 317, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_212s = "\103\uffff";
    static final String dfa_213s = "\1\1\102\uffff";
    static final String dfa_214s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_215s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_216s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_217s = "\1\0\3\uffff\1\1\76\uffff}>";
    static final String[] dfa_218s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final short[] dfa_213 = DFA.unpackEncodedString(dfa_213s);
    static final char[] dfa_214 = DFA.unpackEncodedStringToUnsignedChars(dfa_214s);
    static final char[] dfa_215 = DFA.unpackEncodedStringToUnsignedChars(dfa_215s);
    static final short[] dfa_216 = DFA.unpackEncodedString(dfa_216s);
    static final short[] dfa_217 = DFA.unpackEncodedString(dfa_217s);
    static final short[][] dfa_218 = unpackEncodedStringArray(dfa_218s);

    class DFA330 extends DFA {

        public DFA330(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 330;
            this.eot = dfa_212;
            this.eof = dfa_213;
            this.min = dfa_214;
            this.max = dfa_215;
            this.accept = dfa_216;
            this.special = dfa_217;
            this.transition = dfa_218;
        }
        public String getDescription() {
            return "()* loopback of 11052:2: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA330_0 = input.LA(1);

                         
                        int index330_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA330_0==EOF||LA330_0==Instanceof||LA330_0==ExclamationMarkEqualsSignEqualsSign||(LA330_0>=LessThanSignLessThanSignEqualsSign && LA330_0<=EqualsSignEqualsSignEqualsSign)||(LA330_0>=ExclamationMarkEqualsSign && LA330_0<=AsteriskEqualsSign)||LA330_0==PlusSignEqualsSign||(LA330_0>=HyphenMinusEqualsSign && LA330_0<=SolidusEqualsSign)||(LA330_0>=LessThanSignEqualsSign && LA330_0<=EqualsSignEqualsSign)||LA330_0==GreaterThanSignEqualsSign||LA330_0==CircumflexAccentEqualsSign||(LA330_0>=In && LA330_0<=VerticalLineVerticalLine)||LA330_0==Ampersand||LA330_0==RightParenthesis||LA330_0==Comma||(LA330_0>=Colon && LA330_0<=EqualsSign)||LA330_0==QuestionMark||(LA330_0>=RightSquareBracket && LA330_0<=CircumflexAccent)||(LA330_0>=VerticalLine && LA330_0<=RightCurlyBracket)||LA330_0==RULE_ML_COMMENT||LA330_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA330_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA330_0==LessThanSignLessThanSign) && (synpred181_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index330_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA330_4 = input.LA(1);

                         
                        int index330_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA330_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA330_4>=4 && LA330_4<=149 && (s=T2S.M_27[LA330_4-(4)])>=0) && (synpred181_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index330_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 330, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_219s = "\1\1\101\uffff";
    static final String dfa_220s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_221s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_222s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_223s = "\1\0\3\uffff\1\1\75\uffff}>";
    static final String[] dfa_224s = {
            "\1\1\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\4\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\5\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\35\1\uffff\1\32\1\36\1\40\1\17\2\uffff\1\16\1\65\3\uffff\1\37\1\15\1\71\2\uffff\1\41\1\uffff\1\20\1\uffff\1\25\1\73\1\34\1\33\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\42\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final char[] dfa_220 = DFA.unpackEncodedStringToUnsignedChars(dfa_220s);
    static final char[] dfa_221 = DFA.unpackEncodedStringToUnsignedChars(dfa_221s);
    static final short[] dfa_222 = DFA.unpackEncodedString(dfa_222s);
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final short[][] dfa_224 = unpackEncodedStringArray(dfa_224s);

    class DFA331 extends DFA {

        public DFA331(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 331;
            this.eot = dfa_121;
            this.eof = dfa_219;
            this.min = dfa_220;
            this.max = dfa_221;
            this.accept = dfa_222;
            this.special = dfa_223;
            this.transition = dfa_224;
        }
        public String getDescription() {
            return "()* loopback of 11093:2: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA331_0 = input.LA(1);

                         
                        int index331_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA331_0==EOF||LA331_0==Instanceof||LA331_0==ExclamationMarkEqualsSignEqualsSign||(LA331_0>=LessThanSignLessThanSignEqualsSign && LA331_0<=EqualsSignEqualsSignEqualsSign)||(LA331_0>=ExclamationMarkEqualsSign && LA331_0<=AsteriskEqualsSign)||LA331_0==PlusSignEqualsSign||(LA331_0>=HyphenMinusEqualsSign && LA331_0<=SolidusEqualsSign)||(LA331_0>=LessThanSignEqualsSign && LA331_0<=EqualsSignEqualsSign)||LA331_0==GreaterThanSignEqualsSign||LA331_0==CircumflexAccentEqualsSign||(LA331_0>=In && LA331_0<=VerticalLineVerticalLine)||LA331_0==Ampersand||LA331_0==RightParenthesis||LA331_0==Comma||(LA331_0>=Colon && LA331_0<=EqualsSign)||LA331_0==QuestionMark||(LA331_0>=RightSquareBracket && LA331_0<=CircumflexAccent)||(LA331_0>=VerticalLine && LA331_0<=RightCurlyBracket)||LA331_0==RULE_ML_COMMENT||LA331_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA331_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA331_0==LessThanSignLessThanSign) && (synpred182_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index331_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA331_4 = input.LA(1);

                         
                        int index331_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA331_4>=4 && LA331_4<=149 && (s=T2S.M_28[LA331_4-(4)])>=0) && (synpred182_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA331_4==GreaterThanSignEqualsSign) ) {s = 1;}

                         
                        input.seek(index331_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 331, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_225s = "\104\uffff";
    static final String dfa_226s = "\1\1\103\uffff";
    static final String dfa_227s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_228s = "\1\157\1\uffff\1\u0095\101\uffff";
    static final String dfa_229s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_230s = "\1\1\1\uffff\1\0\101\uffff}>";
    static final String[] dfa_231s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_225 = DFA.unpackEncodedString(dfa_225s);
    static final short[] dfa_226 = DFA.unpackEncodedString(dfa_226s);
    static final char[] dfa_227 = DFA.unpackEncodedStringToUnsignedChars(dfa_227s);
    static final char[] dfa_228 = DFA.unpackEncodedStringToUnsignedChars(dfa_228s);
    static final short[] dfa_229 = DFA.unpackEncodedString(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[][] dfa_231 = unpackEncodedStringArray(dfa_231s);

    class DFA334 extends DFA {

        public DFA334(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 334;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_228;
            this.accept = dfa_229;
            this.special = dfa_230;
            this.transition = dfa_231;
        }
        public String getDescription() {
            return "()* loopback of 11171:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA334_2 = input.LA(1);

                         
                        int index334_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA334_2>=4 && LA334_2<=149 && (s=T2S.M_29[LA334_2-(4)])>=0) && (synpred183_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA334_2==GreaterThanSignEqualsSign||LA334_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index334_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA334_0 = input.LA(1);

                         
                        int index334_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA334_0==EOF||LA334_0==ExclamationMarkEqualsSignEqualsSign||(LA334_0>=LessThanSignLessThanSignEqualsSign && LA334_0<=EqualsSignEqualsSignEqualsSign)||(LA334_0>=ExclamationMarkEqualsSign && LA334_0<=AsteriskEqualsSign)||LA334_0==PlusSignEqualsSign||(LA334_0>=HyphenMinusEqualsSign && LA334_0<=SolidusEqualsSign)||LA334_0==EqualsSignEqualsSign||LA334_0==CircumflexAccentEqualsSign||(LA334_0>=In && LA334_0<=VerticalLineVerticalLine)||LA334_0==Ampersand||LA334_0==Comma||LA334_0==Semicolon||LA334_0==EqualsSign||LA334_0==QuestionMark||LA334_0==CircumflexAccent||LA334_0==VerticalLine) ) {s = 1;}

                        else if ( (LA334_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA334_0==LessThanSign) && (synpred183_InternalN4JSParser())) {s = 3;}

                        else if ( (LA334_0==LessThanSignEqualsSign) && (synpred183_InternalN4JSParser())) {s = 4;}

                        else if ( (LA334_0==GreaterThanSignEqualsSign) && (synpred183_InternalN4JSParser())) {s = 5;}

                        else if ( (LA334_0==Instanceof) && (synpred183_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index334_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 334, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_232s = "\105\uffff";
    static final String dfa_233s = "\1\1\104\uffff";
    static final String dfa_234s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_235s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_236s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_237s = "\1\0\1\uffff\1\1\102\uffff}>";
    static final String[] dfa_238s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\40\1\uffff\1\35\1\41\1\43\1\22\2\uffff\1\21\1\70\3\uffff\1\42\1\20\1\74\2\uffff\1\44\1\uffff\1\23\1\uffff\1\30\1\76\1\37\1\36\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\45\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_232 = DFA.unpackEncodedString(dfa_232s);
    static final short[] dfa_233 = DFA.unpackEncodedString(dfa_233s);
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final char[] dfa_235 = DFA.unpackEncodedStringToUnsignedChars(dfa_235s);
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final short[][] dfa_238 = unpackEncodedStringArray(dfa_238s);

    class DFA335 extends DFA {

        public DFA335(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 335;
            this.eot = dfa_232;
            this.eof = dfa_233;
            this.min = dfa_234;
            this.max = dfa_235;
            this.accept = dfa_236;
            this.special = dfa_237;
            this.transition = dfa_238;
        }
        public String getDescription() {
            return "()* loopback of 11381:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA335_0 = input.LA(1);

                         
                        int index335_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA335_0==EOF||LA335_0==ExclamationMarkEqualsSignEqualsSign||(LA335_0>=LessThanSignLessThanSignEqualsSign && LA335_0<=EqualsSignEqualsSignEqualsSign)||(LA335_0>=ExclamationMarkEqualsSign && LA335_0<=AsteriskEqualsSign)||LA335_0==PlusSignEqualsSign||(LA335_0>=HyphenMinusEqualsSign && LA335_0<=SolidusEqualsSign)||LA335_0==EqualsSignEqualsSign||LA335_0==CircumflexAccentEqualsSign||(LA335_0>=VerticalLineEqualsSign && LA335_0<=VerticalLineVerticalLine)||LA335_0==Ampersand||LA335_0==RightParenthesis||LA335_0==Comma||(LA335_0>=Colon && LA335_0<=Semicolon)||LA335_0==EqualsSign||LA335_0==QuestionMark||(LA335_0>=RightSquareBracket && LA335_0<=CircumflexAccent)||(LA335_0>=VerticalLine && LA335_0<=RightCurlyBracket)||LA335_0==RULE_ML_COMMENT||LA335_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA335_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA335_0==LessThanSign) && (synpred185_InternalN4JSParser())) {s = 3;}

                        else if ( (LA335_0==LessThanSignEqualsSign) && (synpred185_InternalN4JSParser())) {s = 4;}

                        else if ( (LA335_0==GreaterThanSignEqualsSign) && (synpred185_InternalN4JSParser())) {s = 5;}

                        else if ( (LA335_0==Instanceof) && (synpred185_InternalN4JSParser())) {s = 6;}

                        else if ( (LA335_0==In) && (synpred185_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index335_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA335_2 = input.LA(1);

                         
                        int index335_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA335_2>=4 && LA335_2<=149 && (s=T2S.M_30[LA335_2-(4)])>=0) && (synpred185_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA335_2==GreaterThanSignEqualsSign||LA335_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index335_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 335, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_239s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_240s = "\1\157\1\uffff\1\u0095\100\uffff";
    static final String dfa_241s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_242s = "\1\0\1\uffff\1\1\100\uffff}>";
    static final String[] dfa_243s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\36\1\uffff\1\33\1\37\1\41\1\20\2\uffff\1\17\1\66\3\uffff\1\40\1\16\1\72\2\uffff\1\42\1\uffff\1\21\1\uffff\1\26\1\74\1\35\1\34\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\43\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final char[] dfa_240 = DFA.unpackEncodedStringToUnsignedChars(dfa_240s);
    static final short[] dfa_241 = DFA.unpackEncodedString(dfa_241s);
    static final short[] dfa_242 = DFA.unpackEncodedString(dfa_242s);
    static final short[][] dfa_243 = unpackEncodedStringArray(dfa_243s);

    class DFA336 extends DFA {

        public DFA336(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 336;
            this.eot = dfa_212;
            this.eof = dfa_213;
            this.min = dfa_239;
            this.max = dfa_240;
            this.accept = dfa_241;
            this.special = dfa_242;
            this.transition = dfa_243;
        }
        public String getDescription() {
            return "()* loopback of 11591:2: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA336_0 = input.LA(1);

                         
                        int index336_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA336_0==EOF||LA336_0==ExclamationMarkEqualsSignEqualsSign||(LA336_0>=LessThanSignLessThanSignEqualsSign && LA336_0<=EqualsSignEqualsSignEqualsSign)||(LA336_0>=ExclamationMarkEqualsSign && LA336_0<=AsteriskEqualsSign)||LA336_0==PlusSignEqualsSign||(LA336_0>=HyphenMinusEqualsSign && LA336_0<=SolidusEqualsSign)||LA336_0==EqualsSignEqualsSign||LA336_0==CircumflexAccentEqualsSign||(LA336_0>=In && LA336_0<=VerticalLineVerticalLine)||LA336_0==Ampersand||LA336_0==Comma||LA336_0==Semicolon||LA336_0==EqualsSign||LA336_0==QuestionMark||LA336_0==CircumflexAccent||LA336_0==VerticalLine) ) {s = 1;}

                        else if ( (LA336_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA336_0==LessThanSign) && (synpred187_InternalN4JSParser())) {s = 3;}

                        else if ( (LA336_0==LessThanSignEqualsSign) && (synpred187_InternalN4JSParser())) {s = 4;}

                        else if ( (LA336_0==GreaterThanSignEqualsSign) && (synpred187_InternalN4JSParser())) {s = 5;}

                        else if ( (LA336_0==Instanceof) && (synpred187_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index336_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA336_2 = input.LA(1);

                         
                        int index336_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA336_2>=4 && LA336_2<=149 && (s=T2S.M_31[LA336_2-(4)])>=0) && (synpred187_InternalN4JSParser())) { /* 60 cases */ }
                        else if ( (LA336_2==GreaterThanSignEqualsSign||LA336_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index336_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 336, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_244s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String dfa_245s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_246s = {
            "\1\6\55\uffff\1\1\1\uffff\2\1\10\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\37\1\uffff\1\34\1\40\1\42\1\21\2\uffff\1\20\1\67\3\uffff\1\41\1\17\1\73\2\uffff\1\43\1\uffff\1\22\1\uffff\1\27\1\75\1\36\1\35\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\44\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_244 = DFA.unpackEncodedStringToUnsignedChars(dfa_244s);
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[][] dfa_246 = unpackEncodedStringArray(dfa_246s);

    class DFA337 extends DFA {

        public DFA337(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 337;
            this.eot = dfa_225;
            this.eof = dfa_226;
            this.min = dfa_227;
            this.max = dfa_244;
            this.accept = dfa_229;
            this.special = dfa_245;
            this.transition = dfa_246;
        }
        public String getDescription() {
            return "()* loopback of 11798:2: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA337_0 = input.LA(1);

                         
                        int index337_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_0==EOF||LA337_0==ExclamationMarkEqualsSignEqualsSign||(LA337_0>=LessThanSignLessThanSignEqualsSign && LA337_0<=EqualsSignEqualsSignEqualsSign)||(LA337_0>=ExclamationMarkEqualsSign && LA337_0<=AsteriskEqualsSign)||LA337_0==PlusSignEqualsSign||(LA337_0>=HyphenMinusEqualsSign && LA337_0<=SolidusEqualsSign)||LA337_0==EqualsSignEqualsSign||LA337_0==CircumflexAccentEqualsSign||(LA337_0>=VerticalLineEqualsSign && LA337_0<=VerticalLineVerticalLine)||LA337_0==Ampersand||LA337_0==RightParenthesis||LA337_0==Comma||(LA337_0>=Colon && LA337_0<=Semicolon)||LA337_0==EqualsSign||LA337_0==QuestionMark||(LA337_0>=RightSquareBracket && LA337_0<=CircumflexAccent)||(LA337_0>=VerticalLine && LA337_0<=RightCurlyBracket)||LA337_0==RULE_ML_COMMENT||LA337_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA337_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA337_0==LessThanSign) && (synpred189_InternalN4JSParser())) {s = 3;}

                        else if ( (LA337_0==LessThanSignEqualsSign) && (synpred189_InternalN4JSParser())) {s = 4;}

                        else if ( (LA337_0==GreaterThanSignEqualsSign) && (synpred189_InternalN4JSParser())) {s = 5;}

                        else if ( (LA337_0==Instanceof) && (synpred189_InternalN4JSParser())) {s = 6;}

                        else if ( (LA337_0==In) && (synpred189_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index337_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA337_2 = input.LA(1);

                         
                        int index337_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_2==GreaterThanSignEqualsSign||LA337_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA337_2==New) && (synpred189_InternalN4JSParser())) {s = 8;}

                        else if ( (LA337_2==This_1) && (synpred189_InternalN4JSParser())) {s = 9;}

                        else if ( (LA337_2==Super) && (synpred189_InternalN4JSParser())) {s = 10;}

                        else if ( (LA337_2==RULE_IDENTIFIER) && (synpred189_InternalN4JSParser())) {s = 11;}

                        else if ( (LA337_2==Get) && (synpred189_InternalN4JSParser())) {s = 12;}

                        else if ( (LA337_2==Set) && (synpred189_InternalN4JSParser())) {s = 13;}

                        else if ( (LA337_2==Let) && (synpred189_InternalN4JSParser())) {s = 14;}

                        else if ( (LA337_2==Project) && (synpred189_InternalN4JSParser())) {s = 15;}

                        else if ( (LA337_2==External) && (synpred189_InternalN4JSParser())) {s = 16;}

                        else if ( (LA337_2==Abstract) && (synpred189_InternalN4JSParser())) {s = 17;}

                        else if ( (LA337_2==Static) && (synpred189_InternalN4JSParser())) {s = 18;}

                        else if ( (LA337_2==As) && (synpred189_InternalN4JSParser())) {s = 19;}

                        else if ( (LA337_2==From) && (synpred189_InternalN4JSParser())) {s = 20;}

                        else if ( (LA337_2==Constructor) && (synpred189_InternalN4JSParser())) {s = 21;}

                        else if ( (LA337_2==Of) && (synpred189_InternalN4JSParser())) {s = 22;}

                        else if ( (LA337_2==Target) && (synpred189_InternalN4JSParser())) {s = 23;}

                        else if ( (LA337_2==Type) && (synpred189_InternalN4JSParser())) {s = 24;}

                        else if ( (LA337_2==Union) && (synpred189_InternalN4JSParser())) {s = 25;}

                        else if ( (LA337_2==Intersection) && (synpred189_InternalN4JSParser())) {s = 26;}

                        else if ( (LA337_2==This) && (synpred189_InternalN4JSParser())) {s = 27;}

                        else if ( (LA337_2==Promisify) && (synpred189_InternalN4JSParser())) {s = 28;}

                        else if ( (LA337_2==Await) && (synpred189_InternalN4JSParser())) {s = 29;}

                        else if ( (LA337_2==Async) && (synpred189_InternalN4JSParser())) {s = 30;}

                        else if ( (LA337_2==Implements) && (synpred189_InternalN4JSParser())) {s = 31;}

                        else if ( (LA337_2==Interface) && (synpred189_InternalN4JSParser())) {s = 32;}

                        else if ( (LA337_2==Private) && (synpred189_InternalN4JSParser())) {s = 33;}

                        else if ( (LA337_2==Protected) && (synpred189_InternalN4JSParser())) {s = 34;}

                        else if ( (LA337_2==Public) && (synpred189_InternalN4JSParser())) {s = 35;}

                        else if ( (LA337_2==Out) && (synpred189_InternalN4JSParser())) {s = 36;}

                        else if ( (LA337_2==LessThanSign) && (synpred189_InternalN4JSParser())) {s = 37;}

                        else if ( (LA337_2==RULE_DOUBLE) && (synpred189_InternalN4JSParser())) {s = 38;}

                        else if ( (LA337_2==RULE_INT) && (synpred189_InternalN4JSParser())) {s = 39;}

                        else if ( (LA337_2==RULE_BINARY_INT) && (synpred189_InternalN4JSParser())) {s = 40;}

                        else if ( (LA337_2==RULE_OCTAL_INT) && (synpred189_InternalN4JSParser())) {s = 41;}

                        else if ( (LA337_2==RULE_LEGACY_OCTAL_INT) && (synpred189_InternalN4JSParser())) {s = 42;}

                        else if ( (LA337_2==RULE_HEX_INT) && (synpred189_InternalN4JSParser())) {s = 43;}

                        else if ( (LA337_2==RULE_SCIENTIFIC_INT) && (synpred189_InternalN4JSParser())) {s = 44;}

                        else if ( (LA337_2==True) && (synpred189_InternalN4JSParser())) {s = 45;}

                        else if ( (LA337_2==False) && (synpred189_InternalN4JSParser())) {s = 46;}

                        else if ( (LA337_2==RULE_STRING) && (synpred189_InternalN4JSParser())) {s = 47;}

                        else if ( (LA337_2==Null) && (synpred189_InternalN4JSParser())) {s = 48;}

                        else if ( (LA337_2==Solidus) && (synpred189_InternalN4JSParser())) {s = 49;}

                        else if ( (LA337_2==SolidusEqualsSign) && (synpred189_InternalN4JSParser())) {s = 50;}

                        else if ( (LA337_2==LeftSquareBracket) && (synpred189_InternalN4JSParser())) {s = 51;}

                        else if ( (LA337_2==LeftCurlyBracket) && (synpred189_InternalN4JSParser())) {s = 52;}

                        else if ( (LA337_2==LeftParenthesis) && (synpred189_InternalN4JSParser())) {s = 53;}

                        else if ( (LA337_2==CommercialAt) && (synpred189_InternalN4JSParser())) {s = 54;}

                        else if ( (LA337_2==Function) && (synpred189_InternalN4JSParser())) {s = 55;}

                        else if ( (LA337_2==Class) && (synpred189_InternalN4JSParser())) {s = 56;}

                        else if ( (LA337_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred189_InternalN4JSParser())) {s = 57;}

                        else if ( (LA337_2==RULE_TEMPLATE_HEAD) && (synpred189_InternalN4JSParser())) {s = 58;}

                        else if ( (LA337_2==Delete) && (synpred189_InternalN4JSParser())) {s = 59;}

                        else if ( (LA337_2==Void) && (synpred189_InternalN4JSParser())) {s = 60;}

                        else if ( (LA337_2==Typeof) && (synpred189_InternalN4JSParser())) {s = 61;}

                        else if ( (LA337_2==PlusSignPlusSign) && (synpred189_InternalN4JSParser())) {s = 62;}

                        else if ( (LA337_2==HyphenMinusHyphenMinus) && (synpred189_InternalN4JSParser())) {s = 63;}

                        else if ( (LA337_2==PlusSign) && (synpred189_InternalN4JSParser())) {s = 64;}

                        else if ( (LA337_2==HyphenMinus) && (synpred189_InternalN4JSParser())) {s = 65;}

                        else if ( (LA337_2==Tilde) && (synpred189_InternalN4JSParser())) {s = 66;}

                        else if ( (LA337_2==ExclamationMark) && (synpred189_InternalN4JSParser())) {s = 67;}

                         
                        input.seek(index337_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 337, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_247s = "\1\4\35\0\43\uffff";
    static final String dfa_248s = "\1\u0095\35\0\43\uffff";
    static final String dfa_249s = "\36\uffff\1\4\37\uffff\1\1\1\3\1\2";
    static final String dfa_250s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_251s = {
            "\1\25\1\20\1\30\1\uffff\1\27\1\31\1\33\1\14\2\uffff\1\13\1\36\3\uffff\1\32\1\12\1\36\2\uffff\1\34\1\uffff\1\15\1\uffff\1\22\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\35\1\10\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_247 = DFA.unpackEncodedStringToUnsignedChars(dfa_247s);
    static final char[] dfa_248 = DFA.unpackEncodedStringToUnsignedChars(dfa_248s);
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final short[] dfa_250 = DFA.unpackEncodedString(dfa_250s);
    static final short[][] dfa_251 = unpackEncodedStringArray(dfa_251s);

    class DFA369 extends DFA {

        public DFA369(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 369;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_247;
            this.max = dfa_248;
            this.accept = dfa_249;
            this.special = dfa_250;
            this.transition = dfa_251;
        }
        public String getDescription() {
            return "13262:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA369_1 = input.LA(1);

                         
                        int index369_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA369_2 = input.LA(1);

                         
                        int index369_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA369_3 = input.LA(1);

                         
                        int index369_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA369_4 = input.LA(1);

                         
                        int index369_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA369_5 = input.LA(1);

                         
                        int index369_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA369_6 = input.LA(1);

                         
                        int index369_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA369_7 = input.LA(1);

                         
                        int index369_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA369_8 = input.LA(1);

                         
                        int index369_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA369_9 = input.LA(1);

                         
                        int index369_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA369_10 = input.LA(1);

                         
                        int index369_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA369_11 = input.LA(1);

                         
                        int index369_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA369_12 = input.LA(1);

                         
                        int index369_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA369_13 = input.LA(1);

                         
                        int index369_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA369_14 = input.LA(1);

                         
                        int index369_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA369_15 = input.LA(1);

                         
                        int index369_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA369_16 = input.LA(1);

                         
                        int index369_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA369_17 = input.LA(1);

                         
                        int index369_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA369_18 = input.LA(1);

                         
                        int index369_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA369_19 = input.LA(1);

                         
                        int index369_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA369_20 = input.LA(1);

                         
                        int index369_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA369_21 = input.LA(1);

                         
                        int index369_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA369_22 = input.LA(1);

                         
                        int index369_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA369_23 = input.LA(1);

                         
                        int index369_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA369_24 = input.LA(1);

                         
                        int index369_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA369_25 = input.LA(1);

                         
                        int index369_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA369_26 = input.LA(1);

                         
                        int index369_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA369_27 = input.LA(1);

                         
                        int index369_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA369_28 = input.LA(1);

                         
                        int index369_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA369_29 = input.LA(1);

                         
                        int index369_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index369_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 369, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_252s = "\1\14\15\uffff";
    static final String dfa_253s = "\1\67\13\0\2\uffff";
    static final String dfa_254s = "\1\150\13\0\2\uffff";
    static final String dfa_255s = "\14\uffff\1\2\1\1";
    static final String dfa_256s = "\1\uffff\1\6\1\3\1\0\1\11\1\7\1\4\1\1\1\2\1\12\1\10\1\5\2\uffff}>";
    static final String[] dfa_257s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_252 = DFA.unpackEncodedString(dfa_252s);
    static final char[] dfa_253 = DFA.unpackEncodedStringToUnsignedChars(dfa_253s);
    static final char[] dfa_254 = DFA.unpackEncodedStringToUnsignedChars(dfa_254s);
    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[] dfa_256 = DFA.unpackEncodedString(dfa_256s);
    static final short[][] dfa_257 = unpackEncodedStringArray(dfa_257s);

    class DFA368 extends DFA {

        public DFA368(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 368;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_254;
            this.accept = dfa_255;
            this.special = dfa_256;
            this.transition = dfa_257;
        }
        public String getDescription() {
            return "13373:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA368_3 = input.LA(1);

                         
                        int index368_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA368_7 = input.LA(1);

                         
                        int index368_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA368_8 = input.LA(1);

                         
                        int index368_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA368_2 = input.LA(1);

                         
                        int index368_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_2);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA368_6 = input.LA(1);

                         
                        int index368_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_6);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA368_11 = input.LA(1);

                         
                        int index368_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_11);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA368_1 = input.LA(1);

                         
                        int index368_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA368_5 = input.LA(1);

                         
                        int index368_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA368_10 = input.LA(1);

                         
                        int index368_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_10);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA368_4 = input.LA(1);

                         
                        int index368_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_4);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA368_9 = input.LA(1);

                         
                        int index368_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index368_9);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 368, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA371 extends DFA {

        public DFA371(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 371;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_247;
            this.max = dfa_248;
            this.accept = dfa_249;
            this.special = dfa_250;
            this.transition = dfa_251;
        }
        public String getDescription() {
            return "13410:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA371_1 = input.LA(1);

                         
                        int index371_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA371_2 = input.LA(1);

                         
                        int index371_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA371_3 = input.LA(1);

                         
                        int index371_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA371_4 = input.LA(1);

                         
                        int index371_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA371_5 = input.LA(1);

                         
                        int index371_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA371_6 = input.LA(1);

                         
                        int index371_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA371_7 = input.LA(1);

                         
                        int index371_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA371_8 = input.LA(1);

                         
                        int index371_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA371_9 = input.LA(1);

                         
                        int index371_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA371_10 = input.LA(1);

                         
                        int index371_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA371_11 = input.LA(1);

                         
                        int index371_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA371_12 = input.LA(1);

                         
                        int index371_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA371_13 = input.LA(1);

                         
                        int index371_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA371_14 = input.LA(1);

                         
                        int index371_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA371_15 = input.LA(1);

                         
                        int index371_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA371_16 = input.LA(1);

                         
                        int index371_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA371_17 = input.LA(1);

                         
                        int index371_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA371_18 = input.LA(1);

                         
                        int index371_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA371_19 = input.LA(1);

                         
                        int index371_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA371_20 = input.LA(1);

                         
                        int index371_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA371_21 = input.LA(1);

                         
                        int index371_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA371_22 = input.LA(1);

                         
                        int index371_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA371_23 = input.LA(1);

                         
                        int index371_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA371_24 = input.LA(1);

                         
                        int index371_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA371_25 = input.LA(1);

                         
                        int index371_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA371_26 = input.LA(1);

                         
                        int index371_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA371_27 = input.LA(1);

                         
                        int index371_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA371_28 = input.LA(1);

                         
                        int index371_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA371_29 = input.LA(1);

                         
                        int index371_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index371_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 371, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_258s = "\1\u0099\13\0\2\uffff";
    static final String dfa_259s = "\1\uffff\1\4\1\1\1\11\1\7\1\5\1\2\1\12\1\0\1\10\1\6\1\3\2\uffff}>";
    static final String[] dfa_260s = {
            "\1\7\12\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_258 = DFA.unpackEncodedStringToUnsignedChars(dfa_258s);
    static final short[] dfa_259 = DFA.unpackEncodedString(dfa_259s);
    static final short[][] dfa_260 = unpackEncodedStringArray(dfa_260s);

    class DFA370 extends DFA {

        public DFA370(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 370;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_258;
            this.accept = dfa_255;
            this.special = dfa_259;
            this.transition = dfa_260;
        }
        public String getDescription() {
            return "13521:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA370_8 = input.LA(1);

                         
                        int index370_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA370_2 = input.LA(1);

                         
                        int index370_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA370_6 = input.LA(1);

                         
                        int index370_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA370_11 = input.LA(1);

                         
                        int index370_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA370_1 = input.LA(1);

                         
                        int index370_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_1);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA370_5 = input.LA(1);

                         
                        int index370_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA370_10 = input.LA(1);

                         
                        int index370_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_10);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA370_4 = input.LA(1);

                         
                        int index370_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA370_9 = input.LA(1);

                         
                        int index370_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA370_3 = input.LA(1);

                         
                        int index370_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_3);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA370_7 = input.LA(1);

                         
                        int index370_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index370_7);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 370, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_261s = "\1\4\34\0\44\uffff";
    static final String dfa_262s = "\1\u0095\34\0\44\uffff";
    static final String dfa_263s = "\35\uffff\1\4\1\5\37\uffff\1\1\1\3\1\2";
    static final String dfa_264s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\44\uffff}>";
    static final String[] dfa_265s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\36\3\uffff\1\31\1\11\1\36\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\36\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\34\1\7\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_261 = DFA.unpackEncodedStringToUnsignedChars(dfa_261s);
    static final char[] dfa_262 = DFA.unpackEncodedStringToUnsignedChars(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final short[] dfa_264 = DFA.unpackEncodedString(dfa_264s);
    static final short[][] dfa_265 = unpackEncodedStringArray(dfa_265s);

    class DFA373 extends DFA {

        public DFA373(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 373;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_261;
            this.max = dfa_262;
            this.accept = dfa_263;
            this.special = dfa_264;
            this.transition = dfa_265;
        }
        public String getDescription() {
            return "13558:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA373_1 = input.LA(1);

                         
                        int index373_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA373_2 = input.LA(1);

                         
                        int index373_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA373_3 = input.LA(1);

                         
                        int index373_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA373_4 = input.LA(1);

                         
                        int index373_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA373_5 = input.LA(1);

                         
                        int index373_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA373_6 = input.LA(1);

                         
                        int index373_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA373_7 = input.LA(1);

                         
                        int index373_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA373_8 = input.LA(1);

                         
                        int index373_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA373_9 = input.LA(1);

                         
                        int index373_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA373_10 = input.LA(1);

                         
                        int index373_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA373_11 = input.LA(1);

                         
                        int index373_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA373_12 = input.LA(1);

                         
                        int index373_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA373_13 = input.LA(1);

                         
                        int index373_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA373_14 = input.LA(1);

                         
                        int index373_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA373_15 = input.LA(1);

                         
                        int index373_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA373_16 = input.LA(1);

                         
                        int index373_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA373_17 = input.LA(1);

                         
                        int index373_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA373_18 = input.LA(1);

                         
                        int index373_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA373_19 = input.LA(1);

                         
                        int index373_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA373_20 = input.LA(1);

                         
                        int index373_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA373_21 = input.LA(1);

                         
                        int index373_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA373_22 = input.LA(1);

                         
                        int index373_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA373_23 = input.LA(1);

                         
                        int index373_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA373_24 = input.LA(1);

                         
                        int index373_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA373_25 = input.LA(1);

                         
                        int index373_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA373_26 = input.LA(1);

                         
                        int index373_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA373_27 = input.LA(1);

                         
                        int index373_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA373_28 = input.LA(1);

                         
                        int index373_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index373_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 373, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_266s = "\1\uffff\1\1\1\6\1\2\1\7\1\3\1\10\1\4\1\0\1\11\1\5\1\12\2\uffff}>";
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);

    class DFA372 extends DFA {

        public DFA372(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 372;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_254;
            this.accept = dfa_255;
            this.special = dfa_266;
            this.transition = dfa_257;
        }
        public String getDescription() {
            return "13671:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA372_8 = input.LA(1);

                         
                        int index372_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA372_1 = input.LA(1);

                         
                        int index372_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA372_3 = input.LA(1);

                         
                        int index372_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA372_5 = input.LA(1);

                         
                        int index372_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA372_7 = input.LA(1);

                         
                        int index372_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA372_10 = input.LA(1);

                         
                        int index372_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA372_2 = input.LA(1);

                         
                        int index372_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA372_4 = input.LA(1);

                         
                        int index372_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA372_6 = input.LA(1);

                         
                        int index372_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA372_9 = input.LA(1);

                         
                        int index372_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA372_11 = input.LA(1);

                         
                        int index372_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index372_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 372, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA375 extends DFA {

        public DFA375(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 375;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_261;
            this.max = dfa_262;
            this.accept = dfa_263;
            this.special = dfa_264;
            this.transition = dfa_265;
        }
        public String getDescription() {
            return "13708:1: ( ( ( ( Await ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA375_1 = input.LA(1);

                         
                        int index375_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA375_2 = input.LA(1);

                         
                        int index375_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA375_3 = input.LA(1);

                         
                        int index375_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA375_4 = input.LA(1);

                         
                        int index375_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA375_5 = input.LA(1);

                         
                        int index375_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA375_6 = input.LA(1);

                         
                        int index375_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA375_7 = input.LA(1);

                         
                        int index375_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA375_8 = input.LA(1);

                         
                        int index375_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA375_9 = input.LA(1);

                         
                        int index375_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA375_10 = input.LA(1);

                         
                        int index375_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA375_11 = input.LA(1);

                         
                        int index375_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA375_12 = input.LA(1);

                         
                        int index375_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA375_13 = input.LA(1);

                         
                        int index375_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA375_14 = input.LA(1);

                         
                        int index375_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA375_15 = input.LA(1);

                         
                        int index375_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA375_16 = input.LA(1);

                         
                        int index375_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA375_17 = input.LA(1);

                         
                        int index375_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA375_18 = input.LA(1);

                         
                        int index375_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA375_19 = input.LA(1);

                         
                        int index375_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA375_20 = input.LA(1);

                         
                        int index375_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA375_21 = input.LA(1);

                         
                        int index375_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA375_22 = input.LA(1);

                         
                        int index375_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA375_23 = input.LA(1);

                         
                        int index375_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA375_24 = input.LA(1);

                         
                        int index375_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA375_25 = input.LA(1);

                         
                        int index375_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA375_26 = input.LA(1);

                         
                        int index375_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA375_27 = input.LA(1);

                         
                        int index375_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA375_28 = input.LA(1);

                         
                        int index375_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index375_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 375, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA374 extends DFA {

        public DFA374(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 374;
            this.eot = dfa_189;
            this.eof = dfa_252;
            this.min = dfa_253;
            this.max = dfa_258;
            this.accept = dfa_255;
            this.special = dfa_266;
            this.transition = dfa_260;
        }
        public String getDescription() {
            return "13821:3: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA374_8 = input.LA(1);

                         
                        int index374_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA374_1 = input.LA(1);

                         
                        int index374_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA374_3 = input.LA(1);

                         
                        int index374_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA374_5 = input.LA(1);

                         
                        int index374_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_5);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA374_7 = input.LA(1);

                         
                        int index374_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_7);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA374_10 = input.LA(1);

                         
                        int index374_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_10);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA374_2 = input.LA(1);

                         
                        int index374_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_2);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA374_4 = input.LA(1);

                         
                        int index374_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_4);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA374_6 = input.LA(1);

                         
                        int index374_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_6);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA374_9 = input.LA(1);

                         
                        int index374_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA374_11 = input.LA(1);

                         
                        int index374_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index374_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 374, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_267s = "\1\76\113\uffff";
    static final String dfa_268s = "\1\4\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_269s = "\1\u0095\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_270s = "\1\uffff\17\1\1\uffff\35\1\1\uffff\17\1\1\2\15\uffff";
    static final String dfa_271s = "\1\0\17\uffff\1\1\35\uffff\1\2\35\uffff}>";
    static final String[] dfa_272s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\2\uffff\1\76\1\20\1\76\1\uffff\1\75\2\uffff\1\3\2\uffff\1\72\1\76\1\73\1\uffff\1\55\1\uffff\1\76\1\41\2\76\1\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final char[] dfa_268 = DFA.unpackEncodedStringToUnsignedChars(dfa_268s);
    static final char[] dfa_269 = DFA.unpackEncodedStringToUnsignedChars(dfa_269s);
    static final short[] dfa_270 = DFA.unpackEncodedString(dfa_270s);
    static final short[] dfa_271 = DFA.unpackEncodedString(dfa_271s);
    static final short[][] dfa_272 = unpackEncodedStringArray(dfa_272s);

    class DFA377 extends DFA {

        public DFA377(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 377;
            this.eot = dfa_183;
            this.eof = dfa_267;
            this.min = dfa_268;
            this.max = dfa_269;
            this.accept = dfa_270;
            this.special = dfa_271;
            this.transition = dfa_272;
        }
        public String getDescription() {
            return "13880:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA377_0 = input.LA(1);

                         
                        int index377_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA377_0>=5 && LA377_0<=126 && (s=T2S.M_32[LA377_0-(5)])>=0) && (synpred240_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA377_0==Of) ) {s = 16;}

                        
                        else if ((LA377_0>=4 && LA377_0<=149 && (s=T2S.M_33[LA377_0-(4)])>=0) && (synpred240_InternalN4JSParser())) { /* 30 cases */ }
                        else if ( (LA377_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA377_0>=15 && LA377_0<=140 && (s=T2S.M_34[LA377_0-(15)])>=0) && (synpred240_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA377_0==EOF||LA377_0==LessThanSignLessThanSignEqualsSign||LA377_0==PercentSignEqualsSign||(LA377_0>=AmpersandEqualsSign && LA377_0<=AsteriskEqualsSign)||LA377_0==PlusSignEqualsSign||LA377_0==HyphenMinusEqualsSign||LA377_0==CircumflexAccentEqualsSign||LA377_0==In||LA377_0==VerticalLineEqualsSign||LA377_0==Comma||LA377_0==Semicolon||(LA377_0>=EqualsSign && LA377_0<=GreaterThanSign)) ) {s = 62;}

                         
                        input.seek(index377_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA377_16 = input.LA(1);

                         
                        int index377_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index377_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA377_46 = input.LA(1);

                         
                        int index377_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index377_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 377, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_273s = "\121\uffff";
    static final String dfa_274s = "\1\76\120\uffff";
    static final String dfa_275s = "\1\4\55\uffff\1\0\42\uffff";
    static final String dfa_276s = "\1\u0099\55\uffff\1\0\42\uffff";
    static final String dfa_277s = "\1\uffff\55\1\1\uffff\17\1\1\2\22\uffff";
    static final String dfa_278s = "\1\0\55\uffff\1\1\42\uffff}>";
    static final String[] dfa_279s = {
            "\1\24\1\17\1\27\1\uffff\1\26\1\30\1\32\1\13\2\uffff\1\12\1\61\3\uffff\1\31\1\11\1\65\2\uffff\1\33\1\uffff\1\14\1\uffff\1\21\1\67\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\34\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\3\uffff\1\20\1\76\1\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\76\1\73\1\uffff\1\55\2\76\1\41\2\76\1\uffff\1\2\1\57\1\76\1\uffff\1\60\1\uffff\1\76\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43\1\uffff\1\76\1\uffff\1\76",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_273 = DFA.unpackEncodedString(dfa_273s);
    static final short[] dfa_274 = DFA.unpackEncodedString(dfa_274s);
    static final char[] dfa_275 = DFA.unpackEncodedStringToUnsignedChars(dfa_275s);
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[][] dfa_279 = unpackEncodedStringArray(dfa_279s);

    class DFA379 extends DFA {

        public DFA379(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 379;
            this.eot = dfa_273;
            this.eof = dfa_274;
            this.min = dfa_275;
            this.max = dfa_276;
            this.accept = dfa_277;
            this.special = dfa_278;
            this.transition = dfa_279;
        }
        public String getDescription() {
            return "13963:2: ( ( Await | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Implements | Interface | Private | Protected | Public | Out | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA379_0 = input.LA(1);

                         
                        int index379_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA379_0>=4 && LA379_0<=149 && (s=T2S.M_35[LA379_0-(4)])>=0) && (synpred242_InternalN4JSParser())) { /* 45 cases */ }
                        else if ( (LA379_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA379_0>=15 && LA379_0<=140 && (s=T2S.M_34[LA379_0-(15)])>=0) && (synpred242_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA379_0==EOF||LA379_0==LessThanSignLessThanSignEqualsSign||LA379_0==PercentSignEqualsSign||(LA379_0>=AmpersandEqualsSign && LA379_0<=AsteriskEqualsSign)||LA379_0==PlusSignEqualsSign||LA379_0==HyphenMinusEqualsSign||LA379_0==CircumflexAccentEqualsSign||LA379_0==VerticalLineEqualsSign||LA379_0==RightParenthesis||LA379_0==Comma||(LA379_0>=Colon && LA379_0<=Semicolon)||(LA379_0>=EqualsSign && LA379_0<=GreaterThanSign)||LA379_0==RightSquareBracket||LA379_0==RightCurlyBracket||LA379_0==RULE_ML_COMMENT||LA379_0==RULE_EOL) ) {s = 62;}

                         
                        input.seek(index379_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA379_46 = input.LA(1);

                         
                        int index379_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index379_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 379, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_280s = "\136\uffff";
    static final String dfa_281s = "\1\2\135\uffff";
    static final String dfa_282s = "\1\4\1\0\134\uffff";
    static final String dfa_283s = "\1\u0095\1\0\134\uffff";
    static final String dfa_284s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_285s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_286s = {
            "\61\2\1\uffff\1\2\2\uffff\10\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final short[] dfa_281 = DFA.unpackEncodedString(dfa_281s);
    static final char[] dfa_282 = DFA.unpackEncodedStringToUnsignedChars(dfa_282s);
    static final char[] dfa_283 = DFA.unpackEncodedStringToUnsignedChars(dfa_283s);
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[] dfa_285 = DFA.unpackEncodedString(dfa_285s);
    static final short[][] dfa_286 = unpackEncodedStringArray(dfa_286s);

    class DFA410 extends DFA {

        public DFA410(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 410;
            this.eot = dfa_280;
            this.eof = dfa_281;
            this.min = dfa_282;
            this.max = dfa_283;
            this.accept = dfa_284;
            this.special = dfa_285;
            this.transition = dfa_286;
        }
        public String getDescription() {
            return "15213:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA410_1 = input.LA(1);

                         
                        int index410_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 93;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index410_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 410, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_287s = "\1\4\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_288s = "\1\u0095\1\uffff\30\0\2\uffff\55\0\4\uffff";
    static final String dfa_289s = "\1\uffff\1\1\30\uffff\2\4\55\uffff\1\6\1\2\1\3\1\5";
    static final String dfa_290s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\4\uffff}>";
    static final String[] dfa_291s = {
            "\1\26\1\23\1\103\1\57\1\15\1\104\1\4\1\7\1\41\1\42\1\6\1\53\1\43\1\50\1\51\1\2\1\3\1\44\1\47\1\55\1\5\1\61\1\10\1\63\1\16\1\66\1\34\1\14\1\35\1\37\1\40\1\11\1\75\1\62\1\64\1\25\1\70\1\72\1\13\1\36\1\46\1\76\1\101\1\73\1\21\1\74\1\22\1\12\1\71\4\uffff\1\52\1\30\1\77\1\60\1\105\1\31\1\65\1\67\21\uffff\1\100\1\45\1\54\1\56\1\102\5\uffff\1\111\1\uffff\1\33\7\uffff\1\32\2\uffff\1\27\1\1\1\110\2\uffff\1\24\2\uffff\1\20\3\uffff\1\107\1\uffff\1\107\1\uffff\1\107\2\uffff\1\107\1\uffff\1\17\2\uffff\1\106\23\uffff\1\107",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_287 = DFA.unpackEncodedStringToUnsignedChars(dfa_287s);
    static final char[] dfa_288 = DFA.unpackEncodedStringToUnsignedChars(dfa_288s);
    static final short[] dfa_289 = DFA.unpackEncodedString(dfa_289s);
    static final short[] dfa_290 = DFA.unpackEncodedString(dfa_290s);
    static final short[][] dfa_291 = unpackEncodedStringArray(dfa_291s);

    class DFA452 extends DFA {

        public DFA452(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 452;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_287;
            this.max = dfa_288;
            this.accept = dfa_289;
            this.special = dfa_290;
            this.transition = dfa_291;
        }
        public String getDescription() {
            return "16048:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA452_0 = input.LA(1);

                         
                        int index452_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA452_0>=4 && LA452_0<=126 && (s=T2S.M_37[LA452_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA452_0==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 26;}

                        else if ( (LA452_0==Asterisk) && (synpred261_InternalN4JSParser())) {s = 27;}

                        
                        else if ((LA452_0>=6 && LA452_0<=129 && (s=T2S.M_38[LA452_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA452_0==RULE_DOUBLE||LA452_0==RULE_HEX_INT||LA452_0==RULE_OCTAL_INT||LA452_0==RULE_SCIENTIFIC_INT||LA452_0==RULE_INT) ) {s = 71;}

                        else if ( (LA452_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA452_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index452_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA452_2 = input.LA(1);

                         
                        int index452_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA452_3 = input.LA(1);

                         
                        int index452_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA452_4 = input.LA(1);

                         
                        int index452_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA452_5 = input.LA(1);

                         
                        int index452_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA452_6 = input.LA(1);

                         
                        int index452_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA452_7 = input.LA(1);

                         
                        int index452_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA452_8 = input.LA(1);

                         
                        int index452_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA452_9 = input.LA(1);

                         
                        int index452_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA452_10 = input.LA(1);

                         
                        int index452_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA452_11 = input.LA(1);

                         
                        int index452_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA452_12 = input.LA(1);

                         
                        int index452_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA452_13 = input.LA(1);

                         
                        int index452_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA452_14 = input.LA(1);

                         
                        int index452_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA452_15 = input.LA(1);

                         
                        int index452_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA452_16 = input.LA(1);

                         
                        int index452_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA452_17 = input.LA(1);

                         
                        int index452_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA452_18 = input.LA(1);

                         
                        int index452_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA452_19 = input.LA(1);

                         
                        int index452_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA452_20 = input.LA(1);

                         
                        int index452_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA452_21 = input.LA(1);

                         
                        int index452_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA452_22 = input.LA(1);

                         
                        int index452_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA452_23 = input.LA(1);

                         
                        int index452_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA452_24 = input.LA(1);

                         
                        int index452_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred259_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA452_25 = input.LA(1);

                         
                        int index452_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred260_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA452_28 = input.LA(1);

                         
                        int index452_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA452_29 = input.LA(1);

                         
                        int index452_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA452_30 = input.LA(1);

                         
                        int index452_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA452_31 = input.LA(1);

                         
                        int index452_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA452_32 = input.LA(1);

                         
                        int index452_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA452_33 = input.LA(1);

                         
                        int index452_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA452_34 = input.LA(1);

                         
                        int index452_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA452_35 = input.LA(1);

                         
                        int index452_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA452_36 = input.LA(1);

                         
                        int index452_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA452_37 = input.LA(1);

                         
                        int index452_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA452_38 = input.LA(1);

                         
                        int index452_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA452_39 = input.LA(1);

                         
                        int index452_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA452_40 = input.LA(1);

                         
                        int index452_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA452_41 = input.LA(1);

                         
                        int index452_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA452_42 = input.LA(1);

                         
                        int index452_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA452_43 = input.LA(1);

                         
                        int index452_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA452_44 = input.LA(1);

                         
                        int index452_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA452_45 = input.LA(1);

                         
                        int index452_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA452_46 = input.LA(1);

                         
                        int index452_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA452_47 = input.LA(1);

                         
                        int index452_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA452_48 = input.LA(1);

                         
                        int index452_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA452_49 = input.LA(1);

                         
                        int index452_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA452_50 = input.LA(1);

                         
                        int index452_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA452_51 = input.LA(1);

                         
                        int index452_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA452_52 = input.LA(1);

                         
                        int index452_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA452_53 = input.LA(1);

                         
                        int index452_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA452_54 = input.LA(1);

                         
                        int index452_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA452_55 = input.LA(1);

                         
                        int index452_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA452_56 = input.LA(1);

                         
                        int index452_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA452_57 = input.LA(1);

                         
                        int index452_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA452_58 = input.LA(1);

                         
                        int index452_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA452_59 = input.LA(1);

                         
                        int index452_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA452_60 = input.LA(1);

                         
                        int index452_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA452_61 = input.LA(1);

                         
                        int index452_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA452_62 = input.LA(1);

                         
                        int index452_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA452_63 = input.LA(1);

                         
                        int index452_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA452_64 = input.LA(1);

                         
                        int index452_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA452_65 = input.LA(1);

                         
                        int index452_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA452_66 = input.LA(1);

                         
                        int index452_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA452_67 = input.LA(1);

                         
                        int index452_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA452_68 = input.LA(1);

                         
                        int index452_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA452_69 = input.LA(1);

                         
                        int index452_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA452_70 = input.LA(1);

                         
                        int index452_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA452_71 = input.LA(1);

                         
                        int index452_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA452_72 = input.LA(1);

                         
                        int index452_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred261_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index452_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 452, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA453 extends DFA {

        public DFA453(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 453;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_287;
            this.max = dfa_288;
            this.accept = dfa_289;
            this.special = dfa_290;
            this.transition = dfa_291;
        }
        public String getDescription() {
            return "16272:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA453_0 = input.LA(1);

                         
                        int index453_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA453_0>=4 && LA453_0<=126 && (s=T2S.M_37[LA453_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA453_0==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 26;}

                        else if ( (LA453_0==Asterisk) && (synpred264_InternalN4JSParser())) {s = 27;}

                        
                        else if ((LA453_0>=6 && LA453_0<=129 && (s=T2S.M_38[LA453_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA453_0==RULE_DOUBLE||LA453_0==RULE_HEX_INT||LA453_0==RULE_OCTAL_INT||LA453_0==RULE_SCIENTIFIC_INT||LA453_0==RULE_INT) ) {s = 71;}

                        else if ( (LA453_0==LeftSquareBracket) ) {s = 72;}

                        else if ( (LA453_0==LeftParenthesis) ) {s = 73;}

                         
                        input.seek(index453_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA453_2 = input.LA(1);

                         
                        int index453_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA453_3 = input.LA(1);

                         
                        int index453_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA453_4 = input.LA(1);

                         
                        int index453_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA453_5 = input.LA(1);

                         
                        int index453_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA453_6 = input.LA(1);

                         
                        int index453_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA453_7 = input.LA(1);

                         
                        int index453_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA453_8 = input.LA(1);

                         
                        int index453_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA453_9 = input.LA(1);

                         
                        int index453_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA453_10 = input.LA(1);

                         
                        int index453_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA453_11 = input.LA(1);

                         
                        int index453_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA453_12 = input.LA(1);

                         
                        int index453_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA453_13 = input.LA(1);

                         
                        int index453_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA453_14 = input.LA(1);

                         
                        int index453_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA453_15 = input.LA(1);

                         
                        int index453_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA453_16 = input.LA(1);

                         
                        int index453_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA453_17 = input.LA(1);

                         
                        int index453_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA453_18 = input.LA(1);

                         
                        int index453_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA453_19 = input.LA(1);

                         
                        int index453_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA453_20 = input.LA(1);

                         
                        int index453_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA453_21 = input.LA(1);

                         
                        int index453_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA453_22 = input.LA(1);

                         
                        int index453_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA453_23 = input.LA(1);

                         
                        int index453_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA453_24 = input.LA(1);

                         
                        int index453_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred262_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA453_25 = input.LA(1);

                         
                        int index453_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred263_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA453_28 = input.LA(1);

                         
                        int index453_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_28);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA453_29 = input.LA(1);

                         
                        int index453_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_29);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA453_30 = input.LA(1);

                         
                        int index453_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_30);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA453_31 = input.LA(1);

                         
                        int index453_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_31);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA453_32 = input.LA(1);

                         
                        int index453_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_32);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA453_33 = input.LA(1);

                         
                        int index453_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_33);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA453_34 = input.LA(1);

                         
                        int index453_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_34);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA453_35 = input.LA(1);

                         
                        int index453_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_35);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA453_36 = input.LA(1);

                         
                        int index453_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_36);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA453_37 = input.LA(1);

                         
                        int index453_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_37);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA453_38 = input.LA(1);

                         
                        int index453_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_38);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA453_39 = input.LA(1);

                         
                        int index453_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_39);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA453_40 = input.LA(1);

                         
                        int index453_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_40);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA453_41 = input.LA(1);

                         
                        int index453_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_41);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA453_42 = input.LA(1);

                         
                        int index453_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_42);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA453_43 = input.LA(1);

                         
                        int index453_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_43);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA453_44 = input.LA(1);

                         
                        int index453_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_44);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA453_45 = input.LA(1);

                         
                        int index453_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_45);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA453_46 = input.LA(1);

                         
                        int index453_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_46);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA453_47 = input.LA(1);

                         
                        int index453_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_47);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA453_48 = input.LA(1);

                         
                        int index453_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_48);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA453_49 = input.LA(1);

                         
                        int index453_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_49);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA453_50 = input.LA(1);

                         
                        int index453_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_50);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA453_51 = input.LA(1);

                         
                        int index453_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_51);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA453_52 = input.LA(1);

                         
                        int index453_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_52);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA453_53 = input.LA(1);

                         
                        int index453_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_53);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA453_54 = input.LA(1);

                         
                        int index453_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_54);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA453_55 = input.LA(1);

                         
                        int index453_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_55);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA453_56 = input.LA(1);

                         
                        int index453_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA453_57 = input.LA(1);

                         
                        int index453_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_57);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA453_58 = input.LA(1);

                         
                        int index453_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_58);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA453_59 = input.LA(1);

                         
                        int index453_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA453_60 = input.LA(1);

                         
                        int index453_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_60);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA453_61 = input.LA(1);

                         
                        int index453_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_61);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA453_62 = input.LA(1);

                         
                        int index453_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_62);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA453_63 = input.LA(1);

                         
                        int index453_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_63);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA453_64 = input.LA(1);

                         
                        int index453_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_64);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA453_65 = input.LA(1);

                         
                        int index453_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_65);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA453_66 = input.LA(1);

                         
                        int index453_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_66);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA453_67 = input.LA(1);

                         
                        int index453_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_67);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA453_68 = input.LA(1);

                         
                        int index453_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_68);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA453_69 = input.LA(1);

                         
                        int index453_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_69);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA453_70 = input.LA(1);

                         
                        int index453_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_70);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA453_71 = input.LA(1);

                         
                        int index453_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_71);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA453_72 = input.LA(1);

                         
                        int index453_72 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred264_InternalN4JSParser()) ) {s = 27;}

                        else if ( (true) ) {s = 76;}

                         
                        input.seek(index453_72);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 453, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_292s = "\113\uffff";
    static final String dfa_293s = "\1\4\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_294s = "\1\u0095\30\0\2\uffff\55\0\3\uffff";
    static final String dfa_295s = "\31\uffff\2\3\55\uffff\1\1\1\2\1\4";
    static final String dfa_296s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\uffff\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\3\uffff}>";
    static final String[] dfa_297s = {
            "\1\25\1\22\1\102\1\56\1\14\1\103\1\3\1\6\1\40\1\41\1\5\1\52\1\42\1\47\1\50\1\1\1\2\1\43\1\46\1\54\1\4\1\60\1\7\1\62\1\15\1\65\1\33\1\13\1\34\1\36\1\37\1\10\1\74\1\61\1\63\1\24\1\67\1\71\1\12\1\35\1\45\1\75\1\100\1\72\1\20\1\73\1\21\1\11\1\70\4\uffff\1\51\1\27\1\76\1\57\1\104\1\30\1\64\1\66\21\uffff\1\77\1\44\1\53\1\55\1\101\7\uffff\1\32\7\uffff\1\31\2\uffff\1\26\1\uffff\1\107\2\uffff\1\23\2\uffff\1\17\3\uffff\1\106\1\uffff\1\106\1\uffff\1\106\2\uffff\1\106\1\uffff\1\16\2\uffff\1\105\23\uffff\1\106",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final char[] dfa_293 = DFA.unpackEncodedStringToUnsignedChars(dfa_293s);
    static final char[] dfa_294 = DFA.unpackEncodedStringToUnsignedChars(dfa_294s);
    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final short[] dfa_296 = DFA.unpackEncodedString(dfa_296s);
    static final short[][] dfa_297 = unpackEncodedStringArray(dfa_297s);

    class DFA465 extends DFA {

        public DFA465(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 465;
            this.eot = dfa_292;
            this.eof = dfa_292;
            this.min = dfa_293;
            this.max = dfa_294;
            this.accept = dfa_295;
            this.special = dfa_296;
            this.transition = dfa_297;
        }
        public String getDescription() {
            return "16503:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= ruleLiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( ruleLiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= ruleLiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA465_0 = input.LA(1);

                         
                        int index465_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA465_0>=4 && LA465_0<=126 && (s=T2S.M_41[LA465_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA465_0==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 25;}

                        else if ( (LA465_0==Asterisk) && (synpred270_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA465_0>=6 && LA465_0<=129 && (s=T2S.M_42[LA465_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA465_0==RULE_DOUBLE||LA465_0==RULE_HEX_INT||LA465_0==RULE_OCTAL_INT||LA465_0==RULE_SCIENTIFIC_INT||LA465_0==RULE_INT) ) {s = 70;}

                        else if ( (LA465_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index465_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA465_1 = input.LA(1);

                         
                        int index465_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA465_2 = input.LA(1);

                         
                        int index465_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA465_3 = input.LA(1);

                         
                        int index465_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA465_4 = input.LA(1);

                         
                        int index465_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA465_5 = input.LA(1);

                         
                        int index465_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA465_6 = input.LA(1);

                         
                        int index465_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA465_7 = input.LA(1);

                         
                        int index465_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA465_8 = input.LA(1);

                         
                        int index465_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA465_9 = input.LA(1);

                         
                        int index465_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA465_10 = input.LA(1);

                         
                        int index465_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA465_11 = input.LA(1);

                         
                        int index465_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA465_12 = input.LA(1);

                         
                        int index465_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA465_13 = input.LA(1);

                         
                        int index465_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA465_14 = input.LA(1);

                         
                        int index465_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA465_15 = input.LA(1);

                         
                        int index465_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA465_16 = input.LA(1);

                         
                        int index465_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA465_17 = input.LA(1);

                         
                        int index465_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA465_18 = input.LA(1);

                         
                        int index465_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA465_19 = input.LA(1);

                         
                        int index465_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA465_20 = input.LA(1);

                         
                        int index465_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA465_21 = input.LA(1);

                         
                        int index465_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA465_22 = input.LA(1);

                         
                        int index465_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA465_23 = input.LA(1);

                         
                        int index465_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred265_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA465_24 = input.LA(1);

                         
                        int index465_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred267_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA465_27 = input.LA(1);

                         
                        int index465_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA465_28 = input.LA(1);

                         
                        int index465_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA465_29 = input.LA(1);

                         
                        int index465_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA465_30 = input.LA(1);

                         
                        int index465_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA465_31 = input.LA(1);

                         
                        int index465_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA465_32 = input.LA(1);

                         
                        int index465_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA465_33 = input.LA(1);

                         
                        int index465_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA465_34 = input.LA(1);

                         
                        int index465_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA465_35 = input.LA(1);

                         
                        int index465_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA465_36 = input.LA(1);

                         
                        int index465_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA465_37 = input.LA(1);

                         
                        int index465_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA465_38 = input.LA(1);

                         
                        int index465_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA465_39 = input.LA(1);

                         
                        int index465_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA465_40 = input.LA(1);

                         
                        int index465_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA465_41 = input.LA(1);

                         
                        int index465_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA465_42 = input.LA(1);

                         
                        int index465_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA465_43 = input.LA(1);

                         
                        int index465_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA465_44 = input.LA(1);

                         
                        int index465_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA465_45 = input.LA(1);

                         
                        int index465_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA465_46 = input.LA(1);

                         
                        int index465_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA465_47 = input.LA(1);

                         
                        int index465_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA465_48 = input.LA(1);

                         
                        int index465_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA465_49 = input.LA(1);

                         
                        int index465_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA465_50 = input.LA(1);

                         
                        int index465_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA465_51 = input.LA(1);

                         
                        int index465_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA465_52 = input.LA(1);

                         
                        int index465_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA465_53 = input.LA(1);

                         
                        int index465_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA465_54 = input.LA(1);

                         
                        int index465_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA465_55 = input.LA(1);

                         
                        int index465_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA465_56 = input.LA(1);

                         
                        int index465_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA465_57 = input.LA(1);

                         
                        int index465_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA465_58 = input.LA(1);

                         
                        int index465_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA465_59 = input.LA(1);

                         
                        int index465_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA465_60 = input.LA(1);

                         
                        int index465_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA465_61 = input.LA(1);

                         
                        int index465_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA465_62 = input.LA(1);

                         
                        int index465_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA465_63 = input.LA(1);

                         
                        int index465_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA465_64 = input.LA(1);

                         
                        int index465_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA465_65 = input.LA(1);

                         
                        int index465_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA465_66 = input.LA(1);

                         
                        int index465_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA465_67 = input.LA(1);

                         
                        int index465_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA465_68 = input.LA(1);

                         
                        int index465_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA465_69 = input.LA(1);

                         
                        int index465_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA465_70 = input.LA(1);

                         
                        int index465_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA465_71 = input.LA(1);

                         
                        int index465_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred270_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index465_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 465, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_298s = "\1\2\115\uffff";
    static final String[] dfa_299s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[][] dfa_299 = unpackEncodedStringArray(dfa_299s);

    class DFA455 extends DFA {

        public DFA455(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 455;
            this.eot = dfa_102;
            this.eof = dfa_298;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "16524:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA455_1 = input.LA(1);

                         
                        int index455_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred266_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index455_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 455, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA458 extends DFA {

        public DFA458(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 458;
            this.eot = dfa_102;
            this.eof = dfa_298;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "16793:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA458_1 = input.LA(1);

                         
                        int index458_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred269_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index458_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 458, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_300s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_301s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_302s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_303s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\61\12\4\uffff\10\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\2\uffff\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_300 = DFA.unpackEncodedStringToUnsignedChars(dfa_300s);
    static final char[] dfa_301 = DFA.unpackEncodedStringToUnsignedChars(dfa_301s);
    static final short[] dfa_302 = DFA.unpackEncodedString(dfa_302s);
    static final short[][] dfa_303 = unpackEncodedStringArray(dfa_303s);

    class DFA460 extends DFA {

        public DFA460(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 460;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 16854:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA462 extends DFA {

        public DFA462(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 462;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "16862:6: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA477 extends DFA {

        public DFA477(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 477;
            this.eot = dfa_292;
            this.eof = dfa_292;
            this.min = dfa_293;
            this.max = dfa_294;
            this.accept = dfa_295;
            this.special = dfa_296;
            this.transition = dfa_297;
        }
        public String getDescription() {
            return "16929:2: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Promisify | Await | Async | Implements | Interface | Private | Protected | Public | Out | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=> (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3_0= norm1_LiteralOrComputedPropertyName ) ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ruleBogusTypeRefFragment )? ( ( ( ( Asterisk ) ) ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ( ( norm1_LiteralOrComputedPropertyName ) ) LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_4_0_0_0= Asterisk ) ) ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_0_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_4_1_0= ruleAsyncNoTrailingLineBreak ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_4_1_1_0= norm1_LiteralOrComputedPropertyName ) ) ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_4_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA477_0 = input.LA(1);

                         
                        int index477_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA477_0>=4 && LA477_0<=126 && (s=T2S.M_41[LA477_0-(4)])>=0)) { /* 24 cases */ }
                        else if ( (LA477_0==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 25;}

                        else if ( (LA477_0==Asterisk) && (synpred278_InternalN4JSParser())) {s = 26;}

                        
                        else if ((LA477_0>=6 && LA477_0<=129 && (s=T2S.M_42[LA477_0-(6)])>=0)) { /* 43 cases */ }
                        else if ( (LA477_0==RULE_DOUBLE||LA477_0==RULE_HEX_INT||LA477_0==RULE_OCTAL_INT||LA477_0==RULE_SCIENTIFIC_INT||LA477_0==RULE_INT) ) {s = 70;}

                        else if ( (LA477_0==LeftSquareBracket) ) {s = 71;}

                         
                        input.seek(index477_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA477_1 = input.LA(1);

                         
                        int index477_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA477_2 = input.LA(1);

                         
                        int index477_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA477_3 = input.LA(1);

                         
                        int index477_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA477_4 = input.LA(1);

                         
                        int index477_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA477_5 = input.LA(1);

                         
                        int index477_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA477_6 = input.LA(1);

                         
                        int index477_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA477_7 = input.LA(1);

                         
                        int index477_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA477_8 = input.LA(1);

                         
                        int index477_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA477_9 = input.LA(1);

                         
                        int index477_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA477_10 = input.LA(1);

                         
                        int index477_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA477_11 = input.LA(1);

                         
                        int index477_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA477_12 = input.LA(1);

                         
                        int index477_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA477_13 = input.LA(1);

                         
                        int index477_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA477_14 = input.LA(1);

                         
                        int index477_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA477_15 = input.LA(1);

                         
                        int index477_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA477_16 = input.LA(1);

                         
                        int index477_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA477_17 = input.LA(1);

                         
                        int index477_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA477_18 = input.LA(1);

                         
                        int index477_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA477_19 = input.LA(1);

                         
                        int index477_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA477_20 = input.LA(1);

                         
                        int index477_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA477_21 = input.LA(1);

                         
                        int index477_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA477_22 = input.LA(1);

                         
                        int index477_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA477_23 = input.LA(1);

                         
                        int index477_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred273_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA477_24 = input.LA(1);

                         
                        int index477_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred275_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA477_27 = input.LA(1);

                         
                        int index477_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA477_28 = input.LA(1);

                         
                        int index477_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA477_29 = input.LA(1);

                         
                        int index477_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA477_30 = input.LA(1);

                         
                        int index477_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA477_31 = input.LA(1);

                         
                        int index477_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA477_32 = input.LA(1);

                         
                        int index477_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_32);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA477_33 = input.LA(1);

                         
                        int index477_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_33);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA477_34 = input.LA(1);

                         
                        int index477_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_34);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA477_35 = input.LA(1);

                         
                        int index477_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_35);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA477_36 = input.LA(1);

                         
                        int index477_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_36);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA477_37 = input.LA(1);

                         
                        int index477_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_37);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA477_38 = input.LA(1);

                         
                        int index477_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_38);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA477_39 = input.LA(1);

                         
                        int index477_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_39);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA477_40 = input.LA(1);

                         
                        int index477_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_40);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA477_41 = input.LA(1);

                         
                        int index477_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_41);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA477_42 = input.LA(1);

                         
                        int index477_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_42);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA477_43 = input.LA(1);

                         
                        int index477_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_43);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA477_44 = input.LA(1);

                         
                        int index477_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_44);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA477_45 = input.LA(1);

                         
                        int index477_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_45);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA477_46 = input.LA(1);

                         
                        int index477_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_46);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA477_47 = input.LA(1);

                         
                        int index477_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_47);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA477_48 = input.LA(1);

                         
                        int index477_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_48);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA477_49 = input.LA(1);

                         
                        int index477_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_49);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA477_50 = input.LA(1);

                         
                        int index477_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_50);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA477_51 = input.LA(1);

                         
                        int index477_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_51);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA477_52 = input.LA(1);

                         
                        int index477_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_52);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA477_53 = input.LA(1);

                         
                        int index477_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_53);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA477_54 = input.LA(1);

                         
                        int index477_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_54);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA477_55 = input.LA(1);

                         
                        int index477_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_55);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA477_56 = input.LA(1);

                         
                        int index477_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_56);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA477_57 = input.LA(1);

                         
                        int index477_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_57);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA477_58 = input.LA(1);

                         
                        int index477_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_58);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA477_59 = input.LA(1);

                         
                        int index477_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_59);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA477_60 = input.LA(1);

                         
                        int index477_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_60);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA477_61 = input.LA(1);

                         
                        int index477_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_61);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA477_62 = input.LA(1);

                         
                        int index477_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_62);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA477_63 = input.LA(1);

                         
                        int index477_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_63);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA477_64 = input.LA(1);

                         
                        int index477_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_64);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA477_65 = input.LA(1);

                         
                        int index477_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_65);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA477_66 = input.LA(1);

                         
                        int index477_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_66);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA477_67 = input.LA(1);

                         
                        int index477_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_67);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA477_68 = input.LA(1);

                         
                        int index477_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_68);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA477_69 = input.LA(1);

                         
                        int index477_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_69);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA477_70 = input.LA(1);

                         
                        int index477_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_70);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA477_71 = input.LA(1);

                         
                        int index477_71 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred278_InternalN4JSParser()) ) {s = 26;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index477_71);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 477, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_304s = "\1\4\1\0\113\uffff";
    static final String dfa_305s = "\1\u0095\1\0\113\uffff";
    static final String dfa_306s = "\2\uffff\1\2\111\uffff\1\1";
    static final String dfa_307s = "\1\uffff\1\0\113\uffff}>";
    static final String[] dfa_308s = {
            "\61\2\4\uffff\10\2\21\uffff\5\2\5\uffff\1\2\1\uffff\1\2\6\uffff\2\2\2\uffff\3\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\1\uffff\1\2\2\uffff\1\2\23\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_304 = DFA.unpackEncodedStringToUnsignedChars(dfa_304s);
    static final char[] dfa_305 = DFA.unpackEncodedStringToUnsignedChars(dfa_305s);
    static final short[] dfa_306 = DFA.unpackEncodedString(dfa_306s);
    static final short[] dfa_307 = DFA.unpackEncodedString(dfa_307s);
    static final short[][] dfa_308 = unpackEncodedStringArray(dfa_308s);

    class DFA467 extends DFA {

        public DFA467(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 467;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_304;
            this.max = dfa_305;
            this.accept = dfa_306;
            this.special = dfa_307;
            this.transition = dfa_308;
        }
        public String getDescription() {
            return "16950:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA467_1 = input.LA(1);

                         
                        int index467_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred274_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index467_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 467, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA470 extends DFA {

        public DFA470(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 470;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_304;
            this.max = dfa_305;
            this.accept = dfa_306;
            this.special = dfa_307;
            this.transition = dfa_308;
        }
        public String getDescription() {
            return "17219:4: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA470_1 = input.LA(1);

                         
                        int index470_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred277_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index470_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 470, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA472 extends DFA {

        public DFA472(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 472;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 17280:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA474 extends DFA {

        public DFA474(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 474;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17288:6: (BogusTypeRefFragmentParserRuleCall_1_2_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }
    static final String dfa_309s = "\2\uffff\10\1\1\uffff";
    static final String dfa_310s = "\1\u0095\1\uffff\10\u0099\1\uffff";
    static final String[] dfa_311s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\10\1\1\2\21\1\4\uffff\10\1\21\uffff\5\1\22\uffff\1\1\1\uffff\1\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            "\61\12\4\uffff\10\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\1\1\12\3\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12\1\uffff\1\1\1\uffff\1\1",
            ""
    };
    static final short[] dfa_309 = DFA.unpackEncodedString(dfa_309s);
    static final char[] dfa_310 = DFA.unpackEncodedStringToUnsignedChars(dfa_310s);
    static final short[][] dfa_311 = unpackEncodedStringArray(dfa_311s);

    class DFA478 extends DFA {

        public DFA478(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 478;
            this.eot = dfa_13;
            this.eof = dfa_309;
            this.min = dfa_300;
            this.max = dfa_310;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "()* loopback of 17354:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_312s = "\1\uffff\6\15\1\uffff\5\15\1\uffff";
    static final String dfa_313s = "\1\u0095\6\u0099\1\uffff\5\u0099\1\uffff";
    static final String[] dfa_314s = {
            "\1\14\1\12\2\15\1\4\23\15\1\5\2\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\11\1\1\1\15\4\uffff\10\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\2\15\1\7\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "",
            "\61\7\4\uffff\10\7\21\uffff\5\7\10\uffff\1\7\4\uffff\2\15\1\uffff\1\15\1\uffff\1\7\1\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7\1\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            "\2\15\1\uffff\1\15\6\uffff\1\7\1\uffff\1\15\46\uffff\1\15\1\uffff\1\15",
            ""
    };
    static final short[] dfa_312 = DFA.unpackEncodedString(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[][] dfa_314 = unpackEncodedStringArray(dfa_314s);

    class DFA479 extends DFA {

        public DFA479(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 479;
            this.eot = dfa_189;
            this.eof = dfa_312;
            this.min = dfa_190;
            this.max = dfa_313;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_314;
        }
        public String getDescription() {
            return "17359:2: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA482 extends DFA {

        public DFA482(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 482;
            this.eot = dfa_13;
            this.eof = dfa_309;
            this.min = dfa_300;
            this.max = dfa_310;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_311;
        }
        public String getDescription() {
            return "()* loopback of 17395:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA483 extends DFA {

        public DFA483(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 483;
            this.eot = dfa_189;
            this.eof = dfa_312;
            this.min = dfa_190;
            this.max = dfa_313;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_314;
        }
        public String getDescription() {
            return "17400:2: (BogusTypeRefFragmentParserRuleCall_1= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA486 extends DFA {

        public DFA486(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 486;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 17507:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA488 extends DFA {

        public DFA488(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 488;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17515:4: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA491 extends DFA {

        public DFA491(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 491;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 17616:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA493 extends DFA {

        public DFA493(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 493;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17624:4: (BogusTypeRefFragmentParserRuleCall_0_0_3= ruleBogusTypeRefFragment )?";
        }
    }

    class DFA501 extends DFA {

        public DFA501(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 501;
            this.eot = dfa_102;
            this.eof = dfa_298;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "17777:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA501_1 = input.LA(1);

                         
                        int index501_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred289_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index501_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 501, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA503 extends DFA {

        public DFA503(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 503;
            this.eot = dfa_102;
            this.eof = dfa_298;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "17811:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_2_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA503_1 = input.LA(1);

                         
                        int index503_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred290_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index503_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 503, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA505 extends DFA {

        public DFA505(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 505;
            this.eot = dfa_102;
            this.eof = dfa_298;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "17855:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA505_1 = input.LA(1);

                         
                        int index505_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred292_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index505_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 505, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA508 extends DFA {

        public DFA508(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 508;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_304;
            this.max = dfa_305;
            this.accept = dfa_306;
            this.special = dfa_307;
            this.transition = dfa_308;
        }
        public String getDescription() {
            return "17900:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA508_1 = input.LA(1);

                         
                        int index508_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred294_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index508_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 508, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA515 extends DFA {

        public DFA515(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 515;
            this.eot = dfa_102;
            this.eof = dfa_298;
            this.min = dfa_103;
            this.max = dfa_104;
            this.accept = dfa_105;
            this.special = dfa_106;
            this.transition = dfa_299;
        }
        public String getDescription() {
            return "18376:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA515_1 = input.LA(1);

                         
                        int index515_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred299_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index515_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 515, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA518 extends DFA {

        public DFA518(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 518;
            this.eot = dfa_177;
            this.eof = dfa_177;
            this.min = dfa_304;
            this.max = dfa_305;
            this.accept = dfa_306;
            this.special = dfa_307;
            this.transition = dfa_308;
        }
        public String getDescription() {
            return "18651:2: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_4_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA518_1 = input.LA(1);

                         
                        int index518_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred302_InternalN4JSParser()) ) {s = 76;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index518_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 518, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_315s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_316s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_315 = DFA.unpackEncodedStringToUnsignedChars(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);

    class DFA528 extends DFA {

        public DFA528(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 528;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_315;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "()* loopback of 18813:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_317s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\2\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\2\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_317 = unpackEncodedStringArray(dfa_317s);

    class DFA534 extends DFA {

        public DFA534(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 534;
            this.eot = dfa_171;
            this.eof = dfa_171;
            this.min = dfa_172;
            this.max = dfa_315;
            this.accept = dfa_174;
            this.special = dfa_175;
            this.transition = dfa_317;
        }
        public String getDescription() {
            return "()* loopback of 18879:3: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_318s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_319s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_320s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_321s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_322s = "\1\30\1\12\40\uffff\1\27\4\uffff\1\3\1\7\1\13\1\16\1\21\1\24\1\31\1\0\1\4\1\10\1\14\1\17\1\22\1\25\1\32\1\1\1\5\1\11\1\15\1\20\1\23\1\26\1\33\1\2\1\6\5\uffff}>";
    static final String[] dfa_323s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_318 = DFA.unpackEncodedString(dfa_318s);
    static final char[] dfa_319 = DFA.unpackEncodedStringToUnsignedChars(dfa_319s);
    static final char[] dfa_320 = DFA.unpackEncodedStringToUnsignedChars(dfa_320s);
    static final short[] dfa_321 = DFA.unpackEncodedString(dfa_321s);
    static final short[] dfa_322 = DFA.unpackEncodedString(dfa_322s);
    static final short[][] dfa_323 = unpackEncodedStringArray(dfa_323s);

    class DFA538 extends DFA {

        public DFA538(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 538;
            this.eot = dfa_232;
            this.eof = dfa_318;
            this.min = dfa_319;
            this.max = dfa_320;
            this.accept = dfa_321;
            this.special = dfa_322;
            this.transition = dfa_323;
        }
        public String getDescription() {
            return "18930:1: ( ( ( ( ( ( ( ruleLiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= ruleLiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA538_46 = input.LA(1);

                         
                        int index538_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_46==EOF||LA538_46==Comma||LA538_46==EqualsSign||LA538_46==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_46==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_46);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA538_54 = input.LA(1);

                         
                        int index538_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_54==EOF||LA538_54==Comma||LA538_54==EqualsSign||LA538_54==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_54==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_54);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA538_62 = input.LA(1);

                         
                        int index538_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_62==EOF||LA538_62==Comma||LA538_62==EqualsSign||LA538_62==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_62==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_62);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA538_39 = input.LA(1);

                         
                        int index538_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_39==EOF||LA538_39==Comma||LA538_39==EqualsSign||LA538_39==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_39==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_39);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA538_47 = input.LA(1);

                         
                        int index538_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_47==EOF||LA538_47==Comma||LA538_47==EqualsSign||LA538_47==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_47==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_47);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA538_55 = input.LA(1);

                         
                        int index538_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_55==EOF||LA538_55==Comma||LA538_55==EqualsSign||LA538_55==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_55==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_55);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA538_63 = input.LA(1);

                         
                        int index538_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_63==EOF||LA538_63==Comma||LA538_63==EqualsSign||LA538_63==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_63==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_63);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA538_40 = input.LA(1);

                         
                        int index538_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_40==EOF||LA538_40==Comma||LA538_40==EqualsSign||LA538_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_40==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_40);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA538_48 = input.LA(1);

                         
                        int index538_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_48==EOF||LA538_48==Comma||LA538_48==EqualsSign||LA538_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_48==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_48);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA538_56 = input.LA(1);

                         
                        int index538_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_56==EOF||LA538_56==Comma||LA538_56==EqualsSign||LA538_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_56==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_56);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA538_1 = input.LA(1);

                         
                        int index538_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_1==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                        else if ( (LA538_1==EOF||LA538_1==Comma||LA538_1==EqualsSign||LA538_1==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index538_1);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA538_41 = input.LA(1);

                         
                        int index538_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_41==EOF||LA538_41==Comma||LA538_41==EqualsSign||LA538_41==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_41==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_41);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA538_49 = input.LA(1);

                         
                        int index538_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_49==EOF||LA538_49==Comma||LA538_49==EqualsSign||LA538_49==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_49==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_49);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA538_57 = input.LA(1);

                         
                        int index538_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_57==EOF||LA538_57==Comma||LA538_57==EqualsSign||LA538_57==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_57==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_57);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA538_42 = input.LA(1);

                         
                        int index538_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_42==EOF||LA538_42==Comma||LA538_42==EqualsSign||LA538_42==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_42==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_42);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA538_50 = input.LA(1);

                         
                        int index538_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_50==EOF||LA538_50==Comma||LA538_50==EqualsSign||LA538_50==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_50==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_50);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA538_58 = input.LA(1);

                         
                        int index538_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_58==EOF||LA538_58==Comma||LA538_58==EqualsSign||LA538_58==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_58==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_58);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA538_43 = input.LA(1);

                         
                        int index538_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_43==EOF||LA538_43==Comma||LA538_43==EqualsSign||LA538_43==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_43==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_43);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA538_51 = input.LA(1);

                         
                        int index538_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_51==EOF||LA538_51==Comma||LA538_51==EqualsSign||LA538_51==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_51==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_51);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA538_59 = input.LA(1);

                         
                        int index538_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_59==EOF||LA538_59==Comma||LA538_59==EqualsSign||LA538_59==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_59==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_59);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA538_44 = input.LA(1);

                         
                        int index538_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_44==EOF||LA538_44==Comma||LA538_44==EqualsSign||LA538_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_44==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_44);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA538_52 = input.LA(1);

                         
                        int index538_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_52==EOF||LA538_52==Comma||LA538_52==EqualsSign||LA538_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_52==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_52);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA538_60 = input.LA(1);

                         
                        int index538_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_60==EOF||LA538_60==Comma||LA538_60==EqualsSign||LA538_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_60==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_60);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA538_34 = input.LA(1);

                         
                        int index538_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_34==EOF||LA538_34==Comma||LA538_34==EqualsSign||LA538_34==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_34==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_34);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA538_0 = input.LA(1);

                         
                        int index538_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA538_0>=7 && LA538_0<=126 && (s=T2S.M_45[LA538_0-(7)])>=0) && (synpred303_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA538_0==Yield) ) {s = 34;}

                        else if ( (LA538_0==Null) && (synpred303_InternalN4JSParser())) {s = 35;}

                        else if ( (LA538_0==True) && (synpred303_InternalN4JSParser())) {s = 36;}

                        else if ( (LA538_0==False) && (synpred303_InternalN4JSParser())) {s = 37;}

                        else if ( (LA538_0==Enum) && (synpred303_InternalN4JSParser())) {s = 38;}

                        
                        else if ((LA538_0>=4 && LA538_0<=86 && (s=T2S.M_46[LA538_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA538_0==RULE_STRING) && (synpred303_InternalN4JSParser())) {s = 64;}

                        else if ( (LA538_0==RULE_DOUBLE||LA538_0==RULE_HEX_INT||LA538_0==RULE_OCTAL_INT||LA538_0==RULE_SCIENTIFIC_INT||LA538_0==RULE_INT) && (synpred303_InternalN4JSParser())) {s = 65;}

                        else if ( (LA538_0==LeftSquareBracket) && (synpred303_InternalN4JSParser())) {s = 66;}

                        else if ( (LA538_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index538_0);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA538_45 = input.LA(1);

                         
                        int index538_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_45==EOF||LA538_45==Comma||LA538_45==EqualsSign||LA538_45==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_45==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_45);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA538_53 = input.LA(1);

                         
                        int index538_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_53==EOF||LA538_53==Comma||LA538_53==EqualsSign||LA538_53==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_53==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_53);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA538_61 = input.LA(1);

                         
                        int index538_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA538_61==EOF||LA538_61==Comma||LA538_61==EqualsSign||LA538_61==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA538_61==Colon) && (synpred303_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index538_61);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 538, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_324s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_325s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_326s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_327s = "\1\6\1\13\45\uffff\1\7\1\14\1\17\1\22\1\25\1\30\1\0\1\3\1\10\1\15\1\20\1\23\1\26\1\31\1\1\1\4\1\11\1\16\1\21\1\24\1\27\1\32\1\2\1\5\1\12\5\uffff}>";
    static final String[] dfa_328s = {
            "\1\65\1\60\1\72\1\25\1\67\1\73\1\75\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\74\1\52\1\12\1\15\1\23\1\76\1\27\1\55\1\31\1\62\1\35\1\71\1\70\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\77\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_324 = DFA.unpackEncodedStringToUnsignedChars(dfa_324s);
    static final char[] dfa_325 = DFA.unpackEncodedStringToUnsignedChars(dfa_325s);
    static final short[] dfa_326 = DFA.unpackEncodedString(dfa_326s);
    static final short[] dfa_327 = DFA.unpackEncodedString(dfa_327s);
    static final short[][] dfa_328 = unpackEncodedStringArray(dfa_328s);

    class DFA539 extends DFA {

        public DFA539(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 539;
            this.eot = dfa_232;
            this.eof = dfa_232;
            this.min = dfa_324;
            this.max = dfa_325;
            this.accept = dfa_326;
            this.special = dfa_327;
            this.transition = dfa_328;
        }
        public String getDescription() {
            return "18980:1: ( ( ( ( ( ( ( norm1_LiteralOrComputedPropertyName ) ) Colon ) )=> ( ( (DeclaredNameLiteralOrComputedPropertyNameParserRuleCall_0_0_0_0_0= norm1_LiteralOrComputedPropertyName ) ) ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA539_45 = input.LA(1);

                         
                        int index539_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_45==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_45==Comma||LA539_45==EqualsSign||LA539_45==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_45);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA539_53 = input.LA(1);

                         
                        int index539_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_53==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_53==Comma||LA539_53==EqualsSign||LA539_53==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_53);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA539_61 = input.LA(1);

                         
                        int index539_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_61==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_61==Comma||LA539_61==EqualsSign||LA539_61==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA539_46 = input.LA(1);

                         
                        int index539_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_46==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_46==Comma||LA539_46==EqualsSign||LA539_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_46);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA539_54 = input.LA(1);

                         
                        int index539_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_54==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_54==Comma||LA539_54==EqualsSign||LA539_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_54);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA539_62 = input.LA(1);

                         
                        int index539_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_62==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_62==Comma||LA539_62==EqualsSign||LA539_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_62);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA539_0 = input.LA(1);

                         
                        int index539_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA539_0>=7 && LA539_0<=126 && (s=T2S.M_47[LA539_0-(7)])>=0) && (synpred304_InternalN4JSParser())) { /* 38 cases */ }
                        
                        else if ((LA539_0>=4 && LA539_0<=86 && (s=T2S.M_46[LA539_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA539_0==RULE_STRING) && (synpred304_InternalN4JSParser())) {s = 64;}

                        else if ( (LA539_0==RULE_DOUBLE||LA539_0==RULE_HEX_INT||LA539_0==RULE_OCTAL_INT||LA539_0==RULE_SCIENTIFIC_INT||LA539_0==RULE_INT) && (synpred304_InternalN4JSParser())) {s = 65;}

                        else if ( (LA539_0==LeftSquareBracket) && (synpred304_InternalN4JSParser())) {s = 66;}

                        else if ( (LA539_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index539_0);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA539_39 = input.LA(1);

                         
                        int index539_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_39==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_39==Comma||LA539_39==EqualsSign||LA539_39==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA539_47 = input.LA(1);

                         
                        int index539_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_47==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_47==Comma||LA539_47==EqualsSign||LA539_47==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA539_55 = input.LA(1);

                         
                        int index539_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_55==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_55==Comma||LA539_55==EqualsSign||LA539_55==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_55);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA539_63 = input.LA(1);

                         
                        int index539_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_63==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_63==Comma||LA539_63==EqualsSign||LA539_63==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_63);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA539_1 = input.LA(1);

                         
                        int index539_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_1==Comma||LA539_1==EqualsSign||LA539_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA539_1==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index539_1);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA539_40 = input.LA(1);

                         
                        int index539_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_40==Comma||LA539_40==EqualsSign||LA539_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA539_40==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index539_40);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA539_48 = input.LA(1);

                         
                        int index539_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_48==Comma||LA539_48==EqualsSign||LA539_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA539_48==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index539_48);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA539_56 = input.LA(1);

                         
                        int index539_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_56==Comma||LA539_56==EqualsSign||LA539_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA539_56==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index539_56);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA539_41 = input.LA(1);

                         
                        int index539_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_41==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_41==Comma||LA539_41==EqualsSign||LA539_41==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_41);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA539_49 = input.LA(1);

                         
                        int index539_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_49==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_49==Comma||LA539_49==EqualsSign||LA539_49==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA539_57 = input.LA(1);

                         
                        int index539_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_57==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_57==Comma||LA539_57==EqualsSign||LA539_57==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_57);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA539_42 = input.LA(1);

                         
                        int index539_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_42==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_42==Comma||LA539_42==EqualsSign||LA539_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_42);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA539_50 = input.LA(1);

                         
                        int index539_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_50==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_50==Comma||LA539_50==EqualsSign||LA539_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_50);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA539_58 = input.LA(1);

                         
                        int index539_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_58==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_58==Comma||LA539_58==EqualsSign||LA539_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA539_43 = input.LA(1);

                         
                        int index539_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_43==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_43==Comma||LA539_43==EqualsSign||LA539_43==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_43);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA539_51 = input.LA(1);

                         
                        int index539_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_51==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_51==Comma||LA539_51==EqualsSign||LA539_51==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_51);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA539_59 = input.LA(1);

                         
                        int index539_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_59==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                        else if ( (LA539_59==Comma||LA539_59==EqualsSign||LA539_59==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index539_59);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA539_44 = input.LA(1);

                         
                        int index539_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_44==Comma||LA539_44==EqualsSign||LA539_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA539_44==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index539_44);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA539_52 = input.LA(1);

                         
                        int index539_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_52==Comma||LA539_52==EqualsSign||LA539_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA539_52==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index539_52);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA539_60 = input.LA(1);

                         
                        int index539_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA539_60==Comma||LA539_60==EqualsSign||LA539_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA539_60==Colon) && (synpred304_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index539_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 539, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_329s = "\23\uffff";
    static final String dfa_330s = "\1\4\1\0\21\uffff";
    static final String dfa_331s = "\1\176\1\0\21\uffff";
    static final String dfa_332s = "\2\uffff\1\2\1\3\15\uffff\1\1\1\4";
    static final String dfa_333s = "\1\uffff\1\0\21\uffff}>";
    static final String[] dfa_334s = {
            "\2\3\2\uffff\1\3\23\uffff\1\3\2\uffff\1\3\7\uffff\1\3\2\uffff\1\3\5\uffff\1\3\1\uffff\2\3\50\uffff\1\1\14\uffff\1\3\1\uffff\1\2\2\uffff\1\3\2\uffff\1\3\14\uffff\1\3",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_329 = DFA.unpackEncodedString(dfa_329s);
    static final char[] dfa_330 = DFA.unpackEncodedStringToUnsignedChars(dfa_330s);
    static final char[] dfa_331 = DFA.unpackEncodedStringToUnsignedChars(dfa_331s);
    static final short[] dfa_332 = DFA.unpackEncodedString(dfa_332s);
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final short[][] dfa_334 = unpackEncodedStringArray(dfa_334s);

    class DFA556 extends DFA {

        public DFA556(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 556;
            this.eot = dfa_329;
            this.eof = dfa_329;
            this.min = dfa_330;
            this.max = dfa_331;
            this.accept = dfa_332;
            this.special = dfa_333;
            this.transition = dfa_334;
        }
        public String getDescription() {
            return "19510:1: ( ( ( ( ( LeftParenthesis ruleTAnonymousFormalParameterList RightParenthesis EqualsSignGreaterThanSign ) )=> (LeftParenthesisKeyword_0_0_0_1= LeftParenthesis TAnonymousFormalParameterListParserRuleCall_0_0_0_2= ruleTAnonymousFormalParameterList RightParenthesisKeyword_0_0_0_3= RightParenthesis EqualsSignGreaterThanSignKeyword_0_0_0_4= EqualsSignGreaterThanSign ) ) ( (ReturnTypeRefPrimaryTypeExpressionParserRuleCall_0_1_0= rulePrimaryTypeExpression ) ) ) | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | TypeRefWithModifiersParserRuleCall_2= ruleTypeRefWithModifiers | (LeftParenthesisKeyword_3_0= LeftParenthesis TypeRefParserRuleCall_3_1= ruleTypeRef RightParenthesisKeyword_3_2= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA556_1 = input.LA(1);

                         
                        int index556_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred309_InternalN4JSParser()) ) {s = 17;}

                        else if ( (true) ) {s = 18;}

                         
                        input.seek(index556_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 556, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_335s = "\174\uffff";
    static final String dfa_336s = "\1\2\173\uffff";
    static final String dfa_337s = "\1\4\1\0\172\uffff";
    static final String dfa_338s = "\1\u0099\1\0\172\uffff";
    static final String dfa_339s = "\2\uffff\1\2\170\uffff\1\1";
    static final String dfa_340s = "\1\uffff\1\0\172\uffff}>";
    static final String[] dfa_341s = {
            "\114\2\1\uffff\16\2\1\1\2\2\1\uffff\17\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_335 = DFA.unpackEncodedString(dfa_335s);
    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final char[] dfa_337 = DFA.unpackEncodedStringToUnsignedChars(dfa_337s);
    static final char[] dfa_338 = DFA.unpackEncodedStringToUnsignedChars(dfa_338s);
    static final short[] dfa_339 = DFA.unpackEncodedString(dfa_339s);
    static final short[] dfa_340 = DFA.unpackEncodedString(dfa_340s);
    static final short[][] dfa_341 = unpackEncodedStringArray(dfa_341s);

    class DFA560 extends DFA {

        public DFA560(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 560;
            this.eot = dfa_335;
            this.eof = dfa_336;
            this.min = dfa_337;
            this.max = dfa_338;
            this.accept = dfa_339;
            this.special = dfa_340;
            this.transition = dfa_341;
        }
        public String getDescription() {
            return "19631:3: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA560_1 = input.LA(1);

                         
                        int index560_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred311_InternalN4JSParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index560_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 560, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_342s = "\1\4\1\uffff\1\10\7\uffff\2\10";
    static final String dfa_343s = "\1\176\1\uffff\1\u0093\7\uffff\2\176";
    static final String dfa_344s = "\1\uffff\1\1\1\uffff\1\2\1\3\1\4\1\5\1\6\1\7\1\10\2\uffff";
    static final String[] dfa_345s = {
            "\1\11\1\5\2\uffff\1\1\23\uffff\1\1\2\uffff\1\1\7\uffff\1\10\2\uffff\1\1\5\uffff\1\4\1\uffff\1\5\1\1\50\uffff\1\7\16\uffff\1\3\2\uffff\1\6\2\uffff\1\2\14\uffff\1\1",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\75\uffff\1\12\14\uffff\1\1\24\uffff\1\13",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1",
            "\1\1\23\uffff\1\1\2\uffff\1\1\12\uffff\1\1\5\uffff\1\4\2\uffff\1\1\112\uffff\1\1"
    };
    static final char[] dfa_342 = DFA.unpackEncodedStringToUnsignedChars(dfa_342s);
    static final char[] dfa_343 = DFA.unpackEncodedStringToUnsignedChars(dfa_343s);
    static final short[] dfa_344 = DFA.unpackEncodedString(dfa_344s);
    static final short[][] dfa_345 = unpackEncodedStringArray(dfa_345s);

    class DFA563 extends DFA {

        public DFA563(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 563;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_342;
            this.max = dfa_343;
            this.accept = dfa_344;
            this.special = dfa_44;
            this.transition = dfa_345;
        }
        public String getDescription() {
            return "19688:1: (ParameterizedTypeRefParserRuleCall_0= ruleParameterizedTypeRef | ArrayTypeRefParserRuleCall_1= ruleArrayTypeRef | ThisTypeRefParserRuleCall_2= ruleThisTypeRef | TypeTypeRefParserRuleCall_3= ruleTypeTypeRef | FunctionTypeExpressionOLDParserRuleCall_4= ruleFunctionTypeExpressionOLD | ArrowFunctionTypeExpressionParserRuleCall_5= ruleArrowFunctionTypeExpression | UnionTypeExpressionOLDParserRuleCall_6= ruleUnionTypeExpressionOLD | IntersectionTypeExpressionOLDParserRuleCall_7= ruleIntersectionTypeExpressionOLD )";
        }
    }
    static final String dfa_346s = "\1\uffff\1\34\14\uffff\1\34\3\uffff\3\34\11\uffff";
    static final String dfa_347s = "\1\4\1\133\12\uffff\1\144\1\uffff\1\133\3\144\3\133\11\uffff";
    static final String dfa_348s = "\1\176\1\157\12\uffff\1\156\1\uffff\1\157\3\156\3\157\11\uffff";
    static final String dfa_349s = "\2\uffff\12\1\1\uffff\1\1\7\uffff\7\1\1\2\1\1";
    static final String dfa_350s = "\1\10\1\3\12\uffff\1\11\1\uffff\1\0\1\1\1\2\1\6\1\7\1\4\1\5\11\uffff}>";
    static final String[] dfa_351s = {
            "\1\21\1\14\1\26\1\uffff\1\23\1\27\1\31\1\10\2\uffff\1\7\4\uffff\1\30\1\6\3\uffff\1\32\1\uffff\1\11\1\uffff\1\16\1\uffff\1\25\1\24\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\1\uffff\1\34\1\uffff\1\17\1\34\6\uffff\1\3\1\5\1\uffff\1\33\1\4\23\uffff\1\12\3\uffff\1\15\5\uffff\1\34\14\uffff\1\34\1\uffff\1\34\2\uffff\1\34\2\uffff\1\34\14\uffff\1\1",
            "\1\34\1\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\35\11\uffff\1\34",
            "",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\35\11\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "\1\34\1\uffff\1\34\1\uffff\2\34\3\uffff\1\35\1\uffff\1\34\2\uffff\1\34\5\uffff\1\34",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final char[] dfa_347 = DFA.unpackEncodedStringToUnsignedChars(dfa_347s);
    static final char[] dfa_348 = DFA.unpackEncodedStringToUnsignedChars(dfa_348s);
    static final short[] dfa_349 = DFA.unpackEncodedString(dfa_349s);
    static final short[] dfa_350 = DFA.unpackEncodedString(dfa_350s);
    static final short[][] dfa_351 = unpackEncodedStringArray(dfa_351s);

    class DFA574 extends DFA {

        public DFA574(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 574;
            this.eot = dfa_46;
            this.eof = dfa_346;
            this.min = dfa_347;
            this.max = dfa_348;
            this.accept = dfa_349;
            this.special = dfa_350;
            this.transition = dfa_351;
        }
        public String getDescription() {
            return "19984:2: ( ( ( ( ruleBindingIdentifier ) )=> (NameBindingIdentifierParserRuleCall_1_0_0= ruleBindingIdentifier ) ) ColonKeyword_1_1= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA574_14 = input.LA(1);

                         
                        int index574_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_14==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                        else if ( (LA574_14==EOF||LA574_14==Ampersand||LA574_14==RightParenthesis||(LA574_14>=PlusSign && LA574_14<=Comma)||LA574_14==LessThanSign||LA574_14==QuestionMark||LA574_14==VerticalLine) ) {s = 28;}

                         
                        input.seek(index574_14);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA574_15 = input.LA(1);

                         
                        int index574_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_15==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                        else if ( (LA574_15==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index574_15);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA574_16 = input.LA(1);

                         
                        int index574_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_16==LeftCurlyBracket) ) {s = 28;}

                        else if ( (LA574_16==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index574_16);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA574_1 = input.LA(1);

                         
                        int index574_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_1==EOF||LA574_1==Ampersand||LA574_1==RightParenthesis||(LA574_1>=PlusSign && LA574_1<=Comma)||LA574_1==FullStop||LA574_1==LessThanSign||LA574_1==QuestionMark||LA574_1==VerticalLine) ) {s = 28;}

                        else if ( (LA574_1==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index574_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA574_19 = input.LA(1);

                         
                        int index574_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_19==EOF||LA574_19==Ampersand||LA574_19==RightParenthesis||(LA574_19>=PlusSign && LA574_19<=Comma)||LA574_19==LessThanSign||LA574_19==QuestionMark||LA574_19==VerticalLine) ) {s = 28;}

                        else if ( (LA574_19==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index574_19);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA574_20 = input.LA(1);

                         
                        int index574_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_20==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                        else if ( (LA574_20==EOF||LA574_20==Ampersand||LA574_20==RightParenthesis||(LA574_20>=PlusSign && LA574_20<=Comma)||LA574_20==LessThanSign||LA574_20==QuestionMark||LA574_20==VerticalLine) ) {s = 28;}

                         
                        input.seek(index574_20);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA574_17 = input.LA(1);

                         
                        int index574_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_17==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                        else if ( (LA574_17==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index574_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA574_18 = input.LA(1);

                         
                        int index574_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_18==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                        else if ( (LA574_18==EOF||LA574_18==Ampersand||LA574_18==RightParenthesis||(LA574_18>=PlusSign && LA574_18<=Comma)||LA574_18==LessThanSign||LA574_18==QuestionMark||LA574_18==VerticalLine) ) {s = 28;}

                         
                        input.seek(index574_18);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA574_0 = input.LA(1);

                         
                        int index574_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA574_0>=11 && LA574_0<=126 && (s=T2S.M_49[LA574_0-(11)])>=0) && (synpred313_InternalN4JSParser())) { /* 11 cases */ }
                        else if ( (LA574_0==Constructor) ) {s = 12;}

                        else if ( (LA574_0==Of) && (synpred313_InternalN4JSParser())) {s = 13;}

                        else if ( (LA574_0==Target) ) {s = 14;}

                        else if ( (LA574_0==Type) ) {s = 15;}

                        else if ( (LA574_0==Union) ) {s = 16;}

                        else if ( (LA574_0==Intersection) ) {s = 17;}

                        else if ( (LA574_0==This) ) {s = 18;}

                        else if ( (LA574_0==Promisify) ) {s = 19;}

                        else if ( (LA574_0==Await) ) {s = 20;}

                        else if ( (LA574_0==Async) && (synpred313_InternalN4JSParser())) {s = 21;}

                        else if ( (LA574_0==Implements) && (synpred313_InternalN4JSParser())) {s = 22;}

                        else if ( (LA574_0==Interface) && (synpred313_InternalN4JSParser())) {s = 23;}

                        else if ( (LA574_0==Private) && (synpred313_InternalN4JSParser())) {s = 24;}

                        else if ( (LA574_0==Protected) && (synpred313_InternalN4JSParser())) {s = 25;}

                        else if ( (LA574_0==Public) && (synpred313_InternalN4JSParser())) {s = 26;}

                        else if ( (LA574_0==Out) && (synpred313_InternalN4JSParser())) {s = 27;}

                        else if ( (LA574_0==This_1||LA574_0==Void||LA574_0==LeftParenthesis||LA574_0==QuestionMark||LA574_0==LeftSquareBracket||LA574_0==LeftCurlyBracket||LA574_0==Tilde) ) {s = 28;}

                         
                        input.seek(index574_0);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA574_12 = input.LA(1);

                         
                        int index574_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA574_12==Colon) && (synpred313_InternalN4JSParser())) {s = 29;}

                        else if ( (LA574_12==LeftCurlyBracket) ) {s = 28;}

                         
                        input.seek(index574_12);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 574, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_352s = {
            "\114\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_352 = unpackEncodedStringArray(dfa_352s);

    class DFA579 extends DFA {

        public DFA579(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 579;
            this.eot = dfa_335;
            this.eof = dfa_336;
            this.min = dfa_337;
            this.max = dfa_338;
            this.accept = dfa_339;
            this.special = dfa_340;
            this.transition = dfa_352;
        }
        public String getDescription() {
            return "20138:2: ( ( ( LessThanSign )=>LessThanSignKeyword_1_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_1_1_0= ruleTypeArgument ) ) (CommaKeyword_1_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_1_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_1_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA579_1 = input.LA(1);

                         
                        int index579_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index579_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 579, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA581 extends DFA {

        public DFA581(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 581;
            this.eot = dfa_335;
            this.eof = dfa_336;
            this.min = dfa_337;
            this.max = dfa_338;
            this.accept = dfa_339;
            this.special = dfa_340;
            this.transition = dfa_352;
        }
        public String getDescription() {
            return "20233:2: ( ( ( LessThanSign )=>LessThanSignKeyword_2_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_2_1_0= ruleTypeArgument ) ) (CommaKeyword_2_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_2_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_2_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA581_1 = input.LA(1);

                         
                        int index581_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_InternalN4JSParser()) ) {s = 123;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index581_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 581, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_353s = "\1\4\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_354s = "\1\176\2\0\1\uffff\75\0\3\uffff";
    static final String dfa_355s = "\3\uffff\1\3\75\uffff\1\1\1\4\1\2";
    static final String dfa_356s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\3\uffff}>";
    static final String[] dfa_357s = {
            "\1\66\1\61\1\73\1\30\1\70\1\74\1\76\1\55\1\12\1\13\1\54\1\24\1\14\1\21\1\22\1\75\1\53\1\15\1\20\1\26\1\77\1\32\1\56\1\34\1\63\1\40\1\72\1\71\1\5\1\7\1\10\1\11\1\50\1\33\1\36\1\65\1\43\1\45\1\67\1\6\1\17\1\51\1\60\1\46\1\35\1\47\1\64\1\42\1\44\4\uffff\1\23\1\1\1\52\1\31\1\100\1\2\1\37\1\41\21\uffff\1\57\1\16\1\25\1\27\1\62\17\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };
    static final char[] dfa_353 = DFA.unpackEncodedStringToUnsignedChars(dfa_353s);
    static final char[] dfa_354 = DFA.unpackEncodedStringToUnsignedChars(dfa_354s);
    static final short[] dfa_355 = DFA.unpackEncodedString(dfa_355s);
    static final short[] dfa_356 = DFA.unpackEncodedString(dfa_356s);
    static final short[][] dfa_357 = unpackEncodedStringArray(dfa_357s);

    class DFA585 extends DFA {

        public DFA585(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 585;
            this.eot = dfa_225;
            this.eof = dfa_225;
            this.min = dfa_353;
            this.max = dfa_354;
            this.accept = dfa_355;
            this.special = dfa_356;
            this.transition = dfa_357;
        }
        public String getDescription() {
            return "20324:1: ( ( ( ( Get ( ( ruleIdentifierName ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleIdentifierName ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleIdentifierName ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA585_0 = input.LA(1);

                         
                        int index585_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA585_0==Get) ) {s = 1;}

                        else if ( (LA585_0==Set) ) {s = 2;}

                        else if ( (LA585_0==LessThanSign) && (synpred318_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA585_0>=4 && LA585_0<=126 && (s=T2S.M_50[LA585_0-(4)])>=0)) { /* 62 cases */ }
                        input.seek(index585_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA585_1 = input.LA(1);

                         
                        int index585_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 65;}

                        else if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA585_2 = input.LA(1);

                         
                        int index585_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 67;}

                        else if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA585_4 = input.LA(1);

                         
                        int index585_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA585_5 = input.LA(1);

                         
                        int index585_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA585_6 = input.LA(1);

                         
                        int index585_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA585_7 = input.LA(1);

                         
                        int index585_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA585_8 = input.LA(1);

                         
                        int index585_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA585_9 = input.LA(1);

                         
                        int index585_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA585_10 = input.LA(1);

                         
                        int index585_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA585_11 = input.LA(1);

                         
                        int index585_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA585_12 = input.LA(1);

                         
                        int index585_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA585_13 = input.LA(1);

                         
                        int index585_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA585_14 = input.LA(1);

                         
                        int index585_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA585_15 = input.LA(1);

                         
                        int index585_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA585_16 = input.LA(1);

                         
                        int index585_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA585_17 = input.LA(1);

                         
                        int index585_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA585_18 = input.LA(1);

                         
                        int index585_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA585_19 = input.LA(1);

                         
                        int index585_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA585_20 = input.LA(1);

                         
                        int index585_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA585_21 = input.LA(1);

                         
                        int index585_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA585_22 = input.LA(1);

                         
                        int index585_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA585_23 = input.LA(1);

                         
                        int index585_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA585_24 = input.LA(1);

                         
                        int index585_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA585_25 = input.LA(1);

                         
                        int index585_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA585_26 = input.LA(1);

                         
                        int index585_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA585_27 = input.LA(1);

                         
                        int index585_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA585_28 = input.LA(1);

                         
                        int index585_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA585_29 = input.LA(1);

                         
                        int index585_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA585_30 = input.LA(1);

                         
                        int index585_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA585_31 = input.LA(1);

                         
                        int index585_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA585_32 = input.LA(1);

                         
                        int index585_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA585_33 = input.LA(1);

                         
                        int index585_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA585_34 = input.LA(1);

                         
                        int index585_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA585_35 = input.LA(1);

                         
                        int index585_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA585_36 = input.LA(1);

                         
                        int index585_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA585_37 = input.LA(1);

                         
                        int index585_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA585_38 = input.LA(1);

                         
                        int index585_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA585_39 = input.LA(1);

                         
                        int index585_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA585_40 = input.LA(1);

                         
                        int index585_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA585_41 = input.LA(1);

                         
                        int index585_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA585_42 = input.LA(1);

                         
                        int index585_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA585_43 = input.LA(1);

                         
                        int index585_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA585_44 = input.LA(1);

                         
                        int index585_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA585_45 = input.LA(1);

                         
                        int index585_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA585_46 = input.LA(1);

                         
                        int index585_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA585_47 = input.LA(1);

                         
                        int index585_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA585_48 = input.LA(1);

                         
                        int index585_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA585_49 = input.LA(1);

                         
                        int index585_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA585_50 = input.LA(1);

                         
                        int index585_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA585_51 = input.LA(1);

                         
                        int index585_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA585_52 = input.LA(1);

                         
                        int index585_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA585_53 = input.LA(1);

                         
                        int index585_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA585_54 = input.LA(1);

                         
                        int index585_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA585_55 = input.LA(1);

                         
                        int index585_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA585_56 = input.LA(1);

                         
                        int index585_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA585_57 = input.LA(1);

                         
                        int index585_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA585_58 = input.LA(1);

                         
                        int index585_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA585_59 = input.LA(1);

                         
                        int index585_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA585_60 = input.LA(1);

                         
                        int index585_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA585_61 = input.LA(1);

                         
                        int index585_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA585_62 = input.LA(1);

                         
                        int index585_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA585_63 = input.LA(1);

                         
                        int index585_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA585_64 = input.LA(1);

                         
                        int index585_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred318_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 66;}

                         
                        input.seek(index585_64);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 585, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA666 extends DFA {

        public DFA666(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 666;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "7688:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA668 extends DFA {

        public DFA668(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 668;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "7866:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA670 extends DFA {

        public DFA670(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 670;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "7914:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA672 extends DFA {

        public DFA672(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 672;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8092:4: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA674 extends DFA {

        public DFA674(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 674;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8146:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA676 extends DFA {

        public DFA676(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 676;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8471:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA678 extends DFA {

        public DFA678(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 678;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_190;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_194;
        }
        public String getDescription() {
            return "8606:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA680 extends DFA {

        public DFA680(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 680;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "8931:6: ( ( ruleTypeRefWithModifiers ) )?";
        }
    }

    class DFA728 extends DFA {

        public DFA728(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 728;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 16220:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA730 extends DFA {

        public DFA730(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 730;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "16228:4: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA734 extends DFA {

        public DFA734(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 734;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 16444:4: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA736 extends DFA {

        public DFA736(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 736;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "16452:4: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA740 extends DFA {

        public DFA740(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 740;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 16815:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA742 extends DFA {

        public DFA742(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 742;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "16823:6: ( ruleBogusTypeRefFragment )?";
        }
    }

    class DFA746 extends DFA {

        public DFA746(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 746;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_300;
            this.max = dfa_301;
            this.accept = dfa_302;
            this.special = dfa_17;
            this.transition = dfa_303;
        }
        public String getDescription() {
            return "()* loopback of 17241:6: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA748 extends DFA {

        public DFA748(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 748;
            this.eot = dfa_189;
            this.eof = dfa_189;
            this.min = dfa_195;
            this.max = dfa_191;
            this.accept = dfa_192;
            this.special = dfa_193;
            this.transition = dfa_196;
        }
        public String getDescription() {
            return "17249:6: ( ruleBogusTypeRefFragment )?";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFE1FE7FDFFF8FF72L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000200C45D8CE00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x000000084518CC00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000000C05184C00L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x6C044680D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000000805184E00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000200805184C00L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000040010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x2000040010000100L,0x4000000000200000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0800200C4519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000400000000000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x0000400000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x7C0FE6BCF538CF70L,0x57A24C4A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x0800200C4518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x0800000805184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x6C044680D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000040008000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x000D048090000130L,0x40024A0010000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0020440000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024E0000440000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A34C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x0000000440008000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0008040090000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x4002460000440000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x6C444680D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_20;
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0xFE1FE7FDFFF8FF70L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x0000100000000002L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000010000000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x7C0FC6BCF538CF70L,0x57A24C6A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A24C6A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x6C044680D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C6A92440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x0000080000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000080000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x0000000200040000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x0000000200040002L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0000440000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A25C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A00407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0x7C07C6B4D518CF72L,0x57A04C4C10440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0x7C4FC6B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x7C07C6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x000D048090000130L,0x4002480010000000L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0120000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0080000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x7C0FC6B4F538CF72L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x7C0FC6B4F538CF70L,0x57A34C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000040010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0830000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x000F849090000130L,0x57A24A0810000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x6C044680D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x7C0FC6B4D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x6C044680D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x0000040010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24A40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x040D048895184D30L,0x4002420000000000L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x4000000805184C00L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x0000000000000000L,0x000100B000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000000000000000L,0x000100A000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x0400000000000000L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A34E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A24E00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0x6C444680D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x6C444680D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0030440000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x000D048090000132L,0x4002420000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0001000000000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0x0010000000000002L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x0000040000000000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x000D048090000130L,0x4002480000000000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x6C4D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x6C0D4680D5184F70L,0x40024A0010440000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x000D048090000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x200D048090000130L,0x40024A0010200000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x0010000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010040007C0001L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x40010061007C0001L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x0009040090000100L,0x4000020000000000L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x0000002000020002L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x6C044680D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x6C044680D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_179 = new BitSet(new long[]{0xFE1FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_180 = new BitSet(new long[]{0x7C0FC4B4F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 22, 17, 20, -1, -1, 19, 13, -1, -1, -1, 15, 16, -1, -1, -1, 18, -1, 21, -1, -1, -1, 23, -1, -1, -1, 10, 9};
	final static int[] M_3 = { 7, -1, -1, -1, -1, 39, 34, 43, -1, 41, 18, 11, 14, 79, 86, 13, 24, 89, -1, -1, 9, 10, 66, 21, 20, 12, 81, 15, 83, 36, 68, 23, 42, 80, -1, 17, 16, 58, 48, 84, 38, 77, 29, 40, 90, 88, 19, 33, 60, 47, 57, 37, 67, 82, -1, -1, -1, -1, 78, 30, 26, 46, 44, 31, 85, 25, -1, -1, -1, -1, -1, 69, -1, 70, -1, 62, -1, -1, -1, -1, -1, -1, -1, 32, 76, 75, -1, 35, -1, -1, 74, -1, -1, 45, -1, -1, 71, -1, 72, -1, 61, -1, 27, 49, -1, -1, -1, 8, 63, -1, -1, 22, -1, 87, 73, -1, -1, -1, 50, -1, 55, 52, 53, 54, -1, 56, -1, 28, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 64, -1, -1, -1, -1, -1, -1, -1, -1, 51};
	final static int[] M_4 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_5 = { 26, 21, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, -1, 29, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 32, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 25, 20, 29, -1, 27, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, 28, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 31, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_8 = { 17, 12, 22, -1, 19, 23, 25, 8, -1, -1, 7, -1, -1, -1, -1, 24, 6, -1, -1, -1, 26, -1, 9, -1, 14, -1, 21, 20, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 27, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_10 = { 16, 11, 21, -1, 18, 22, 24, 7, -1, -1, 6, -1, -1, -1, -1, 23, 5, -1, -1, -1, 25, -1, 8, -1, 13, -1, 20, 19, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 26, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_17 = { 21, 16, 24, -1, 23, 25, 27, 12, -1, -1, 11, 49, -1, -1, -1, 26, 10, 53, -1, -1, 28, -1, 13, -1, 18, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 44, 31, 41, 19, 54, -1, -1, -1, -1, -1, -1, 7, 9, 30, 29, 8, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_18 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, 49, -1, -1, -1, 25, 9, 53, -1, -1, 27, -1, 12, -1, 17, 55, 4, 1, -1, -1, 50, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, 54, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_19 = { 19, 14, 24, -1, 21, 25, 27, 10, -1, -1, 9, -1, -1, -1, -1, 26, 8, -1, -1, -1, 28, -1, 11, -1, 16, -1, 23, 22, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 29, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 18, 13, 23, -1, 20, 24, 26, 9, -1, -1, 8, -1, -1, -1, -1, 25, 7, -1, -1, -1, 27, -1, 10, -1, 15, -1, 22, 21, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 28, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_21 = { 14, 11, 62, 35, 5, 63, 65, 56, 21, 22, 55, 31, 23, 28, 29, 64, 54, 24, 27, 33, 66, 37, 57, 39, 6, 42, 61, 4, 16, 18, 19, 20, 49, 38, 40, 13, 44, 46, 3, 17, 26, 50, 59, 47, 9, 48, 10, 2, 45, -1, -1, -1, -1, 30, 51, 53, 36, 67, 52, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 25, 32, 34, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 68};
	final static int[] M_23 = { 13, 10, 61, 34, 4, 62, 64, 55, 20, 21, 54, 30, 22, 27, 28, 63, 53, 23, 26, 32, 65, 36, 56, 38, 5, 41, 60, 3, 15, 17, 18, 19, 48, 37, 39, 12, 43, 45, 2, 16, 25, 49, 58, 46, 8, 47, 9, 1, 44, -1, -1, -1, -1, 29, 50, 52, 35, 66, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 11, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 67};
	final static int[] M_25 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 5, -1, 21, -1, 7, 23, -1, -1, -1, 16, 44, 4, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 3, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 6, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_26 = { 22, 17, 27, -1, 24, 28, 30, 13, -1, -1, 12, 51, -1, -1, -1, 29, 11, -1, -1, -1, 31, -1, 14, -1, 19, -1, 26, 25, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 32, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_27 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_28 = { 24, 19, 29, -1, 26, 30, 32, 15, -1, -1, 14, 53, -1, -1, -1, 31, 13, 57, -1, -1, 33, -1, 16, -1, 21, 59, 28, 27, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 34, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_29 = { 26, 21, 31, -1, 28, 32, 34, 17, -1, -1, 16, 55, -1, -1, -1, 33, 15, 59, -1, -1, 35, -1, 18, -1, 23, 61, 30, 29, -1, -1, 56, -1, 46, 9, -1, 25, -1, 11, 27, -1, -1, -1, 20, 48, 8, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 7, 36, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 10, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_30 = { 27, 22, 32, -1, 29, 33, 35, 18, -1, -1, 17, 56, -1, -1, -1, 34, 16, 60, -1, -1, 36, -1, 19, -1, 24, 62, 31, 30, -1, -1, 57, -1, 47, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 49, 9, 46, 25, 61, -1, -1, -1, -1, -1, -1, 13, 15, 8, 37, 14, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 51, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 38, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_31 = { 25, 20, 30, -1, 27, 31, 33, 16, -1, -1, 15, 54, -1, -1, -1, 32, 14, 58, -1, -1, 34, -1, 17, -1, 22, 60, 29, 28, -1, -1, 55, -1, 45, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 47, 8, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 7, 35, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 10, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_32 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_33 = { 20, -1, 23, -1, 22, 24, 26, -1, -1, -1, -1, -1, -1, -1, -1, 25, -1, -1, -1, -1, 27, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, 28, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_34 = { 49, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 58, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51};
	final static int[] M_35 = { 20, 15, 23, -1, 22, 24, 26, 11, -1, -1, 10, -1, -1, -1, -1, 25, 9, -1, -1, -1, 27, -1, 12, -1, 17, -1, 4, 1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 28, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_37 = { 22, 19, -1, -1, 13, -1, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, 14, -1, -1, 12, -1, -1, -1, 9, -1, -1, -1, 21, -1, -1, 11, -1, -1, -1, -1, -1, 17, -1, 18, 10, -1, -1, -1, -1, -1, -1, 24, -1, -1, -1, 25, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, 1, -1, -1, -1, 20, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_38 = { 67, 47, -1, 68, -1, -1, 33, 34, -1, 43, 35, 40, 41, -1, -1, 36, 39, 45, -1, 49, -1, 51, -1, 54, 28, -1, 29, 31, 32, -1, 61, 50, 52, -1, 56, 58, -1, 30, 38, 62, 65, 59, -1, 60, -1, -1, 57, -1, -1, -1, -1, 42, -1, 63, 48, 69, -1, 53, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 64, 37, 44, 46, 66, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_41 = { 21, 18, -1, -1, 12, -1, 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, 13, -1, -1, 11, -1, -1, -1, 8, -1, -1, -1, 20, -1, -1, 10, -1, -1, -1, -1, -1, 16, -1, 17, 9, -1, -1, -1, -1, -1, -1, 23, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, -1, -1, -1, 19, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14};
	final static int[] M_42 = { 66, 46, -1, 67, -1, -1, 32, 33, -1, 42, 34, 39, 40, -1, -1, 35, 38, 44, -1, 48, -1, 50, -1, 53, 27, -1, 28, 30, 31, -1, 60, 49, 51, -1, 55, 57, -1, 29, 37, 61, 64, 58, -1, 59, -1, -1, 56, -1, -1, -1, -1, 41, -1, 62, 47, 68, -1, 52, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 63, 36, 43, 45, 65, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 69};
	final static int[] M_45 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_46 = { 53, 48, 58, -1, 55, 59, 61, 44, -1, -1, 43, -1, -1, -1, -1, 60, 42, -1, -1, -1, 62, -1, 45, -1, 50, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 63, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_47 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_49 = { 8, -1, -1, 7, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_50 = { 54, 49, 59, 24, 56, 60, 62, 45, 10, 11, 44, 20, 12, 17, 18, 61, 43, 13, 16, 22, 63, 26, 46, 28, 51, 32, 58, 57, 5, 7, 8, 9, 40, 27, 30, 53, 35, 37, 55, 6, 15, 41, 48, 38, 29, 39, 52, 34, 36, -1, -1, -1, -1, 19, -1, 42, 25, 64, -1, 31, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, 14, 21, 23, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}